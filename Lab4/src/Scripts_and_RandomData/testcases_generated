
    @Test
    public void testSortingTechniques0(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques1(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques2(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques3(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques4(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques5(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques6(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques7(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques8(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques9(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques10(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques11(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques12(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques13(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques14(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques15(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques16(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques17(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques18(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques19(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques20(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques21(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques22(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques23(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques24(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques25(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques26(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques27(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques28(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques29(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques30(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques31(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques32(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques33(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques34(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques35(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques36(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques37(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques38(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques39(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques40(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques41(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques42(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques43(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques44(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques45(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques46(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques47(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques48(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques49(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques50(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques51(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques52(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques53(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques54(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques55(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques56(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques57(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques58(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques59(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques60(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques61(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques62(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques63(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques64(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques65(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques66(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques67(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques68(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques69(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques70(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques71(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques72(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques73(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques74(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques75(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques76(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques77(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques78(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques79(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques80(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques81(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques82(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques83(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques84(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques85(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques86(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques87(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques88(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques89(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques90(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques91(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques92(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques93(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques94(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques95(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques96(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques97(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques98(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques99(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques100(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques101(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques102(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques103(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques104(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques105(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques106(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques107(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques108(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques109(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques110(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques111(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques112(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques113(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques114(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques115(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques116(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques117(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques118(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques119(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques120(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques121(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques122(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques123(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques124(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques125(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques126(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques127(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques128(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques129(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques130(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques131(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques132(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques133(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques134(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques135(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques136(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques137(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques138(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques139(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques140(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques141(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques142(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques143(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques144(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques145(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques146(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques147(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques148(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques149(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques150(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques151(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques152(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques153(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques154(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques155(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques156(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques157(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques158(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques159(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques160(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques161(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques162(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques163(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques164(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques165(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques166(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques167(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques168(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques169(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques170(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques171(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques172(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques173(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques174(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques175(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques176(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques177(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques178(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques179(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques180(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques181(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques182(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques183(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques184(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques185(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques186(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques187(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques188(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques189(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques190(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques191(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques192(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques193(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques194(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques195(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques196(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques197(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques198(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques199(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques200(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques201(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques202(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques203(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques204(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques205(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques206(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques207(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques208(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques209(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques210(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques211(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques212(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques213(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques214(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques215(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques216(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques217(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques218(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques219(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques220(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques221(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques222(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques223(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques224(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques225(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques226(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques227(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques228(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques229(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques230(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques231(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques232(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques233(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques234(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques235(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques236(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques237(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques238(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques239(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques240(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques241(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques242(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques243(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques244(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques245(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques246(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques247(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques248(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques249(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques250(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques251(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques252(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques253(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques254(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques255(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques256(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques257(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques258(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques259(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques260(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques261(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques262(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques263(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques264(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques265(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques266(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques267(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques268(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques269(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques270(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques271(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques272(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques273(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques274(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques275(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques276(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques277(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques278(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques279(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques280(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques281(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques282(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques283(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques284(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques285(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques286(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques287(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques288(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques289(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques290(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques291(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques292(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques293(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques294(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques295(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques296(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques297(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques298(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques299(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques300(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques301(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques302(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques303(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques304(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques305(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques306(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques307(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques308(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques309(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques310(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques311(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques312(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques313(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques314(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques315(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques316(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques317(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques318(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques319(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques320(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques321(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques322(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques323(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques324(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques325(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques326(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques327(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques328(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques329(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques330(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques331(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques332(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques333(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques334(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques335(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques336(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques337(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques338(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques339(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques340(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques341(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques342(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques343(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques344(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques345(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques346(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques347(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques348(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques349(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques350(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques351(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques352(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques353(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques354(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques355(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques356(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques357(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques358(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques359(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques360(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques361(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques362(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques363(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques364(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques365(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques366(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques367(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques368(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques369(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques370(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques371(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques372(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques373(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques374(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques375(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques376(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques377(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques378(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques379(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques380(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques381(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques382(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques383(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques384(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques385(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques386(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques387(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques388(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques389(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques390(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques391(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques392(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques393(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques394(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques395(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques396(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques397(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques398(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques399(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques400(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques401(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques402(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques403(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques404(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques405(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques406(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques407(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques408(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques409(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques410(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques411(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques412(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques413(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques414(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques415(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques416(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques417(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques418(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques419(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques420(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques421(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques422(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques423(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques424(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques425(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques426(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques427(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques428(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques429(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques430(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques431(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques432(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques433(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques434(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques435(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques436(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques437(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques438(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques439(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques440(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques441(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques442(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques443(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques444(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques445(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques446(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques447(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques448(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques449(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques450(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques451(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques452(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques453(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques454(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques455(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques456(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques457(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques458(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques459(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques460(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques461(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques462(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques463(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques464(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques465(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques466(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques467(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques468(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques469(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques470(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques471(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques472(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques473(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques474(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques475(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques476(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques477(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques478(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques479(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques480(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques481(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques482(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques483(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques484(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques485(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques486(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques487(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques488(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques489(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques490(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques491(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques492(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques493(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques494(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques495(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques496(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques497(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques498(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques499(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques500(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques501(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques502(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques503(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques504(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques505(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques506(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques507(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques508(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques509(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques510(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques511(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques512(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques513(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques514(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques515(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques516(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques517(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques518(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques519(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques520(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques521(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques522(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques523(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques524(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques525(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques526(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques527(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques528(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques529(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques530(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques531(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques532(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques533(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques534(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques535(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques536(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques537(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques538(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques539(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques540(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques541(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques542(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques543(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques544(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques545(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques546(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques547(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques548(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques549(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques550(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques551(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques552(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques553(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques554(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques555(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques556(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques557(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques558(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques559(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques560(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques561(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques562(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques563(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques564(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques565(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques566(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques567(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques568(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques569(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques570(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques571(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques572(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques573(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques574(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques575(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques576(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques577(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques578(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques579(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques580(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques581(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques582(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques583(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques584(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques585(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques586(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques587(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques588(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques589(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques590(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques591(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques592(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques593(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques594(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques595(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques596(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques597(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques598(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques599(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques600(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques601(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques602(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques603(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques604(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques605(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques606(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques607(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques608(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques609(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques610(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques611(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques612(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques613(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques614(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques615(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques616(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques617(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques618(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques619(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques620(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques621(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques622(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques623(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques624(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques625(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques626(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques627(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques628(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques629(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques630(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques631(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques632(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques633(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques634(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques635(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques636(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques637(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques638(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques639(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques640(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques641(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques642(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques643(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques644(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques645(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques646(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques647(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques648(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques649(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques650(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques651(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques652(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques653(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques654(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques655(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques656(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques657(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques658(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques659(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques660(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques661(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques662(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques663(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques664(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques665(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques666(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques667(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques668(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques669(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques670(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques671(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques672(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques673(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques674(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques675(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques676(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques677(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques678(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques679(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques680(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques681(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques682(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques683(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques684(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques685(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques686(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques687(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques688(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques689(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques690(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques691(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques692(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques693(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques694(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques695(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques696(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques697(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques698(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques699(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques700(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques701(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques702(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques703(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques704(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques705(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques706(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques707(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques708(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques709(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques710(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques711(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques712(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques713(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques714(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques715(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques716(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques717(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques718(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques719(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques720(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques721(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques722(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques723(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques724(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques725(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques726(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques727(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques728(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques729(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques730(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques731(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques732(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques733(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques734(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques735(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques736(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques737(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques738(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques739(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques740(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques741(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques742(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques743(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques744(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques745(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques746(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques747(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques748(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques749(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques750(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques751(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques752(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques753(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques754(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques755(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques756(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques757(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques758(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques759(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques760(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques761(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques762(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques763(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques764(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques765(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques766(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques767(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques768(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques769(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques770(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques771(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques772(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques773(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques774(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques775(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques776(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques777(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques778(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques779(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques780(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques781(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques782(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques783(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques784(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques785(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques786(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques787(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques788(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques789(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques790(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques791(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques792(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques793(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques794(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques795(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques796(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques797(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques798(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques799(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques800(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques801(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques802(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques803(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques804(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques805(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques806(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques807(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques808(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques809(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques810(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques811(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques812(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques813(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques814(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques815(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques816(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques817(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques818(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques819(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques820(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques821(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques822(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques823(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques824(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques825(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques826(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques827(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques828(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques829(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques830(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques831(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques832(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques833(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques834(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques835(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques836(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques837(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques838(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques839(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques840(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques841(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques842(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques843(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques844(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques845(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques846(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques847(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques848(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques849(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques850(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques851(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques852(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques853(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques854(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques855(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques856(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques857(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques858(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques859(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques860(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques861(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques862(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques863(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques864(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques865(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques866(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques867(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques868(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques869(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques870(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques871(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques872(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques873(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques874(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques875(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques876(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques877(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques878(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques879(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques880(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques881(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques882(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques883(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques884(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques885(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques886(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques887(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques888(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques889(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques890(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques891(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques892(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques893(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques894(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques895(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques896(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques897(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques898(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques899(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques900(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques901(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques902(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques903(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques904(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques905(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques906(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques907(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques908(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques909(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques910(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques911(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques912(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques913(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques914(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques915(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques916(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques917(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques918(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques919(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques920(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques921(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques922(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques923(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques924(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques925(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques926(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques927(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques928(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques929(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques930(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques931(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques932(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques933(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques934(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques935(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques936(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques937(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques938(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques939(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques940(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques941(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques942(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques943(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques944(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques945(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques946(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques947(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques948(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques949(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques950(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques951(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques952(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques953(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques954(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques955(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques956(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques957(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques958(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques959(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques960(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques961(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques962(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques963(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques964(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques965(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques966(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques967(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques968(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques969(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques970(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques971(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques972(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques973(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques974(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques975(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques976(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques977(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques978(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques979(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques980(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques981(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques982(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques983(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques984(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques985(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques986(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques987(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques988(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques989(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques990(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques991(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques992(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques993(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques994(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques995(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques996(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques997(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques998(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    
    @Test
    public void testSortingTechniques999(){
        ArrayList<Integer> list = generateRandomList(1000);
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list, false));
        ArrayList<Integer> output2 = getLastList(simpleSF.getSortingAlgorithm("Bubble Sort").apply(list, false));
        ArrayList<Integer> output3 = getLastList(simpleSF.getSortingAlgorithm("Selection Sort").apply(list, false));
        ArrayList<Integer> output4 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list, false));
        ArrayList<Integer> output5 = getLastList(efficientSF.getSortingAlgorithm("Quick Sort").apply(list, false));
        ArrayList<Integer> output6 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list, false));
        ArrayList<Integer> output7 = getLastList(nonComparisonSF.getSortingAlgorithm("Radix Sort").apply(list, false));
        ArrayList<Integer> output8 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list, false));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
            assertEquals(list.get(i), output5.get(i));
            assertEquals(list.get(i), output6.get(i));
            assertEquals(list.get(i), output7.get(i));
            assertEquals(list.get(i), output8.get(i));
        }
    }
    