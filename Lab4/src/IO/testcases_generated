
    @Test
    public void testSortingTechniques0(){
        Integer[] array = {74844, -607017, 15566, 646943, -774747, 199239, 185097, -775722, -618566, 801232, 803991, -86300, -682950, -105366, -624287, 19946, -249481, -375166, -122258, 3525, -350275, 637329, 638936, -689659, -846256, -499703, -214441, -413007, 720390, 982176, 883285, -724133, -148643, 486511, 339911, -466273, -13611, 501454, -263951, -318023, -252477, 638733, -226384, -560433, -59735, -254333, 51778, -589731, 199254, -387817, 446966, -20471, -225216, 461558, -127982, 370964, -843522, -562628, 671017, 857439, 293222, -187573, 270700, 866741, 654892, 719832, 444236, 842433, -24338, -468752, 60552, -52516, 710223, 209498, 952497, -514717, -347966, -567089, -157969, 32487, -874530, -496973, -799289, -186784, 63213, -143442, -908462, -136261, 932226, 304158, 83787, -923737, -171014, 765269, 976825, 491062, 765501, 484049, 163991, 204468};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques1(){
        Integer[] array = {851152, -772579, -227620, 730160, 103673, -356007, -580606, 705816, -807940, 178367, 923980, 772231, -415813, 622633, 353036, 618649, 888262, -439243, 952483, 565936, 549120, -396633, 938752, -908246, -852834, -338136, 489008, 807789, 940700, 326474, 456766, 832067, -342149, -956463, -915934, -317387, -588324, 139255, -42302, 437148, 363086, 264002, -633109, 406945, 967210, -715570, 435522, 811778, 984615, 17479, -269472, -267984, 20682, 249218, -552817, -941243, 340104, 967771, -441108, 557421, -818828, 8474, 663398, -807987, -774004, 171306, -78762, -4323, 53805, 317351, 23423, -207377, 485283, 42048, 943818, -520234, -742466, -256396, 540408, 278603, 888326, -946787, 738065, 386056, 964050, -470860, 113271, -231887, -501206, -457016, 990911, 689531, -761327, -58229, -767434, 836077, 217330, -39712, 459698, -440961};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques2(){
        Integer[] array = {-338097, -776662, 956194, -780750, -545368, 260224, 118148, 677727, 651960, -610716, -951086, 569166, 26716, -642800, -853830, 620571, 717502, -896403, -622604, -652218, -929490, 213029, 162796, -862040, 326473, -59364, 695950, 732142, -177969, -893958, 357943, 261970, 192301, 378307, 278720, 911290, -289936, -474852, -692366, -761896, 750470, 415181, 902622, 444996, 910880, 699378, 395050, -585412, 556790, -838525, 222756, -226006, 541357, 598611, -676515, 395984, 697031, -250643, -439158, -284828, -35133, -842035, 867177, -685540, -771701, 253075, 846586, 474864, -251736, 630897, 432474, 730918, 714937, 536193, 459645, -122566, -948747, -182187, 696776, 40499, 734265, -636935, 476826, 866453, -23592, -198117, 912313, 92981, -639541, 48861, -639982, -396315, 974966, 39356, -75639, 398891, 513288, -333974, 69339, 144262};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques3(){
        Integer[] array = {130408, 210301, -453818, 210650, -765102, 395825, 611733, -747830, -887577, 103434, -598063, 438513, 702887, -191874, 616659, 338015, 463406, 325491, 186734, -69652, 463190, -41510, -885261, -437882, -864958, -69882, 548657, -945634, 391592, 197968, -700335, -548356, -969339, 899437, 695610, -143603, -320619, 391983, -785927, 553052, -926196, 599669, 279661, 126367, -438720, 999458, 80186, 416293, 969966, 685741, 56513, 954994, 717754, 264702, -84610, 252907, 415744, -98892, -147668, 545192, 72768, -94816, -847693, 336830, -962672, -996659, -553690, -970829, -869261, -213085, 888132, -992737, -534897, 657414, 763446, 358529, -677725, 536056, -498193, -522822, 225137, 20220, 561687, 276586, -980062, -651830, -112840, -88754, -414308, 137659, 142008, -905957, 706536, 435104, -743843, -735963, 620872, 565104, -934896, -78442};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques4(){
        Integer[] array = {985441, 871396, 930055, 922012, 610006, 554201, 495117, 368118, 373972, -939960, 714452, 878583, -546395, 630163, 710598, 295956, -799658, -224591, 48936, -620718, -582002, 638431, -543500, -158575, 109674, -564666, -474636, -934386, -473036, -329641, 909515, -574032, 550258, -356947, 652153, 592995, 834415, 780066, 404971, 743531, -465936, 258957, 982674, -914211, 203338, -129348, 350466, 130279, 251955, -685481, 840210, -494827, -914350, 747916, -390811, 527471, -60567, -849687, 510769, 76191, 647210, 313357, 938009, 735978, 658659, -739926, -972748, 295860, 228186, 763276, 527514, -243808, -887913, -771539, 813412, -254310, -308461, 307473, 416287, 892543, -633237, -163883, 375110, -727706, -283958, -858172, 136704, -465091, -631138, -468050, 752889, -931147, -505187, -472777, 520019, -606682, 631775, -503207, -911587, -726371};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques5(){
        Integer[] array = {-255262, 422571, 575205, 524848, 493644, -736538, 48987, -646520, 303309, 994823, -780050, 708391, 962999, 770201, -785070, 320515, 656131, 470626, -786564, 344524, -224932, 415329, 594881, -189326, -277714, 394695, 701693, 849253, 931966, -807805, 102305, 955464, -46813, -900305, 411616, 179992, 760460, -422231, 426540, 676678, -277428, -83740, -674222, -591577, 834626, 835036, -274790, 985573, -872893, -899734, 367303, -748196, -717077, 246412, 593452, 346260, 485987, -499414, -29480, 75627, 700423, -434203, 239532, -412162, 602255, -522400, -419541, 463492, -787171, 537540, 229489, -528188, 430247, -211773, -803979, -462072, -744282, -655358, 111717, 99707, 57584, 346927, 875396, 77416, 148359, 704525, 993665, 168320, 187626, 596754, 330326, -578471, -615542, 523778, 521118, -534454, 807787, -970040, 380037, -98584};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques6(){
        Integer[] array = {73027, 786634, 111071, -748658, -778534, -329931, 648625, 447343, 995902, -566897, 692293, 355520, 44367, -194838, -654950, 551012, -51910, -937235, -120510, 386699, 906955, -88424, -682752, 424341, -130621, 59825, -292225, -2446, 263840, 737919, -775917, -867650, 270393, -180744, -195167, -679673, -174936, 249413, 812935, 944090, -312427, 296129, -117373, 331720, 147027, 282454, -698256, 769354, 900389, -977345, -181570, 20846, -346155, 390547, -803586, 65913, -636982, 55413, -135015, 756183, 170711, -706427, 997226, -163494, 511989, 374956, 212552, 219595, 440877, -929101, -30621, 288746, -644986, -618538, 390151, -736014, 899760, 912698, -915334, 298192, 543994, -129496, 463060, 728054, 676582, 561327, 738749, -642871, -751426, -503740, 805396, 720261, 184931, 685216, 356458, -646834, 611515, 173119, 582614, 337343};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques7(){
        Integer[] array = {-229285, 833837, -186746, 959259, 254069, -27824, -658360, -639645, -544770, -229465, 450099, -784743, -36696, 903352, -91785, -638470, -501273, 713995, -229592, -227825, 564715, -572255, -183538, -240434, -3799, -891220, -218414, 438766, 277364, -480636, 173807, -757319, -240821, 228215, -323429, -757056, -713823, 690881, 281193, 882512, 736017, -883936, -104346, -421042, 856829, 762322, 28433, 788137, -812750, 966019, 978913, -987918, 965585, -913573, 656428, 922361, -900085, 259542, 486125, 642666, 639067, 216878, 109519, 580362, 739890, 381439, 884733, -626622, -941791, 338848, -896238, -572870, -616409, 387295, 131118, 161968, 942529, -703727, -927747, 707195, 164752, 80163, -65330, 968064, 648940, 209028, -266273, 971392, 67669, 866960, -895833, 653713, 498090, 501415, 631474, 401211, -108678, -761724, 567645, -894135};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques8(){
        Integer[] array = {-290237, 960661, 114575, 270296, 799518, -613087, -112412, 809154, 474446, -663136, -537190, 412149, 944376, 303951, 663871, -369655, -688255, -161489, 566682, 99838, -148118, 480238, -220437, 592682, 491687, -401650, 648229, -553023, 5098, 367264, -263099, -295461, -697908, -733454, -832840, 244351, 8590, 445197, 993311, -428764, -657937, -260628, 790226, 248981, -1584, -171267, 90176, 377718, 269952, -397899, 147688, 657285, 262643, -721992, -449096, 174620, 639828, -659101, -317162, 749259, 640161, 656213, 640221, 518068, 44242, -730884, -989253, 446913, -381066, 15780, 671710, -94300, -836591, 367074, 6684, -787676, 211969, -916521, -231564, -613372, 893128, -216600, 703956, 470763, -930505, 420136, -898828, -34730, -982798, 353843, -106245, -524990, -200067, 57938, -140511, 706367, -280757, -193804, 989725, -832563};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques9(){
        Integer[] array = {-818458, 193958, 23750, -476007, -87862, 640370, 591535, 994024, -965444, -459341, -305799, 750849, 146604, 732842, -558916, -664149, -465456, 143405, -374272, 300796, -719334, 569515, 11563, 243342, -800599, -5160, 1430, -630992, 838607, -591878, -188257, 797796, -967078, 596170, -256896, -278629, 174987, -841163, 183180, -443218, -497076, 520227, 691974, -770500, 705385, -609560, -733894, 909218, 521073, 860638, 997036, 386044, -571774, -952444, -669611, 591488, -815408, 16207, -77955, 655446, 245266, -169018, -513573, 530066, -655926, 623456, -859306, -603818, -621685, 312985, 273464, -345971, 335507, -684728, 389455, 32444, 601279, -801486, -573559, -716970, -494411, 392877, -215802, 176526, 121714, -353019, -156544, 623627, 461799, 178374, 96314, 394387, -499181, 998354, 296706, -909885, -311853, -44898, 692828, 367629};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques10(){
        Integer[] array = {385378, -555693, 109004, 906785, -316432, -60138, -206079, 675374, 714421, 49718, 899395, 14367, -786696, -422928, -853124, -539130, 880522, -853214, -910545, 189092, 145652, -786243, -625951, -802070, -154125, -973756, 904118, 740914, -811666, -758783, 800065, -162133, 498799, 811620, 777828, 105180, -369980, -10370, -964139, -879656, -18553, -578838, -233578, -256343, 188377, 237374, -914049, 122350, 519316, -642243, -327824, 522988, -182741, -73227, 558506, 425345, -718985, -219764, -345267, 105507, 828024, 449804, -986508, 532086, -860766, -677456, 378997, 238736, -168927, -457893, 737205, 86465, -589867, 40218, -275726, -265539, 647325, 83024, 374697, 314496, 733609, 781665, 395178, 281428, 405649, 338880, -350678, 307847, 369621, 918680, 745084, -48460, -749783, 737238, -907802, -95981, -862868, -203188, -300312, 771383};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques11(){
        Integer[] array = {-87571, -575867, 580967, -845516, -308052, 999897, 341094, -218791, -362887, -185274, -127191, 141626, -256856, -114936, 849156, 223619, 398193, 770102, 583100, 252536, 846978, 957355, -729767, 406621, 37346, -235868, 861096, 413683, -442553, -84127, -959096, 540545, -366643, -775759, -275036, -966458, -171529, 123258, 972800, -23471, -154350, -523782, 12310, 187879, -362124, 366739, 441422, -724993, 160809, -37206, 552466, 37421, -355235, -49485, 753528, 691063, -358200, 256531, -518992, -616364, -577810, -307359, -322934, -915428, -419530, 907833, -436402, 89119, 313544, -998186, -480119, 31842, -872283, -363583, -969870, 460215, 200122, -504838, 766562, 768419, -858312, -529548, 59692, -949694, 135870, -201074, -23497, -546039, 165935, 103067, -517268, 359798, -343958, 336013, -238337, 362312, 88142, 102449, -482804, -492883};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques12(){
        Integer[] array = {-224112, 64473, 359922, 61581, 582641, -232941, 496369, 543016, -464394, -262664, -323888, -882688, -885838, 613154, 595303, -614123, 707957, 352576, 603373, -947148, 385877, -485362, 568166, -266675, -975516, -286462, 481674, 866450, -786942, 613328, 218973, -687692, 229621, -539944, 224437, -299438, -973495, 783827, -932620, 533383, 887770, 219230, -610595, 616665, -147410, 600717, -260731, 154216, 953774, 326896, -942065, -129251, 217349, -472552, 801121, 60399, 664034, 391057, -251470, -337228, 64265, -997176, -883130, -895891, -787107, 834756, -46947, -332545, 625380, -819894, 103751, 658904, -498331, -449165, 100519, -232282, 325864, 451121, 766648, -474674, -698242, 456903, 276309, 702534, 623355, -697030, -822598, 358835, 133619, 798712, 399833, -101130, 38080, 331965, -240509, 740393, -12884, 315814, 779018, -131189};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques13(){
        Integer[] array = {-157447, 424112, 813255, -749410, 387472, 140873, -677303, 750235, -1576, 819257, -192429, -839930, 787464, 385375, 825984, -287723, 11417, -168527, -194827, 872709, 393003, 322327, 853213, 931158, -370516, -118477, 455479, -773280, -771612, -903648, 777081, 76805, -116941, -89452, 756704, 985686, -170043, -152214, -261590, -701842, -482856, -171889, -957099, 631753, -556318, -719634, -285778, 637855, -572291, 796668, 884245, 248671, -828484, -676161, 272157, -709088, 92059, 154809, 505727, -17147, 77500, -610783, 981961, -146979, -940293, -498264, 593676, 98033, -956363, -940139, -946896, -374060, 71860, 693490, 962551, 952307, 938961, -661333, 160554, -510414, -651409, -892683, 262812, 435902, -739655, 489614, -414025, 127930, -169278, 755622, -802329, 591874, -132793, -663180, -286345, -469934, -621903, -209873, -472691, -506791};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques14(){
        Integer[] array = {491448, -5801, -35536, -787102, -884783, -556094, -344090, -614444, 68853, -495638, 718567, 840314, 163706, 798048, -142251, 439343, -751266, 330532, 42151, 977244, 739719, -424545, -584527, 796313, 976165, -203888, -774347, -813173, 38039, 711401, 957383, 700216, -60473, 80318, 780930, -496821, -945786, 169317, 826335, 37036, -310218, 947606, 834907, -423630, -214429, 293034, -287836, 956504, -992911, -275365, 371549, 487033, -116046, -529865, 733165, -128484, -934362, 283339, -903234, 190302, -187363, -182823, 557617, -505165, 370432, 427624, 442610, -69030, 338692, 89462, -219608, 221743, 21557, 67955, -574383, -616902, -266249, -659784, 683913, 404137, -103735, -556542, 197038, -297171, -349437, 137989, -735881, -536304, 66153, -645032, -149641, 261703, -178080, -280709, 871408, 717314, -224480, -468966, 215722, 183689};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques15(){
        Integer[] array = {-360914, 54010, 568892, 580137, 350623, 18391, 701084, -444660, 975597, -164367, 70403, 430980, 48297, 22619, 505293, 980961, -892430, -206481, 490048, 105219, 985299, -39414, 495397, -878107, -96598, 853230, 277885, -785830, -697222, -732221, 444553, -817297, -277978, 76131, 354759, 398839, -27399, 860163, -6594, 58819, 503488, 987631, 583547, -841530, -155271, 885014, 673186, -419425, 664704, 669734, -508843, -932909, -789975, 582388, 684529, -545858, 834459, 320053, -299348, -169568, -499548, -655079, 885367, 789410, -861303, 73145, -873663, 452794, 729911, -888901, -862073, 989862, -405988, -342830, -875909, -928419, 979546, 343189, -243339, -512376, -932054, -251577, 575225, 491758, 206662, 590531, 43556, 205481, 151724, -253197, 498601, 99866, 727626, 941479, 101470, 280274, -331697, 876969, 380267, 227646};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques16(){
        Integer[] array = {-729546, 199516, -221662, 643654, -204314, -970320, -565115, 995499, -373131, 262513, -966764, 945350, 87267, -292591, 282938, -348843, -315519, -735910, 590029, -119755, 565913, 11019, 673562, -600314, 80545, 177094, 605743, -892900, 684035, 61266, 404149, -365638, 571730, -189554, -8582, -544099, -514419, 517836, -709032, -827584, -758542, 232807, 726765, 712516, -225146, -627447, -961342, -124761, -688875, -960842, -712271, -76090, -477191, 232714, -788728, 9475, -329332, -71371, -341478, -496120, 874862, 884915, 908752, -237953, -436069, -300655, -747974, 423207, 158819, -737916, -763243, 237637, 581027, 514872, -47427, -628522, -807479, 420697, -177289, -527073, -987702, 73048, 762802, 13315, -922319, 447231, -724126, -154246, 486559, -602496, 392905, -906708, -990172, 989586, -916136, 580812, 802571, 717585, 18127, -214245};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques17(){
        Integer[] array = {911500, -175970, 722891, 567392, -947412, -311908, 60428, -956094, -217495, -964061, -684581, 420602, 255334, -105370, 378603, 761004, -593612, 6441, 472384, 18316, 770442, 251414, 540182, -439517, 261141, 632597, 468916, 75809, -546986, -32436, 115014, 485343, -517720, 13585, -808220, 716000, 411712, 793596, 43836, 252685, -130864, 212063, -601741, 319419, -669811, 505151, 767244, -941901, -129869, 266466, -952781, -742997, 652525, -470106, -242577, -606138, -312842, -845522, -266512, 886370, -413519, -351298, 203536, 97239, 431605, -192641, 962143, -989642, -645798, 875717, 244573, -991476, -174486, -906778, -435, -128460, 543301, 478369, 587755, 106720, 819682, -588344, -666946, -797162, 706724, 102729, -555097, 101200, -578733, -312041, -263614, 721668, 205973, 240960, -594792, 695366, 33725, -688721, -757493, -343674};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques18(){
        Integer[] array = {-753650, 539431, -577175, 977908, -168433, 962238, 556593, -772172, -566727, 871952, 916590, 853587, 975772, -820077, -271512, -547615, 954715, 590005, -111808, -44437, -993600, -153751, -477527, 801940, -420794, -20210, 672406, 93492, -108166, 658182, -872969, -1923, 913256, -68082, -843076, -928884, -941258, 138808, 328776, 742776, -951941, 866331, 704221, 552651, 373744, -422286, -353477, 959368, 826548, 12030, 668314, -415435, 186251, -101120, -118593, -536232, 144125, -202100, 823550, 91500, 230547, 284928, -759803, 841316, 985257, 1771, 314721, -198350, 94651, -224725, -788648, -234595, -887948, 223917, 767725, 729289, 66660, 262175, 536726, -650979, 117814, -68289, 457685, 721300, -327128, -796341, 451800, 14654, 148874, 303257, 878231, 796342, 252088, -813597, -42003, 433102, -523353, 284888, -878295, -73357};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques19(){
        Integer[] array = {-41157, 431615, -654132, 722346, 544710, 546668, -678710, 805702, -102380, -372260, -604028, 118032, -930868, -203344, -638794, 420699, 599292, 318341, 104841, 984780, 894394, 725771, -152391, 655336, 413981, -625677, 772534, 828340, -431567, -276419, 161152, 772230, -855153, -862553, -67103, 257551, -752429, 283989, -110502, 801414, -182829, 620160, 620230, 936532, 843044, -668949, -810440, -712928, 688787, -65228, 482735, 826361, -236533, -753774, 230476, 601906, 638708, -218149, -299896, -886013, 445770, -633889, -464326, -267301, 852216, 122758, -430956, -424303, -421163, -121577, 597618, -927726, 316929, -735057, 131405, -230435, 526510, 34999, -945051, -688188, -907809, 330210, -669985, -188298, 811231, 208410, -987173, -75182, -767250, 533390, 288353, -907000, 468396, -273844, -493196, 135378, -435817, -410227, -621077, 566003};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques20(){
        Integer[] array = {783486, 755845, 923896, -319714, 432374, -995442, 318767, 55216, 400412, -680028, -791360, 688254, 278258, 674802, -334499, 203256, 785867, 76310, 915492, -362568, 887254, 520156, 485777, 690180, 200116, 173170, 573883, 972183, -709056, 178632, 641082, 799209, 100478, 485540, 902095, -953065, -767335, -40130, 320480, 312808, -62674, -636908, 39728, -402696, -777433, -46600, 877578, 868715, 826276, 11479, 167698, 987773, -927068, 892527, 306521, -212056, 382573, -268322, -59536, -991431, 890538, 110494, 73771, 518426, -838411, -808962, -644639, -119971, 410052, -262276, -57606, 464472, -454298, -132719, 514618, -835593, 382133, -824541, 509499, -695442, -550258, 41876, 796248, -343411, -714382, -63133, 973652, -475966, -628332, -249922, 349008, 756630, 539940, -204061, -758493, -758812, 483365, 845909, 796727, -827378};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques21(){
        Integer[] array = {918229, -776294, -842555, -491883, 262226, -907358, -141508, 783259, 867129, 558312, -115472, 852192, -823608, -169612, 949551, 480206, 427915, 523470, -728793, 592824, -98908, 583971, 584635, 244182, -148594, -140352, 520276, 910327, 629146, 507078, -777480, 658092, 928028, -118960, -341210, -616601, -922397, -703876, 807341, 912429, -928783, -252260, -896108, 91624, -424944, -730144, 217698, -405763, 803531, -340020, -748723, -804569, 378640, -167950, 534750, -412233, -354744, -841918, -670171, -602122, -13293, 680966, -113809, -987715, 909049, 40682, 526073, 80611, -644513, 404514, 856188, 277203, -266451, -129754, 12461, -730982, 319640, -870029, -959468, 736857, -496252, 7362, 169739, -230829, -332318, -633308, -97313, 92943, -575788, 63679, -130658, 596246, 132644, 974249, -66669, 460026, 905269, 709813, -638968, -1336};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques22(){
        Integer[] array = {867781, 590989, 748449, 351419, 161545, -77542, -545763, 441786, -240162, -419242, -762200, 902909, -74119, -118726, 679635, -481950, -422248, -924592, 414136, -499603, -812342, 905958, 632058, -231630, 892859, -173291, 165347, 634405, 296489, -329662, 987583, -547097, 415811, 546193, 491966, -21743, -570629, 542496, -879504, -311303, 383625, -370255, -933007, 658122, 394147, 342506, -615809, 581831, -943097, -249417, -955485, 175119, -121597, -261849, 604125, 283671, 358776, -432603, 335607, 727643, -514336, 919619, -879515, -35054, 439293, 99887, -705362, -305846, 457023, 428649, 470046, 938365, -573457, 35568, 182900, -407089, -761052, -591606, 846591, 293597, 785214, 590048, 968159, -770269, 772312, 424367, -629949, -748572, -473983, -138444, -632492, 36409, 312585, -895378, 457677, 70995, 797071, -113088, -550641, 120307};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques23(){
        Integer[] array = {-809070, -797837, -641874, -319213, -90741, -200515, 727832, 572106, -714502, 667617, 812459, 85461, -808581, -730417, 292684, -740176, -490787, -438420, 127065, 396890, -646276, -261817, -423044, 792302, -745436, -991265, 968158, -352043, -48741, 198447, -11374, -298428, -448333, -682971, 629487, 410553, 123365, 170372, 769389, 327616, 297313, 540277, 272697, 769733, -84153, 551561, -833057, 122603, -939311, -715950, 485493, 464273, 305066, 853994, 106405, -974732, 961800, 324458, 395940, 154998, -315886, -303515, -805648, -857545, -578654, 311325, -998916, 88507, 228768, -742687, 869243, -368177, -66904, -930119, 862502, 42123, 646785, -697811, -726616, 132121, 331483, 497065, 366439, -364694, 749269, -850062, -206801, 856831, -270860, 211274, -810063, 296464, 532302, -76781, 82339, 958968, 712573, 370891, 660166, -244792};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques24(){
        Integer[] array = {501750, -959544, -706455, -338378, -943613, -561559, -1434, 6731, -665206, -905171, 237135, 878559, 113556, -605061, -507894, 622451, -837, 311566, 62025, -718258, -173405, -812966, 50989, 951680, -49646, 461104, 261927, 254675, -845251, -121439, 447607, -596107, 570235, -445193, -114250, -766944, -41724, -476751, -217566, 44470, -175927, 856803, 746551, -239620, 686747, -442791, 827481, -110442, -905246, -799511, 879510, 406187, -314947, -673779, 378182, -748788, 467795, -908284, -329180, -526833, 143633, 474939, 908851, -894551, 109050, 938253, 801947, 534385, 693407, -730904, -211837, 190581, 689745, 832828, 862195, -744403, -612458, 599027, 433062, 921155, -577110, 178639, -576850, -437002, 425341, -300985, 341583, 191484, -240317, -47017, -56176, 443845, 721959, -759269, -328066, 817296, -484892, -223139, -711688, 659009};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques25(){
        Integer[] array = {175763, 810798, -420114, 326523, 784260, -371089, -411810, -279504, -844562, -921938, 448023, 868874, 806510, -289068, -945810, 286445, 686739, 66224, 570733, -517768, -833686, -134455, 139430, 839061, 876613, 766582, -84144, 518081, -566711, -50732, 70957, 962518, -105904, 449662, 235607, -886908, -605243, -287581, 938860, 558113, 576954, -400954, 732277, 75031, -803794, 908773, 306106, -237552, 311322, 477121, 248189, 916546, 125808, 333674, -81193, 190589, -268914, 973973, 426466, -99142, 31633, -576208, 122566, 995921, 835023, -908611, 677275, 559788, -814056, 448795, -163034, 732727, 1310, -817342, -621622, 113472, -558376, -297531, 45071, -751133, 295391, 698351, -451531, 112593, 580868, -311560, -537447, -758507, 552080, -19458, -710069, -992525, -856917, 684498, -874706, -556920, -260713, 814830, -276308, -933046};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques26(){
        Integer[] array = {738107, 520227, 549758, 441297, -753540, -250176, -267585, 805789, 870030, 788137, -8778, 463738, 44995, 979211, 219070, -481052, -720183, -754899, -209380, -725909, 488568, 433063, -290545, 942127, 672574, -272796, 96810, 843283, 494036, -756183, -216552, 276561, -900202, -816056, -439119, 99954, 38927, 917882, -695406, -432990, -910557, 360651, -239226, 568186, -727884, 199687, 13247, 136026, 864311, 517593, -830205, -131361, -992598, 47116, -566079, -849141, 885862, -498403, -551988, 758968, -116839, -299187, 236830, 308193, 186253, 644265, -870323, -26231, -412915, 68641, -403515, 595503, -155614, -345900, -130258, 609050, 807985, -705746, -338853, -351078, -602637, 519670, 22932, 436237, 261713, -9195, -548446, -677274, 470578, -633836, -471813, -537883, -390808, -862354, 165993, -570567, 961694, 548376, -177765, 462336};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques27(){
        Integer[] array = {-533342, -512700, -740270, -200100, -529826, -67225, -575449, 354368, 643522, 662767, 699908, 509740, 822916, -320209, -40637, 662237, 962025, -357563, -164927, -156562, 27063, 886176, -387337, 345935, 31121, -873498, 946335, -191279, -861047, -998775, -200378, -834957, -527864, -857440, 523451, -161862, 418487, -954112, -197127, -448902, 986998, -330810, -642827, -400160, 108767, 919331, 642395, 208963, -183721, 667220, -281865, 562571, -556451, -125966, 125138, -691191, 609571, 992162, -798281, 294389, -874698, -917281, 59451, 971990, -877922, -616775, 225818, 146357, 498901, 51714, 864395, 986667, 809542, -851388, -728701, -913566, 590953, -965310, -824352, 130083, 308598, -772399, 51309, 856061, 889673, -653070, 738373, -5734, 960902, -724173, -567638, 117727, -694840, 365448, -662366, 325293, -446796, -336748, 963431, -72144};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques28(){
        Integer[] array = {221663, -569961, 244053, -36125, -708482, -695125, 257620, -981936, 369815, 228638, -86258, -515018, -616259, 82595, -257674, 821604, -188448, 819259, -987055, 506696, 378176, -489772, 649515, 308791, -420844, -432103, 540981, -286291, 260533, -187765, -907107, 5800, 683927, -343040, 355101, 461531, 320873, -616769, 37644, -288944, -986858, 515411, -708302, 862273, 698028, 706349, -728810, 234281, -133132, 553156, -234357, 173372, -963128, -866297, -198554, 614356, 177474, -626877, -895647, 562774, 714292, -973924, 884246, -672120, 619955, 980951, 556245, 766338, -552604, -52527, 570888, 165932, -195725, -836132, 644681, 943328, 921883, 648955, 27205, -257156, -2829, -543278, -9264, -966158, -575887, 201663, 299006, 126593, 788101, 925564, 446070, -89372, -914754, -99424, 424168, 457984, -246242, -599059, 313350, 378702};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques29(){
        Integer[] array = {271030, -588534, -701144, -391386, 282799, -640163, 361324, -237932, 926538, 317599, 395635, 377394, -223981, -221864, 64498, 774837, -129230, 502482, -913696, -812843, 244215, 195415, -243765, 864755, 112414, -664632, 756434, 219235, 5571, 103276, -294792, -764288, -678937, -909816, 329309, -536970, -596491, 866459, 769667, 859269, -892957, -475444, 873379, -787029, -740617, -754709, -198550, 381765, 448714, 685236, -570091, 32315, 803927, -748852, -333654, 388325, 279763, -691888, -534723, -792555, -382339, -516495, -290155, 47184, 828146, 656861, 334150, 822578, -454028, -764407, -276000, -693664, -341461, -246258, 275047, -364241, -61448, -287563, -660294, 213295, -348001, -480395, 607711, -929690, -488624, -212915, 961400, -41283, 124356, -252564, -932473, -305332, -218673, -839406, -205956, 198240, -479340, -268437, -158446, 733899};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques30(){
        Integer[] array = {378969, -546355, -771878, 549281, 580767, -769986, -436211, 11004, -816630, -246188, 563167, -714544, -344857, 204238, -206506, -256021, -14486, 966726, 442781, -246138, -444848, 597115, -759302, -152703, -851024, -789358, -498183, 647673, -758654, 902325, -123052, -55055, 679421, 239287, 686796, -259715, 60286, 131081, 774627, 903711, 397605, 801540, -225139, 270510, 296340, -511252, 605421, 12977, 416477, 284970, -934271, -930931, 435834, -712832, -970369, -359584, 528540, 137381, 977694, 899134, -286208, -899176, 251336, -418845, 733879, -284516, 539540, -572831, 174827, -994186, -819890, -963464, -139322, -861057, -959177, 445070, 980311, -816752, 60748, -37770, 688378, 709396, 93218, -637845, -445691, -893364, -453218, 392738, 145671, 277890, 570058, -923305, 211903, -918170, -378716, -531785, -490318, 886195, -341509, 263598};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques31(){
        Integer[] array = {-767854, 489800, 179595, -262312, 639568, -89975, 298202, 102625, 861745, 967371, 456610, -193464, -583371, -329259, -660835, -11287, 440047, -723649, -886090, -161987, 49159, 407351, 826870, 88591, 478822, -995965, -504294, 636640, 256258, -611670, 481136, -796023, -82404, -615005, -574738, -207909, -791473, 946988, 996518, -139071, -383212, -655037, 630574, -80733, -625723, 385028, 665883, 645568, -431301, 768399, -322775, 888383, -526415, 768497, 349133, -207633, 749185, 365440, 429109, 607133, -577158, 979588, 361625, -145941, 809080, -981259, -4854, -968184, -714113, 96256, 85873, -147266, 328169, -10374, 223042, 831643, 228194, 106981, -48216, 648176, -584114, -83647, 665574, 857252, -243062, -311754, -731928, -645518, 344531, -441858, 380272, 834852, 842041, -978127, -760800, -616805, 899262, 101122, 787874, -231238};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques32(){
        Integer[] array = {-519463, -26025, -50496, 5059, -621197, -139077, -970882, 112452, 11924, -172740, 288499, 722774, 656491, 910376, 111900, -662772, 83567, 585206, 790018, 614200, 624746, -288000, -958708, -542802, -172322, -590827, 787907, -736576, 885441, -851308, 189885, 25755, 991970, -740637, 674201, 37649, 917944, -919398, 190218, 51779, 781937, -38479, -997695, 749994, -88531, 179698, 115452, -240579, -154898, -475362, -12157, -830544, 837779, 230945, -931526, -234516, -506981, -921522, -928929, 916686, -803921, -382665, -728833, -711603, 758671, -743642, 687266, -432914, 362115, -897037, -994806, 385484, 621793, 928473, 671472, 524401, 612603, 763498, -529904, 517941, -435713, 196750, 451610, 322786, -904979, -859921, -793236, -103009, -895954, 21130, -382611, -175145, -371538, 690386, -397479, -98874, -667477, -972919, 963811, 869788};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques33(){
        Integer[] array = {-149117, 553776, 348189, -680013, -639382, 299278, 268119, 186247, 27702, -384081, 884042, 740737, -175546, -581631, -961675, -88964, 52856, -578623, 120453, -952283, -786657, 294186, 868904, 271091, 965212, -572943, -618611, -109804, -88778, 65598, -522351, -189162, -122593, -797835, -558826, 872788, -684892, 645118, -132169, -733420, -164481, -357398, -85290, -600707, 493018, -2271, 412671, -964769, -490373, -389586, 773150, 777522, 213085, 944598, 465705, 428248, -431049, 251622, -901264, 193285, -884826, 222339, 101030, -586579, -476144, -639742, 944255, 304437, -670314, -457178, 833391, -366278, 360056, -254682, -555734, -901948, 836250, 509610, 405064, -166508, 342049, 668266, 322527, 696417, 30141, 886034, 409791, -665828, -538118, 638579, -315807, -404179, 821434, -346681, 770073, 255048, 559554, -66087, 546933, -566922};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques34(){
        Integer[] array = {551738, -112626, -165469, -290124, 1397, 467594, 771543, 13920, 756906, -500096, -33056, 431768, -498864, -393706, -531349, -281958, 669227, -643810, -118385, 841782, 552714, 546783, 903534, -323415, -68264, -657936, -489463, 872124, 517253, 436566, -570676, -562132, -298857, 676840, -32378, -628924, -451506, -720354, -178135, 943239, 583730, 260824, 689024, 702736, -145980, -419414, 584380, 544895, -464203, -386088, 319245, -122264, -342358, 409472, -855691, 869335, -148178, -353384, -378274, 214545, 699625, 229330, 65288, 396747, 251404, 517405, -831473, -164891, 891368, -329762, 473546, 326716, 674148, 470432, -775808, -678057, -472333, -645394, 64421, 228971, -37071, 895132, -650651, 518883, -257124, -682228, 50405, 522767, -562827, 799050, 67709, -128059, -35167, 28438, 216123, -123564, -96229, 455978, 155547, 18463};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques35(){
        Integer[] array = {199331, -170762, 550652, -54828, 551931, -517509, -458007, 72888, -124343, -120340, 513910, -402300, 785350, -614143, -539662, 499199, -904990, -975350, 567280, 790040, 748702, -517636, 725683, -854849, 195880, 912174, 462778, -587500, 146579, 11703, 711670, -672791, 411997, 138242, -982665, 580270, 442684, -577486, -939507, 840204, -124879, -870290, -530018, -312210, 130071, -688656, -231959, 839956, -502605, -183539, 943681, -649748, -465726, 207971, 519264, -74129, 148157, 424205, 807420, -748434, 506429, -706038, 684783, -569732, 4496, -578618, 615736, -302030, -237928, -148508, -899584, 351790, -353564, -750197, 414537, -15653, -53728, 266419, -291500, -679532, -131450, 612209, -623678, -679124, 704196, 48074, 356269, 314200, -741257, 506375, 374206, 205553, 787225, -454391, -504342, -492302, 656423, -537819, -39441, -894558};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques36(){
        Integer[] array = {854157, -614933, -713004, -728253, 709888, 326288, -361876, -347985, 205792, -409607, 604947, -995207, -896412, -12407, 719617, 556217, 179144, -329221, -916360, -460740, -254510, -313250, 749920, -738219, -447850, -994964, 120334, -760854, 840212, 516950, -282255, -163441, 638546, -620598, -706669, 807962, 482986, -141195, -120750, 26297, -633981, 766762, 320547, -167678, -648716, 576263, -651483, -892917, -155481, -66005, 910625, 605639, 167156, 372307, -218881, -269117, -442837, 426137, 583089, -74484, 150735, -738639, -6430, -463556, 435155, 443759, 136000, 712092, -937280, -653548, 872630, 397952, 612554, -750695, 219805, -336515, 995821, 455730, 901394, 43702, -419988, -854762, -999591, -65833, -776064, -323521, -200092, 320601, 697968, 131293, 798805, -912017, 425969, -754310, 460659, -75813, -20891, 521498, -935433, 709151};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques37(){
        Integer[] array = {265331, -415037, 512740, 398449, -67593, 521446, 112443, -220693, 110297, -137306, -350121, 45091, -937081, 927021, 692984, -903241, 229012, 783622, 73674, -866591, 945118, -686785, -349760, 847694, 38546, -163224, 957704, -362323, 363435, 478448, 897493, 791239, -46416, 309634, -407532, -491100, 519428, -665228, -285688, -661891, 654251, 98989, 714403, -230055, -239259, 571359, 437716, -946175, 288337, -347879, 948042, 111089, 248679, -273961, -344764, -183120, -968022, -726642, 799205, -989339, -783325, -504920, 67434, -327690, 769048, 707691, -388829, -245916, 93349, -214708, -694565, 564179, -970190, -287700, -602711, 836717, 356381, -670651, -680714, 391173, -693384, -251884, 352124, -77070, 366000, 692681, 765589, -805469, -727114, 875656, 908852, -970920, 116613, -640446, 748384, 370356, -290996, -989682, -927312, -89210};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques38(){
        Integer[] array = {531092, 461865, -11314, -899350, 849990, 234214, -900307, 899041, 292624, -169609, 108512, -537128, -922787, -741218, -447098, -387341, 891459, 680808, 589745, -744632, -266673, 71473, 948387, -903475, -632409, -328829, -89132, -869804, -87436, 927230, 646911, -874911, -493096, -668188, -846100, 526201, -959145, -629185, 622552, -621746, -931846, -317624, -215739, -274645, -893915, 274910, 566541, 455449, -224325, 615493, 829868, -744422, -669823, -81555, 39963, -556534, 95701, 485041, 492887, 738537, 740986, 984548, -934262, 946110, 603583, 202788, 325615, 893736, 324665, -147819, -876418, 187789, 302086, -31915, 218158, -148463, 500757, 690520, 605162, -965795, -84431, -478139, 634561, 577835, 767654, 864130, 894921, -178498, 968803, -500725, 192271, 567837, 987464, -685136, -966733, 3392, 511344, 544928, -574745, -700269};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques39(){
        Integer[] array = {78719, -799963, -930681, 129988, 27035, -274993, -395707, 341114, 381523, 379666, 72112, 125575, 881659, -607581, 890819, -848803, 714627, 157785, -906339, -460585, 255543, 107421, 650017, 402745, -571725, 209152, 6117, -679274, -272394, -117301, 185752, -7364, -632717, -161111, -256293, -894614, 363784, 115780, 610480, 886775, 229652, -541269, 445054, 363522, -704461, -691429, -630508, 602915, -216571, -792195, -549872, 217187, -925635, -994449, -711868, -540083, -314708, 520603, -500216, 675615, 899706, 371719, -746522, -268765, 991435, 843674, 101207, 252224, 914354, 872755, 546897, 691126, 885926, 962940, 948385, -127873, -836, 467115, 228773, -248237, -692878, 231769, 12396, 689685, 948289, -332498, 192902, 768986, -496688, 305079, -379444, -40476, -374069, 379745, -773995, -478238, -644154, 693218, -465008, -280487};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques40(){
        Integer[] array = {659270, 674834, -35457, -455528, -411770, -277171, -680200, 101898, 794055, -729999, 844948, 223677, 573638, 457401, 588713, -363344, 659257, 547016, 739279, 405380, 807837, 236846, -183453, 851934, -858490, 127710, -691754, 465969, 267011, -568761, 641550, 526317, 338524, 508176, 941789, 641129, 589624, 94595, 567250, 412088, 424968, -794161, 478342, 82788, 886479, -906204, -332222, 950130, -28459, -14059, -539588, -693069, 917521, 497731, 665641, -459725, 795152, 907581, -991825, -271645, -393723, 524261, 696521, -848255, 308981, 180951, 236948, 142239, 222408, 382948, 224244, -510558, 199070, -638694, -268528, 5796, 101317, -55582, -316757, 645563, -108411, -90729, -834503, -363904, 377200, -743693, 398013, -503142, 165077, 83208, -542603, -498187, 681819, -672615, 214502, -935529, 539549, 433941, 410653, 427250};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques41(){
        Integer[] array = {192994, -820165, -854603, 509951, -805001, 680378, -675685, -885688, 467671, -708762, -886499, -475928, 68762, 751186, -181847, -763594, -571813, 665284, 480427, -138216, -969584, -952650, -840235, 750539, 497560, -134139, 612892, 28268, 904281, 533533, -351954, 510130, 778059, 775503, 457868, 904547, 475463, 478188, -88801, -956899, 932069, -435751, 288832, -513205, 884644, 613800, 390191, -146914, 747799, -892216, 496658, -464160, 930172, -85282, 371458, -537155, -86380, -232093, 889785, -835676, -424214, 565050, -446106, 53424, 796321, -592440, -44640, 257005, 391391, 769009, -221806, -251797, 54190, 451064, 113474, -370242, 780056, 843509, -946436, -425977, -264624, -977595, 281932, -623565, -898369, -692057, -272352, 39292, -482903, -122575, -659569, -844004, 839932, 579722, 522612, -843108, 945118, 205541, 63917, -976767};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques42(){
        Integer[] array = {-324743, 728713, -151322, -423792, -812444, 784860, 111145, 690832, 883139, -825827, -582099, -292582, -727908, -278953, 603390, 320179, -636120, 335283, 974659, -767276, -816424, -522173, -321876, -367052, -979638, -502705, 829417, -893339, 966892, 479607, 538468, 205843, 941185, 145450, -766966, 807914, -273194, -693302, -891865, -853031, 831119, 613352, 693789, 788765, 731223, -687392, 848088, 205206, -463292, -49979, -197925, 548051, -704369, -309780, -227057, -399302, 172221, 447998, -807747, -825264, 664230, 222036, -11961, -661823, 735915, -897869, -15603, -491312, 412678, 820353, -571093, -23593, -641246, 675440, 969568, 805125, 280029, 425970, -772678, -92493, 854192, 209340, 917201, -245157, -363761, -647596, -532570, -960296, -630927, -390042, 806415, 489825, -179949, 228532, 644682, 93511, 816409, -105391, 211095, 181618};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques43(){
        Integer[] array = {594052, -635169, -385100, 60359, 253795, -217032, 164407, 651468, 123912, -331870, -619557, -811550, 888967, -149912, 773116, -726421, 798551, -822061, -831472, 603902, -760250, -671046, -835294, 800322, 787538, 171212, -522168, -144635, -996318, -755766, 148706, -300368, 431679, 584658, -289853, -158354, 301795, -917776, -583295, -440626, -252668, 503804, -44612, -687339, -167436, 242778, -376149, -671211, -185367, -354725, -614707, -560223, -820999, 61865, -830217, -201579, -495642, 27807, 752536, 808465, 87507, 534132, -472085, 653863, 581135, 816841, -591156, -845169, -540938, -170638, -893042, -732054, -831732, -479088, 438449, 452707, 782645, 343240, -922246, -705989, 753103, 726800, 498798, 799602, 731315, -889507, 346526, -509739, -151118, 964126, 371507, 651751, 933455, 952522, -151461, 123050, -427798, 704275, -476331, -730742};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques44(){
        Integer[] array = {685082, -617482, -132274, 437981, -409999, 800783, -804631, 616033, -2066, -875180, -495348, -378439, 224552, 967959, -434575, -803429, 203994, 451553, 890471, -417709, 947249, 347577, -783216, 778567, 303891, 501933, -451673, 590801, -287361, 147196, 296735, 982705, -607328, 895490, 548831, -304762, -391202, 74129, -996210, -958185, 952133, -81044, 730886, -539057, -599828, -152611, 909107, -932750, -820812, -997972, 76278, -265682, -897685, -839309, 651618, -36052, -515296, 871968, 490380, -272100, 766928, 59694, -644705, -504011, -518851, 323663, 470463, 634972, 325450, -678308, 964759, -198804, -394623, -760616, 403625, -350991, 222721, 103523, 332442, -497489, -256082, 985985, -438058, -792513, -744228, 46436, 701875, -487025, -671652, -561668, 985129, 444089, 44586, 151571, 859798, 636123, 312908, 353393, 858824, -947569};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques45(){
        Integer[] array = {-339010, 672886, -686771, -866551, 397522, 432970, -101629, -422217, 123359, 621780, 615428, -731207, -996231, -16510, 584651, 777406, 736003, -206487, 692907, 937676, 319717, -464751, 13699, -621192, -925729, -756570, -821164, 767094, 367232, -245420, -517372, 32320, 140492, 870203, 485142, -728677, -391213, 600020, 710392, 50329, 489572, 155151, 311332, 813869, 892880, -489965, -571213, -507016, 304286, 471803, 708794, 568751, -482392, -901812, -72135, 956827, -188999, -484113, -363305, 622526, 758819, 711075, -104522, 139084, 52429, 670339, -677616, 547817, -974579, 13676, -245530, 622436, -58730, -173697, -41790, -420603, 747090, -959518, 412311, 635502, -244736, 748716, -49646, -304932, 770658, -296480, 106479, -686341, 315643, 282957, -442814, 759360, 400361, 157442, 242352, 173348, 558101, -617771, -8082, 959372};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques46(){
        Integer[] array = {455662, -508334, -630914, 743661, -435571, -129186, 69067, -626972, -788482, -264258, 283503, -37581, 209709, -982600, -794543, -210738, -421244, 449093, 538260, 219503, -233806, 900044, 861192, -413454, -701532, 277619, 673297, 847073, -10525, -755581, 134865, -396793, -391607, -901375, -62797, -553564, -792960, -437741, 791107, 729914, 190512, 76651, 570169, 61787, -857848, 576689, -660760, 941459, -691503, -898557, -201053, -498694, 913611, -158128, 682750, 833322, 183382, -635371, -556938, 371904, 340587, 759152, 824385, -548753, 2541, -105873, 456598, -628637, -138662, -533885, 388718, -831154, -287557, -907941, -417874, -912459, -101548, 798389, 389168, -746721, 799790, -976886, -409448, -706461, 495335, 344022, 499674, -781429, 785494, 977884, 852080, -937768, -316319, -107376, -929910, 933906, -774301, 49375, 580383, 882514};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques47(){
        Integer[] array = {353165, 804605, 58760, 178670, 116419, 566796, 806506, -127825, 718717, 70436, 191919, -167650, 421969, 427231, 801785, 435855, -625546, -787129, -810574, 671358, 454120, -22036, -767542, -651680, 739652, -670075, 688930, 91049, 626935, 837559, -602041, 311760, -277560, 162638, 496996, -430456, -554474, -415324, 120588, 119561, 421513, -886608, -782562, -415568, -623601, -955970, 763414, -872089, -136121, -900981, -378991, 422890, 264951, 762901, 404731, 507154, -690676, -545383, 617812, -18216, -732954, -739563, 823131, -173091, 829755, -748418, -258888, 479425, 576650, 135594, -692851, -997760, 209967, -6106, -984178, 127911, -795421, -898334, 202228, 776965, -371467, -222769, -380964, 916676, -311174, 426392, -498915, 97715, 743618, 3063, -523869, 403036, -680126, -981099, 446512, 282807, 345842, 637644, 931735, -678718};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques48(){
        Integer[] array = {-460890, 191679, -738505, 894538, -341005, -64694, -619671, -278315, 503455, 404335, -420244, 174122, -944642, 412997, 114147, 947404, 802158, -612596, 667447, 206776, -710351, 756521, 492905, -630103, -459940, 445299, 761426, 47427, 98828, 557197, -210734, 37376, 246116, -339848, 284363, -16190, -11231, 771102, 259244, -198490, -590605, 717446, -622715, -876209, 914725, 784749, -593740, 164148, -426623, 330685, -276877, 430758, -386616, 352293, 461668, 183415, 363148, -986271, 72149, 354161, 978167, -848537, -893649, -719332, 965372, 73972, -6666, 423175, 717799, -971080, -439434, 432215, 28878, 985101, -938192, -398909, -80552, -278480, -732559, 613991, 658070, -355130, -872852, -257447, -353815, 29799, -513119, -839277, -917140, 674445, 722295, 660261, -754934, -554785, 26722, -451420, -962409, -11188, 167354, 165981};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques49(){
        Integer[] array = {779366, -686305, 65602, 395184, 161980, 11051, 436142, -476997, 676003, 137460, -884260, -616209, -927698, -770983, -16463, 328994, 377590, -774450, 629160, 344192, 193386, -671905, -20567, -978782, -219327, 815651, 174435, 595882, -601180, 670776, -755220, -889089, -23399, -725146, -783937, -199870, -174029, -17607, -743599, 937215, -632384, -227005, 752880, 774157, 820035, 912454, -610834, 703292, 818502, 475604, -276801, 359653, 83929, -318029, -553525, -779806, 705416, 714648, -576771, -61961, -541505, 64700, 295017, -735271, -849397, -496185, -246589, 551718, -173202, -104918, 318009, 400058, 71149, -953793, 134090, -979299, 835290, 589023, 231740, 749663, -641777, -940191, -356458, 468885, 361877, -925046, -252142, 57830, -871268, -855084, 374784, -327600, 665632, -545524, -195891, -298713, -370031, 578335, 656124, -612033};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques50(){
        Integer[] array = {-916307, 739261, -459200, 18787, 735508, 564379, -960821, -767225, -964751, 219365, 285538, -575249, 780222, 175430, 470767, -701997, 559536, 570437, 63970, -260978, -315065, 186373, 411733, -856049, -129131, 107448, 919502, 320412, -160395, 919865, 359274, -209832, -72454, 440207, 614803, -865846, -862549, 166888, -287743, 122685, 929162, -601993, -80843, 786501, -502184, 944528, 890934, 709828, 987572, -98564, 791102, -290283, 811633, 789678, -769170, -139322, 147734, -346860, 796875, -382939, 792927, -612940, -342338, 18988, -808488, -152790, 191064, 859761, 637402, 927616, 427667, -569034, -851076, -603226, -216410, -43579, 713401, -555179, -570482, -105324, 166197, -94755, -470815, -169006, -820476, 283872, -868069, -135734, -231073, 423791, -282783, 732772, -66075, -827982, 156377, 491857, -178473, -701717, 528568, 67954};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques51(){
        Integer[] array = {-709247, -382016, 624287, 915947, -249826, -752039, 98210, -807245, 485256, -834323, -215045, -151909, 820085, -351616, 743513, -262225, -556976, -905989, 562592, 669273, 490838, 957212, -548035, 194548, -726208, 934234, -322795, 238295, -462198, -965514, -811237, -791913, -601709, -322401, -727978, 731988, 961422, 354035, 660843, -570748, -821327, -898074, -154361, -440833, 130344, -130411, 725212, -464680, -789156, 952183, 731304, 960406, -829485, -841570, 302601, -180601, -269843, 648577, 306046, -918582, -292083, -138373, 622912, 965516, -38268, -255315, 919421, 78034, 477473, -554232, 933041, -449298, 647954, -937892, 369033, -972255, 698837, 267733, -406744, -896863, -592059, -221729, -406419, 527013, -833823, -410934, 941175, -354089, -171519, -871922, -837607, 128258, 746466, 464927, -420851, -388506, 455864, -914888, 724598, -749880};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques52(){
        Integer[] array = {-427180, 519570, 617528, -667803, -456290, -535933, -336357, -326972, 166342, 387443, -231674, -59729, -825463, -897935, -204142, -499767, -908850, 32238, 688819, -495061, -5864, -669701, 223087, -309002, 427608, 973471, -261074, 907783, -460589, -531335, 779850, -170441, 196498, 415047, -33956, 97001, 123808, 583639, 16768, -787494, -174799, -336551, 998482, -287730, 360211, 250318, -652863, -549585, 136254, -218678, 148683, 763035, 4012, 304951, 792833, 115094, 664874, 532234, -446635, 134691, -922091, -941157, 754419, -677715, -819523, -567902, -267236, 582834, 502091, 185190, -54608, 495422, 274168, 428170, -89410, -89634, 432459, -99110, -930621, 918106, -16710, 694510, -634930, 78138, 367605, -442105, -812225, 783548, 442863, -823044, -979788, 348642, 177386, 278626, -930222, 129275, -712265, 995512, 261515, -188579};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques53(){
        Integer[] array = {-879718, 960991, -16303, -377244, 916969, 269184, 785512, 797107, -721308, -750923, 473389, 882453, 879192, -472152, -378089, -865212, -613707, 828464, -660320, -101787, -732310, 429183, 20607, -978377, -930769, -882690, 586249, 578885, -927680, 758977, -377903, -616463, 377196, -20940, -478950, 748432, 879080, -29541, -852092, -71641, -608624, 127294, -634068, -960149, 85093, 533291, 285155, -500101, -352905, -798787, -615561, 461946, 965575, 497400, -481831, 500622, -130550, 722460, -557884, 421353, 98633, -47259, -571954, -983578, 64436, 855713, -634371, 13185, -352577, 689686, 627368, -31264, -111294, -968151, 269798, 774838, 666798, -268068, 485909, 692387, 867040, 315221, -924323, -462664, 502333, -350711, -644565, -688996, 630776, 664848, 135129, -166649, 701001, 738618, -754891, 520230, 399399, 776242, -33005, -209163};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques54(){
        Integer[] array = {-240014, 39032, -943519, -367239, -107120, -593003, 887158, 255042, 361457, 750867, 840998, -519075, -515324, -522108, 201374, -243617, -89128, 922268, -707518, -942058, 858666, -886419, 579290, -560944, 663324, -781664, -829793, -189140, -225802, -55351, 953189, 196462, 545519, -529248, 776440, 434386, 799691, 313679, -810618, 518780, -432068, -312374, -610168, 20248, -284055, -167921, 545328, 971742, 908283, 410453, -109879, 948471, -685182, -439686, -724441, 536025, 397897, -204554, 303145, -448668, -543107, 191646, -469894, -185833, -608211, -126962, -713348, -657517, 693021, 899021, 35877, -865692, 949936, -328712, 255094, 546407, -931428, -997037, 953821, -81591, -692127, 395322, 277574, -972034, -609568, -839651, -14783, 924600, -251723, 903956, 583032, -412278, -347563, 417265, 557629, 378018, -526992, 219054, 844731, -669770};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques55(){
        Integer[] array = {871016, 506619, -506669, -334093, 899031, -759891, -628613, -268657, -345093, -727702, -617998, -340933, -445480, -578289, -485283, -980368, 714209, -22386, 120005, 684568, -317311, 549269, -286248, -466511, 415593, 305047, 939583, -801288, -284853, -923567, 321166, 154081, -787035, 603673, -838265, 792510, 99860, 593603, -942308, -420117, -869593, 584050, 356336, -597835, -477690, 484615, -586918, -160209, -623372, -910973, 595828, -386520, -58891, 769916, -955434, -366704, 728103, 923946, -262902, -235160, 297828, 450598, 313077, 3970, 651160, 770680, 998665, 854625, 224474, -524316, 339626, -21785, -746468, -850323, -424271, 960043, -187556, 545265, 414551, -706086, -529902, -79071, -898978, -42122, 506286, -174992, 529696, -739342, 372307, -111748, 876691, 838389, -398279, -997241, 153112, -817154, 31484, -75164, -198662, 251471};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques56(){
        Integer[] array = {-427538, 271234, 211693, 229969, -474372, 835593, -850586, -701744, -839296, -157541, 295304, 794045, -273071, 269241, 668267, -698056, 470276, 865921, 796138, -472920, 120100, -1937, 383284, -321336, 729634, -439266, 889547, 732889, -790739, 477543, 792286, 855759, -394111, 900536, 573817, -757020, -83401, 425288, -206124, -227945, -204834, 186180, -522585, -995368, 710319, 132490, 791603, -429382, 896825, 822700, -256240, -667593, 12263, -258754, -483554, 26812, 366278, 797355, 725452, 750037, -860933, -726933, -775691, 646279, 646065, 321110, -826113, 740706, -295373, 306807, -615392, 335715, 87217, 529802, -194730, -950283, 924543, 788996, 603164, -71614, 33953, -850415, 900859, 592520, -243819, 366098, -423555, -382680, 659809, 800070, 860694, 417387, 921734, -990425, 313401, 366230, 322019, -820718, 459734, -629200};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques57(){
        Integer[] array = {-100805, -453138, 901513, 265569, 504546, 197145, 383674, 289660, 180343, -16299, -515747, -371346, -952398, 260235, -328334, -849605, 412475, -119176, -5158, -281904, -990623, -909263, -652338, -504197, -164091, -344887, -279121, -247116, -952005, 853526, -708911, 818253, 831830, -614476, -356556, 714927, -154763, -460762, -293161, -363564, -248037, -800999, -927567, 70123, 27948, 803044, 708060, 281204, 197122, -143708, -966989, -949831, 791249, 924872, 350859, -620491, -618653, 161889, 439699, -798128, 446217, -729887, -756621, -305343, -376909, -245542, 160509, 7406, -579416, 293565, -254968, 677883, 242751, 985383, -660919, -703758, 7696, 951105, 299021, -483852, 406001, -199556, -806167, 296634, 102955, 695790, -162022, -190831, 406631, 378813, 942843, -895037, 999430, 64604, -234008, -509966, -442102, 269065, 424210, -507883};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques58(){
        Integer[] array = {-953119, -597364, 524529, 77158, 935031, -105190, 812249, 790225, -80493, 240011, -463060, -257137, -292815, 26579, -86532, -645012, -178047, 442877, -51139, -982475, 434160, 878940, -373902, 687386, 84596, 480328, -297510, 810995, -872516, -172907, 52469, -53628, 685269, 380314, 601862, -423408, 621543, -749745, -890667, 458734, 939770, 781340, -898060, -122005, 108704, 562896, 298536, -565210, 256346, -837609, -245073, -621021, 925134, 593069, -110713, -831607, -911563, 537351, -61028, 622521, 631464, 707124, 54923, 921020, 678602, 65134, 271012, -936290, 872149, -532341, -25557, -913575, 779499, -77600, -452681, -677878, -242613, -180159, 692264, -947504, -210654, -520147, -342696, -818515, -828066, 583336, -385689, -921470, 57481, 626151, 617344, 873023, 777478, 82584, 789614, 68076, -272098, -180713, -733114, -170382};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques59(){
        Integer[] array = {688719, 518444, -436763, 416400, 583218, -878683, -522900, 789719, 793831, -244356, -977502, -860939, 75471, -40805, -684828, -9677, -960787, -26686, -423251, 189970, -194606, 251484, 958659, 74315, -240456, -743902, 292259, -373519, 547305, -104284, 211290, -860531, 157161, 398681, -106276, 389977, -667508, 903387, -467629, -304677, 37099, -346648, -876835, 353339, 467306, 172884, 815855, -216242, -348356, -370301, -750997, -352514, -213115, -567953, -249242, 523960, -807718, -789242, 520175, 658357, -782767, -357847, 667998, -832008, 452345, -170315, 514434, 99267, 440999, -580098, -484114, -497679, -142350, 569472, -392923, -3205, -32285, -503464, 572101, 638751, 609321, -722649, -482374, 285486, -637769, 804154, 927613, -630989, 920261, -987244, 432355, -862278, -307628, 654410, -550379, 127037, -482618, 536118, 356110, -598614};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques60(){
        Integer[] array = {353185, -527085, 638336, -744748, -689291, -617526, 674648, -419226, -549698, -366158, 460512, -275751, 715466, -648870, -922679, 821878, 794284, 623673, -916820, 28893, 589534, 262686, -978818, 865459, -366260, -35585, -462504, 515962, -699278, 958352, -74985, -166500, 110204, -66619, 874137, -496378, -699417, -233125, -450623, 364410, 11676, 902995, -147759, 9889, -836103, 729991, 951995, -987030, 4244, 245965, 248664, 77045, 144422, 58820, -19614, 35390, -2336, 626788, 466570, 246799, -196640, -51551, -502848, 450909, -313657, -795474, -937112, 744962, -320247, 483154, 360495, -12253, -498504, -290032, -590584, -113317, 873940, -305618, -26549, 596258, 242552, 176556, 479739, -967034, -954837, 445633, -668619, 551210, 282047, 747193, -513848, -162844, 751780, -159109, -866701, -641495, 923521, -566471, -520867, 278565};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques61(){
        Integer[] array = {214191, 109935, 460099, 920855, 373526, 650585, -52248, 33508, 260715, -652941, -439664, -368828, -812584, 362850, -775659, 228480, -130698, -197815, 937376, -546159, 210783, 927651, 190637, 428436, 74434, -266469, 927550, -611156, 636606, 857594, 620688, 789191, -3300, 262105, -905120, 898571, -233192, 263396, 309275, 146190, 239313, 263075, -335620, 497003, 944272, 371831, -941370, -421507, 419414, -559100, -511860, -304756, -272641, 247872, -283240, 383162, 563862, 383572, -417853, -710555, 854743, 706843, -209891, -230339, -104989, -416600, -69702, 55416, -38955, -856990, -969265, -255733, 415235, 590226, 666682, 300361, 30546, -627235, -336869, -736081, -967192, -535843, 865695, 984073, 467992, 484309, -281911, 880041, 648554, -192221, 233192, -630053, -37761, 967563, -87891, -449715, 873133, -807225, -915569, 91487};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques62(){
        Integer[] array = {-147797, -715678, 648096, 471446, 234947, -583721, 337806, 538072, 20156, 56547, -801669, -99459, 46547, 975063, -456625, -916354, -677615, 316051, 468591, -630882, -382831, -632418, -556272, 330176, -561248, 637745, 348455, -216362, 930225, 803144, 169800, 648803, -48047, -783050, 61073, -845811, -302131, -43990, -494139, 50302, 345680, 952956, -814478, 946012, 170645, 586463, 726608, -103237, 276686, -569964, 55926, -41764, -239384, 603046, -634992, -930191, 343258, -892850, -50665, 824941, -991489, -507001, 244180, -892007, 854216, 469695, 162353, -182714, -801126, 133946, -62756, -175241, -146692, 388688, -718879, 289834, 28315, 792329, 82177, -93692, -611199, 563785, -10045, 467120, 457576, 294248, 180406, -295843, 59291, -708804, -392659, 364218, 558724, 589670, -895043, 882899, 3273, -219889, -701683, 922219};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques63(){
        Integer[] array = {-943347, -514155, -425026, 401223, -265354, -29639, 392760, -943888, 551448, -653042, 631559, -447734, 210062, 205878, 128006, -380979, 264534, 406600, -277304, -223169, 170565, -193884, 695776, 488110, 871509, 900050, 356906, -245932, 572255, 285727, 618134, 94763, 348804, -217421, 521967, -225880, 326670, -511342, -664224, -565209, 712325, 133587, -978626, 885110, -56277, -140403, -939642, 949363, 484390, -2575, 6527, -957765, -329976, 493408, -672320, 66027, -623671, -707210, -494180, 238367, 779909, -977261, 238179, -993435, 237990, -152911, 904208, 689000, -731027, 941494, 937684, -502504, -498136, -967863, 324630, -389091, -721894, 932776, 532083, 182616, 506857, 864269, 760922, 763223, -12719, -767306, 832357, -651962, 297061, -418662, 39373, 683215, -564074, -439654, 224837, 359654, 527263, 179768, -680498, 588204};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques64(){
        Integer[] array = {152854, -37687, 680884, 844604, 639712, 928716, -243327, -13420, -623132, 424646, 64625, 635709, -535143, 438902, -846983, 405732, 680839, -834414, -830972, -608602, 166482, -526750, -507917, -532396, -121789, -872718, 19130, 842273, 938672, 637969, -14884, 245252, 845724, 24962, 45540, -119945, 874751, 548461, -491203, -498956, -430292, 159217, -375857, 400989, -19639, 561270, 824175, -490604, -193494, -209830, 128575, 837476, -392488, -158435, -950780, 880894, 290910, -187889, -663728, 622420, 339247, -508091, 315132, -164737, 956827, -220661, 109497, -570526, 203016, -818838, 580624, 228036, -758679, -363904, 301578, 722500, 192788, -523314, 281277, 945404, -356971, 607574, 537864, -250037, -301138, -861043, -855261, -179956, -227736, 364419, -274026, 809048, -670240, 278053, 913364, 842219, 592132, 800267, -363730, 932711};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques65(){
        Integer[] array = {-826972, 796180, -939236, -667961, -344956, -819419, -877153, 131007, 240718, 739117, 968562, 3133, -750908, 675675, 935944, 859823, 317304, -510550, 378682, 173451, -455247, -689672, 155717, 859445, 866517, 322012, -205002, -632626, -892524, -70462, -261246, 49337, -766206, -191785, -932003, 622930, -264927, -545692, -681998, 759164, 337530, 685161, 747282, 292898, 436005, 428099, 206669, -859441, 585553, -574218, 511897, 653019, 91424, 765177, -359388, -639825, 142240, 784783, 588974, -518689, -254699, 467163, 639911, -273446, 461185, 967557, -723152, -250882, 120671, -388784, -951340, -774057, -677284, 647867, -817698, 730816, -988382, -458189, 893483, 546028, -645528, 550509, -761092, 78573, 989456, -495632, -539592, 509859, -370463, 742130, -667967, 974519, -745791, -711818, -227645, 807035, -785107, 800421, -930229, 458589};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques66(){
        Integer[] array = {921971, -945769, 523818, -245890, 928513, 894461, 965304, 634197, 599356, -807825, -132174, 200814, 280780, 451901, -540690, -933906, 715083, 867232, -304053, -65953, -282405, -947699, -381929, -521700, 554778, -355491, 787139, 28583, -891811, 212628, -16463, -62892, -643509, -575626, 252456, -878764, -500813, -245565, 612048, 974452, 637674, -822355, -818260, -889837, 713568, -437234, -917132, -368519, 945643, -453175, -334333, -218339, -208628, 600637, -312001, -840872, -691103, -847428, 302750, -327326, -352355, -695584, -793744, -431585, 31826, -50342, -805712, 991695, -206655, -401065, -358116, -573545, -380524, 737095, 666593, 632773, -339047, -265683, 916228, 835859, 478038, -539810, 524712, 200955, -861947, 840080, 555899, 906039, 232060, -597865, -89149, 777582, -6714, -455138, 692523, 19075, 463735, 883011, -97730, 576851};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques67(){
        Integer[] array = {-917839, -321579, 823043, -386167, 560684, 342897, 227381, -387103, -806114, -996386, 779175, -928737, 231790, 11891, 430924, -124870, -291659, 693153, -559485, -856007, -829441, 190913, 817538, -591603, -915160, -57966, 517360, -549293, -10778, 593321, -226248, 510801, 491944, -675907, -206753, -510090, -657064, -478527, 548466, -740142, -523305, -279558, 459201, -411919, -675263, -298770, 533431, -761921, 372896, 57609, -685311, -712093, 160526, -391222, -293826, 669283, -196828, 758581, -220432, -553898, 514651, 66609, 828752, 101436, 152266, 534288, -656167, -546313, 571747, -624059, 368033, -306960, 821707, -845078, -921002, 137024, -953413, -868481, 429612, 663374, -384370, -956656, 266461, 315969, 123395, -249194, -388638, 855759, -154863, 541303, 662470, 636800, 73933, -235746, -398204, 265100, 131962, 870981, -812130, 690548};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques68(){
        Integer[] array = {-853798, 539834, 169904, -754356, -562333, 367609, 63391, -613488, 40025, -714631, 717612, 50230, 455869, 37990, -324429, -689887, -393303, -387132, 217533, -680847, -782019, -243035, -92166, -992574, -916079, 386898, 669921, -825193, 63133, 643281, 438533, -93222, -901391, -303091, 887409, 414910, -634035, 634241, 108501, 952841, -443051, -646201, 969402, -194465, 778454, -353798, 420601, -201883, 921977, -54685, -968915, 757615, -370068, 542875, -211183, -686026, 247492, 433761, -330728, -964452, 412952, -922501, 32861, 704967, 174469, 104682, 651683, -837362, 635190, -4359, 365020, 512485, -253076, 950965, -867392, 89840, -471891, 139400, -142155, 235900, 94534, -750877, -438672, -586113, -948719, -404803, -835585, 161770, 667935, -383309, -969028, -237157, -541666, 634892, -11662, -443918, 722418, 764204, -669483, -722032};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques69(){
        Integer[] array = {-608511, 768095, 26707, 253084, -249157, 803433, 76477, -621689, -995097, -467676, -932060, -953665, 899997, 233687, -266070, -109615, 239345, 27527, -408979, 706945, -652424, 30121, 958852, -275703, 782377, -14000, 253256, -551733, -449111, -543401, 871162, -716952, 647666, 676422, -840378, -83557, 6597, -83265, 177309, 266169, -870763, -530071, -68102, 79590, 866613, 14168, -551090, 614138, -476287, 344446, 309328, 900520, 652480, -244468, -889705, 661382, 179484, 837570, -649591, -406842, -601337, 496262, 621947, -666987, 184857, 851778, 786389, -456198, 919714, -746520, -411048, 715653, 83265, -531852, 528880, 429887, -904988, -484510, 878996, -818145, -999970, -863903, -756469, -283402, -223512, 310778, 822164, 112963, -200872, 425586, -519851, 598317, 338727, 445261, -760760, 47480, -669595, 959645, 540065, 880737};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques70(){
        Integer[] array = {139879, -118492, 22625, 761952, -234299, 681838, -810365, 413276, -913656, -778432, -499764, 297763, 864692, 501779, 87698, 482462, -281155, -613683, -115097, 777949, -832175, -624047, -14092, 227072, 161416, 739413, -484727, -218772, -59679, 383625, -183555, 865718, 422440, -644222, 683513, 621907, 929591, 199491, -365216, 308555, -390642, -129930, 896497, 62999, -514172, 326229, -190007, 855448, -214703, -103670, 125976, -951390, -558045, -561688, 793130, -25952, -225846, 282508, 763958, 831474, -29076, -983941, 888342, -585812, -375706, -642552, 234947, -420590, -773394, 833062, 581182, -551433, -818433, -682835, 898318, -56929, -519041, 76576, 414101, 613307, -410879, 407008, 356466, -601530, 623850, -807954, 379919, 450940, 185545, 997181, -141656, 738458, -140896, 26889, 286655, 555969, -893628, -501767, 47046, 107150};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques71(){
        Integer[] array = {357863, -498102, -224578, -135799, -738625, 82432, -204061, -944666, -958072, 594030, 418549, 177935, 490524, 251021, -959134, -115324, -736927, 305087, -764486, -995377, 319529, -18859, 890196, 39139, 119687, 342196, -400312, -258950, 708287, -841320, 675671, -63590, 673527, -598992, 617329, -482853, 838948, -781048, 55028, -382051, -170386, -304007, -605338, 213608, 173944, 34509, -970903, 21414, 393332, 579964, 909386, 950314, 363880, -460291, 915760, 795443, -746698, 543133, -975384, -944255, 967888, -176366, -582963, 675756, -791527, 429282, -226396, 257215, -721450, -263114, 919558, -307428, 837755, -873977, 377459, 6889, -15052, 200009, -17867, 673073, -124677, 559698, -129347, -662697, -210583, -170968, 378100, -301868, -137596, 921207, -580872, -415883, -628036, 354477, 476834, 866427, 467350, 903437, -294883, 356329};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques72(){
        Integer[] array = {854250, -731560, 415913, 316435, -611631, 408367, -414762, 588225, -189353, -801379, 741659, -998085, 801766, -22302, -435892, -417474, 546430, -501122, 762628, 3987, 46786, -881623, -930476, -116, -777518, 863555, -938714, 517950, -910481, 954979, 50975, -64573, -827748, 382216, 27776, -382291, 862500, -779757, 18590, 766599, -55321, -262206, 179708, 468341, -753508, 868379, 501238, -65232, 785566, 79223, 312031, 293437, -571819, -511072, -662860, -652223, 694461, 263977, -129974, -207375, 430245, 905597, -364937, 893015, -507051, -955156, -994023, -527914, 226307, -526155, 182093, 798671, -85050, 194599, -950462, -372451, -960371, -484811, 492073, 19663, -563553, -816868, 572347, 429165, 403301, 825741, -726652, -350606, 163952, -711283, -180944, 217282, -474917, 539988, -946514, 493969, 507748, 988178, 746776, 957345};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques73(){
        Integer[] array = {272918, 94002, 366767, -4916, 140434, 683389, -581258, 302775, 154123, 205062, -257292, 468227, 553340, 643400, -535708, -284042, -74319, 225932, -546983, -465949, 411736, -595571, -342354, 123092, 724656, 751102, -335631, 778353, 439622, -169320, 682246, 440920, 244903, 185414, 132630, -819354, 678244, -693741, 3596, 919382, 676848, 321989, -898146, -76018, 145163, -154872, 326264, -891276, -465010, -338160, 937753, 285444, 406847, -856607, 690873, -219229, -140994, -808810, 413941, -387085, -299910, -870441, -627984, -619900, -14104, 28108, -639374, -261698, -363374, -944160, -18059, 297022, -957836, -982829, 13733, -846755, -444518, 113085, 880872, -834495, -611599, -205854, 420209, -380326, 336273, -727235, -552115, -28131, -26994, 716595, 189693, -995299, 1856, -630084, -983644, 70283, 725829, 727051, 894774, 600908};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques74(){
        Integer[] array = {818838, 910808, 530587, -902707, -839166, -171824, 71966, -129409, 436801, -689081, -385176, -667584, 659481, -264735, 595023, 994498, -201800, 789788, 430673, 119534, 485138, -299525, -866370, -634787, 859932, -592162, 840228, -658072, -973175, -621076, 438701, 762697, -203937, 461923, 967301, 854168, -111554, -818389, 322685, 84384, 66571, -204596, 271937, -159771, 892965, 823303, -45973, 384966, 131423, -161193, 627524, 161696, -248945, 581056, 528035, 981649, -271647, -935920, -621105, 53714, 764054, -992596, 725160, -558330, 622636, -624852, 256130, 916943, -322865, -808769, 202951, 439510, -642657, -399511, 491681, 966784, 917014, 872954, 179804, 150475, -51246, 489412, -32872, -9783, -186692, 89056, 317140, 870512, -651276, -174735, -404556, 111958, -589220, 375460, 482163, -799789, -47212, -129898, -518585, 426045};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques75(){
        Integer[] array = {334601, 8444, 773822, 52967, -426420, 394860, 24184, -730790, 361311, -548376, 781131, -277324, -165347, 283705, -268089, 272759, 745670, -980498, -300292, 389330, -133196, -400241, 304292, 572679, -933552, 305881, 205630, -723902, 897185, -258761, -89643, 669859, -778779, 436641, -360319, -374296, 548035, 25605, -575239, 320899, 707086, -110466, 876726, 966575, -955661, 31616, -48545, 524692, 316353, -659276, -300567, -504992, -975092, -375533, 322339, 84503, 185540, 951145, 608797, 723968, -671200, 451278, 415814, -978884, 816337, -835552, 853375, -479184, -88083, -591091, 982838, -639165, -844426, -566410, -226788, 175233, -863694, 385795, 247882, -705359, -659108, -327768, -498006, -825299, 651458, -25537, 926, 24923, 958368, 885960, -579949, 521536, 294109, 248734, 815398, 567481, -227466, -692224, 995960, -812028};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques76(){
        Integer[] array = {632213, -176011, 573979, 917960, 852694, -464845, 117864, 295929, 54558, -279307, 693166, 25962, -176238, 568976, -549312, 616566, -480778, 757738, -42702, -777595, 851816, -684154, -518390, 834460, 444309, -721328, 857098, 211807, -964856, 206895, 782159, -793658, 768494, 315440, 29754, 403552, 884245, 537337, 908467, -843453, -384534, -960964, 659760, 11745, 892000, 631101, 735105, -578092, -134138, 265254, 19226, 27848, -270872, 173245, -829739, 407806, -442457, -29218, 441014, 127129, 170270, 324038, 524592, -84185, 49261, -377214, -572118, -983466, 716319, 156740, -974739, 295381, 46945, 560129, 25014, 197424, -870569, 113673, -996731, 849329, -525109, 422091, -431106, 381062, -427808, -173718, 409439, 651773, -36732, 784605, -944373, 60443, 196776, -515383, -473708, -650846, -194039, 818692, 340678, 143950};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques77(){
        Integer[] array = {-97756, 84699, 885808, -816902, 804750, -595894, 492240, 559287, 299593, 821971, 211763, 991530, 954417, 75814, 718298, 817522, 577491, -41601, -843464, -628110, 173156, 383018, -863196, 227095, 983641, -798931, -946782, 958829, -271539, 855114, -477246, -301640, 18075, 19053, 100998, 587736, 868835, -169194, 508236, 284659, 770460, 962508, 798715, 923654, 533338, 267917, 374061, -836686, 344170, -834944, -842529, -547333, 102750, 795303, 962607, 172965, 103068, 559231, -301109, -759654, -685175, 829972, 323382, -426796, 781011, 735000, 107218, -592814, 714960, 317409, 465475, -575790, -760458, -996440, 559650, 10781, 463962, -815265, -785905, -263590, 510102, 18953, -476176, 582911, -143707, 254218, -71118, 336865, 412175, 135747, -357892, 836442, 839005, 879171, 489902, -512872, 25586, 697844, 87196, -574900};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques78(){
        Integer[] array = {-103576, -329648, 588836, 484181, 266990, 753072, -983427, 10747, -56442, -717338, -854337, -59602, -300745, 83938, 563543, -525514, 862598, -738006, -958390, -789941, -714611, 313427, -749181, -971806, 455476, 755529, 647135, 691670, -483459, 502532, 822453, 961147, 240578, -489731, 62272, -664239, 852121, 300661, 680881, 48744, 966763, 987065, -704533, -316383, 98349, 234542, 157739, 740588, 542796, 893885, -799687, 236547, -461656, -632828, -14334, 259497, -160725, 171845, -936317, -206928, 798136, 615303, 794157, -104999, -327204, -818865, 278165, 789912, 884209, 118886, 1366, 620323, 424731, 947432, -109272, 832883, -870671, -94203, -901927, 685157, 678938, 368589, -697379, 80713, -690817, 708491, 452059, -710555, 54474, -404266, 265837, -925491, -183393, -583351, -874183, -835985, 298725, -520013, 925714, -29330};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques79(){
        Integer[] array = {900226, 812328, 784013, -684435, -455323, -558568, 986162, 615162, -686331, -46172, 215721, 334754, 535749, -770270, 271269, -255091, -943658, -68006, 106455, -279253, 252607, 669428, -714397, 229887, 90490, 799976, 418107, 514633, 147622, -68934, -948134, 64586, -139415, 547747, -151155, 895819, -199738, -20839, 238211, 434012, 404622, -148717, 272346, -700306, -974541, 170136, -355683, -234895, 195174, 969186, 304867, 489112, 364416, -382816, -112446, -822622, -908303, -336063, -672055, 789565, 131151, 866761, 123280, 106071, -252544, 80848, -396865, 407841, 40781, -134724, 878149, -437113, 252211, 191134, -298610, -312614, -496889, 302015, 876747, 794907, 177205, -354361, 160493, -913916, 140214, -748246, -871718, 938551, 719207, -72167, 278489, 30828, -208089, -791613, -996307, 567376, 2626, -35507, 991521, -780283};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques80(){
        Integer[] array = {-400705, 188355, 998195, -89562, 982098, -824015, 518782, -785534, -604572, -111627, 351867, 581375, -303110, 969579, 636823, -674757, 203768, -527156, 975922, -5461, -750952, 80901, 136865, 245102, 460481, -632577, -614936, 315597, -137672, -158995, -228872, -722838, 835767, -260693, 897710, -227347, 237941, -973063, 122494, 176657, 565190, 907945, -756146, -38711, -553373, -636698, -902011, 578035, 644751, -611927, 93210, -511974, 829632, -381710, 944413, -361024, -144185, 804836, -754509, 538033, 436906, -499187, -973150, -228452, 718390, -551070, 584857, -357811, 284655, 462159, -442780, 405353, 721024, -376680, 186620, -470008, -230760, -616400, 6032, -760380, 284218, -471877, -228936, -964056, 891440, -945880, -382642, -597627, 873923, 171414, 271242, -726185, 541372, -405620, -310511, -251944, 226250, 996320, 42767, -631197};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques81(){
        Integer[] array = {132171, -72402, -208476, 564601, 209521, -423604, 169725, -252461, 223053, -234950, -475471, 512609, 665572, 606990, -671767, -439764, -351679, -123712, -803456, -947101, -247628, -751090, -279568, -284991, 596911, -428384, 958502, 80127, 828535, -277246, 805203, -429728, 286089, 899430, -8823, 300580, 862988, 395370, 761446, 374547, -981230, -35257, -482030, -660116, 209006, -773492, -369145, -18156, 991503, 92132, 550278, 363359, -686062, 616439, 394323, 372228, 973149, 245058, -765508, 21756, -583746, -393392, 609898, -914279, 832349, 584701, -670639, -222307, -404798, 473461, 340225, -476050, -622107, 389810, -90123, -593430, 836414, -729099, 354385, -619798, 550498, -39495, -507123, -584178, -751951, -734981, -697749, 844496, 829331, 705876, -98218, 73141, 447687, -477742, 559630, -493377, -635036, 234227, 657824, -255264};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques82(){
        Integer[] array = {977350, -922820, -703892, -817208, -277465, 803603, 500445, 774751, 865159, 809889, 241785, 260505, 289691, 208480, -260108, 652744, 323846, -976691, 561511, -660768, 229134, 335013, 540947, -833002, 966950, 253139, 938718, 988628, 490636, 524227, -212548, -671588, 694370, 854989, 344223, 23187, 222834, -815952, 117275, -153972, -573022, -705276, 820726, -276893, 633466, 139047, 845039, -821239, 408319, 321950, 328044, 960348, 150200, 964896, 632237, -797372, 162605, -356901, -573479, 225925, -457909, -798133, -190648, -998406, 212315, 353090, -311262, -460176, -514940, -429724, -420749, 958141, -281748, 814071, -497668, 291861, 822249, -218995, 328079, 969799, 676298, -107229, 546981, 716671, -493583, 192565, -109636, -222650, -32301, 608982, -295689, 936817, 515365, 627606, -474232, 190157, -94114, -209620, 931235, -584053};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques83(){
        Integer[] array = {736874, -959026, 738373, -326595, 385766, 961479, -80018, -916360, 336986, 767608, -768506, -84688, -316056, 583416, 648684, -806319, 827929, -895681, 78646, -345476, -14009, 6363, -251300, -682440, 963317, 897694, -325746, 516756, 276075, -294796, 504579, -260114, -508246, -927943, 485483, 264673, -423588, 58562, 610882, 506401, -756506, 684600, -800245, 773151, -609434, -773445, -241607, -527771, 650509, 890397, -878593, 571584, 250781, -924165, -465283, -166188, 210991, 263755, -369381, -115819, -88538, -530066, -798796, -871689, -277388, 107771, -171724, 511508, -465009, -209465, 587400, -920244, 673333, 866943, 337527, -94488, 635357, 284084, 44544, 70767, 418407, -838628, 660318, 723065, -764785, -866153, 561847, 330829, 101123, -242123, -768440, 218957, -267377, -228797, -335849, 83786, -240856, -202760, 510250, 664943};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques84(){
        Integer[] array = {152647, -234272, -412117, -169619, -56473, 50328, 734544, 671417, 840319, 890935, 495188, -69591, 196978, -739290, -735924, -564846, 781926, 37069, -614789, -555711, 891606, -843404, 424909, -79840, 574120, 726681, 959376, -984019, -694408, 111601, -301747, 357076, 11862, -462927, -716318, -475904, 618755, 406914, 140377, -48920, 756628, 455550, 23311, 32397, -28689, -410668, 295951, -919082, -88570, -954598, 603868, -276443, 59832, 765621, 70274, 760680, -758358, 595696, 677438, -560321, 743331, -476390, 101876, 121381, 97901, 733699, 661848, -231131, -840499, -548348, 81411, 329757, -78335, 941775, -251689, 523172, -165882, -160268, -227818, -717772, -705841, -141252, 383825, -154154, -406252, 39455, -975687, 537396, -306111, -588849, 767463, -530193, -365773, 5380, 74561, 476350, 84488, 822041, -630743, 505065};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques85(){
        Integer[] array = {45829, -444902, -775299, -656524, -867581, -184963, 919047, 797458, 2206, -494983, -36691, -34456, 34842, -548161, 414899, -198856, -709977, 431140, -858145, 849372, -695205, -2436, -830130, 203050, 764068, -160806, 822819, -759818, 128309, -713755, -371424, -811379, 495264, -165269, 446936, -750917, -447307, 327130, -213727, 690391, -133361, -78800, 721345, -367625, -908448, -831370, 465330, -109544, 652398, -611326, 328810, 227723, 710072, 986347, 796258, 45951, 425332, -498461, 772534, -546848, -622862, -682532, -9387, 962860, 337176, 447309, -960177, 954581, 859068, 49864, -896193, 93634, -343803, -827800, -953295, -213268, -470844, -713048, -191372, 98484, -127598, -956606, 246058, 313295, -416577, -183685, -717746, -433222, -288807, -908840, 394442, -154634, 572480, 639547, 413499, -612856, -688957, -388191, 830286, 938011};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques86(){
        Integer[] array = {-677706, -650387, -64657, -267575, 906418, 312366, -265040, 630166, 17644, 214274, -100116, -381367, -63915, 601564, -820052, -471171, 232952, 28135, 169720, 818561, 889629, -604814, -613420, -842040, -103664, -116732, 772379, 876036, -365595, -231139, 696550, -332173, -201129, -11454, 910803, 32624, -895745, -392567, 188479, 451722, 139784, -373574, 66040, 229232, 347119, 128672, 928498, 217267, -537987, -566658, -632337, 888827, 456895, 667120, -37474, -250531, 33996, 586009, -500727, -772358, 451809, 994043, -414845, -697748, 989740, 93030, 564672, -212275, -808351, -983088, -773129, -179429, 787670, -182389, 617989, 791222, -937755, 118211, 353677, -587172, -433886, 118156, -67175, 511167, -17785, 20123, 793899, -85331, -653764, -388028, 70478, 370521, 10807, 968446, 54451, -579108, -537066, 143745, -625375, -961033};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques87(){
        Integer[] array = {-246602, -353128, -68216, -651734, 309211, -503672, 526917, 727701, 388190, 997079, -394264, 262649, -453399, -438591, -858384, 8279, 78675, 177006, 509524, 658255, -969351, -326185, -858521, 725481, -699762, 38635, -159456, -962006, -751414, 141458, -468099, -931421, 306428, -609677, -43605, -158598, -94034, 881531, -816654, -777281, 747864, -720031, -951366, 304092, -831572, -51013, 388550, -570743, 264593, -499230, -667636, -798702, 228277, -123207, -154397, -995064, 9469, -476518, 569497, 668912, -614790, 504318, 963266, -662785, -629824, 892834, 791708, -238860, 105244, 783499, -224900, 923309, 685739, 249780, -151945, 370368, 203054, 830293, 171530, 770014, 767748, -830105, -453164, 49506, 685015, -970623, -36918, -189464, 638456, -493003, -847835, -44452, 998750, 18126, -36089, -942860, 258600, 380516, -289480, 541373};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques88(){
        Integer[] array = {-434338, 648119, 370703, 459487, 666538, -665301, -255306, -104667, -867150, -769144, -142257, 140179, -748825, -592325, -111428, 542028, 964854, 426398, -896307, -783037, 967242, -988489, 279702, -370820, 930678, -657541, -931708, 851162, 290880, -379092, 757395, 250964, 387694, 262974, 739549, -106184, 603762, 90189, -48191, -263939, -778466, -948118, 433282, 825023, 520566, 866795, 870095, -360644, -872452, 295237, -19014, 992316, 318007, 551046, 653141, -581128, -442848, -658661, -188591, -726061, 663894, 504746, 348947, 184609, 832930, -259105, -626958, 496171, 432036, 524686, 320748, -556411, 752851, 893831, 224618, 815644, 614907, -154775, -452636, 861172, 590231, -136713, -368806, 79482, 488500, 127603, 609292, 372471, -474425, 285324, -805371, -218416, 656597, 144961, 750721, -830351, -891877, -723910, -117452, 129115};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques89(){
        Integer[] array = {500447, 484437, -438160, 418200, 889100, -623768, -625481, 680325, 648748, -671639, 392076, -478386, 792145, 909258, -437184, -956142, -584795, -312586, 286310, -837734, 260514, 705984, 255962, -940946, 238384, -46809, 695251, -686247, -259236, -585713, -384700, 650081, -184897, 264795, -769606, -742066, -928425, 165128, 464373, 783716, 316026, -967632, 343221, -350561, -823129, 884381, -87811, -799151, -88398, -973141, 15089, -164039, -428189, -714759, -46927, -196283, -923122, 436886, -750080, 265323, -210748, -899697, 641521, 65944, 969836, -167424, 307889, 432662, 413187, 985047, -497916, -113303, -263489, 296582, -550200, -941986, -412386, 269384, 696346, -296180, -769779, -242278, 758601, 811079, 193002, 712475, 135589, 723486, -827168, -24020, -523831, 117567, -232732, -10469, -573582, -243755, -779608, 452139, 405591, 156509};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques90(){
        Integer[] array = {-926450, -592186, 750844, 27955, -312126, 749189, 292662, 888038, 665995, 557617, -761174, -307565, -97584, -783056, -949934, -912917, -959752, 611721, 962468, 58315, 523680, 771218, 629584, -949829, -79501, -309996, -874941, 699741, -707789, 421648, -970609, -90389, -572494, -797426, 773001, -166242, 76142, 177560, 42802, 92228, -928756, -201118, 581712, -562395, 485125, 694443, -339527, -172787, -144964, 503926, -985109, -11739, 330483, -923140, 172392, -185515, -195562, 936796, -754667, -759939, 85801, 50461, 481602, -295717, -166473, 137775, 561332, 250214, -217607, 273274, 743230, 739790, 838676, 953771, 914753, -587948, 403113, 319346, -252063, 748129, -873940, -290271, 688269, -620711, -835314, 344962, 599366, -475511, -47706, 322164, 963770, -553160, 378435, -495216, 528179, 743349, 238468, -161461, 812358, 715344};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques91(){
        Integer[] array = {764029, 191661, -853501, 450063, 418486, 29265, 873109, 161401, 523362, 709175, 18901, 892162, 992146, -545890, 436384, 115249, 227648, -688263, 202566, -102215, 585808, 24099, -48241, 991458, -85736, -300457, 280248, -183092, -783512, 128035, 104151, 137977, 210519, -794529, 788485, -170334, -419794, 614607, -912454, 966556, 710311, 939034, 160996, -448316, -5574, 258204, -337381, 600783, 822538, 379933, -695977, 508717, 568994, 765196, 226167, 986767, 870477, 426202, 479166, -784580, -740367, 383874, -855043, -2965, 622559, -238537, 741428, -591167, 344879, -282046, 811271, -127359, 527107, 424496, 573907, -865747, -47927, -526844, 120260, 401701, 33288, 898914, 580316, -13554, -340302, 358523, 223169, 620087, -444447, 797171, -527691, 146389, 807678, -821979, 522331, 248573, -98350, 684768, 476934, 858842};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques92(){
        Integer[] array = {-740409, -309186, -546431, 857182, 759834, -390942, 481166, -287341, 153800, 304576, 328945, 945852, 399643, -807400, -58448, 10331, 886625, 248447, -985073, 831730, -588372, 795209, 20982, -348718, -81889, 633832, -896228, 2566, -585797, 865236, -35424, 830588, 783778, -12581, -308236, -17983, -757147, -635373, -914691, -128288, 635048, -937500, -49951, 642709, 317233, -516348, 834920, -24623, -286195, -961703, -981108, 432329, 942168, -17362, -927285, 681793, -567428, 434496, 565585, 210176, -798392, 4908, -966404, -932416, -460946, 108764, 161864, -978008, -854984, -784924, -160042, 332522, 766623, 85103, -888635, 569661, 750071, 838370, -5979, 83812, 930817, -870860, 602774, 383900, -575749, -54173, 85245, -867229, -985691, 783068, 864525, 827143, -408252, 433944, -858495, -598064, 476675, -387570, -688074, 658129};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques93(){
        Integer[] array = {916527, -306469, -777118, -657084, -613846, -164835, -844981, -644670, -167682, 712843, 633769, 345393, -209569, -201885, -991010, 594248, 412045, -10328, 771018, -532985, 700952, -398175, -672422, 230583, -456745, 203638, 699362, 789762, -519585, 524144, -484048, -127901, 354761, 498316, -432330, -876811, -949496, -290868, 924672, -556653, 532832, -61419, 121516, 767977, 963819, 626742, -224311, 802588, -795943, 697298, -7912, -39259, -839167, -806262, -678911, -733259, -454090, -403425, -603865, -163861, 645944, 31488, 587067, -270492, 301609, -920590, -745300, 469571, -698638, -511351, -774350, 679746, -422936, 311190, -238337, -102043, 348163, -258178, 410858, 749285, -722155, 669867, 614188, -893760, -750763, 715054, 649161, -36281, 581324, -575737, -365721, 788126, -555241, -296125, -753740, 950435, 567173, -367134, 26275, -976058};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques94(){
        Integer[] array = {-182938, -40530, 480792, 817794, 158641, -270746, -665947, 801172, -115370, -438522, 931551, -894047, 927389, -593702, 420139, 777983, 991565, -596214, 33067, -293218, -919820, 533477, -571186, 288863, -402910, -636852, 920162, -354744, -480879, 765410, -387087, -543800, 529416, 395724, 766751, 154904, 42000, -514690, 605614, -409620, -426084, 434190, -931031, -259934, 490872, 834743, -962074, 948226, -563459, 300470, -662658, 465308, 462692, -558479, 426403, 280595, 380659, -430043, 735315, 353701, -262933, -968054, 847741, 445757, -833907, 460527, -222271, -584163, 926364, -567737, 502629, -739611, 406600, -846872, -507262, -55400, 293212, -873820, 319329, -504484, -395951, -574418, 58785, -318275, -599121, 824413, -40691, 833842, 445469, -581390, 470844, 289074, 184816, -350291, 590401, -455535, 576969, 716658, -567511, 263010};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques95(){
        Integer[] array = {950590, -54656, 29632, -954112, 929977, -978421, 394615, 484793, 94144, 537125, 848743, -285770, -69395, 49154, -601968, 736949, -930329, 511309, 250340, -661205, 509552, 402093, -418344, 994958, -96214, 611948, 638736, -406137, 408325, -162864, -975347, 740136, -269034, -75016, 796850, -957103, -69868, 589816, -57681, -465430, 605196, 381019, -446700, -800762, 578433, -434242, -432030, -730885, -109588, 211156, 314809, 216448, 249376, -677737, -831187, 21540, 84589, 248435, 413021, -258342, -830806, 758876, -873719, -380319, -290589, -899272, -709743, 376091, -279900, -263457, -816509, -145501, 287454, -10918, -622408, 755581, -245408, 517413, -794866, 487138, -148334, 710938, -503070, -696510, -635726, 647606, -317089, 447232, -476093, -715913, 189861, 947164, 948866, -86810, -279150, 480876, 403923, -38418, -950638, 369999};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques96(){
        Integer[] array = {-243676, 995603, -233465, -680710, -994033, -381810, -166958, 666790, -195224, 554118, -580323, 17143, 832050, -114807, 268858, -974617, -880673, 171966, 336520, 159175, 220551, -358401, -676383, 543879, -266067, 688068, -527832, 842725, -836635, -87414, -60422, -486828, 748259, 518641, 303099, -337601, 859056, 515622, -648805, -287668, 699466, 853506, -365804, -958866, 991729, 726308, 436464, -276017, 728491, -111862, 400255, 240728, 84642, 551363, -124582, -544392, 532862, 861443, 163628, -581194, 639554, -19968, -322333, -615486, -94217, 656502, -865220, 556252, 264431, -421066, 253734, 186753, 33565, 618545, -242764, -731850, 198533, -807589, 836450, -79014, 263496, -48393, 674222, -678030, -249095, -940913, -708202, -415833, -607693, -648865, -65686, 423370, -167452, 677555, -388786, -671342, 824065, 37612, -823826, 573614};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques97(){
        Integer[] array = {-787164, -720848, -950423, 689212, 849800, -306941, -585072, -59904, 46848, -23421, 996628, -721037, 171301, 460247, -116571, -483862, 821722, -376715, 855046, 585447, 9367, -658674, 105910, -328871, -682668, 829334, 777631, 670297, -621296, 31640, 472368, 508662, -426975, -865208, -733208, 142686, -489063, -745628, -690015, -750332, 851440, 647826, 253038, -774774, -17312, -635577, 996585, 490429, -666689, 764286, 959361, 776883, -251137, 844526, -747543, -436140, -931924, 379011, 987418, 11637, -430436, 337507, 718365, -777318, 538904, 169025, -6750, -291884, 257618, -850078, -649877, 590302, 824835, -78035, 902099, -95440, -340359, -547701, 55389, -584107, -501901, 646189, 727385, 297232, -556874, 498533, -976508, 631401, -552266, -178230, -704003, 809227, 881740, -637411, -26335, 641000, -209562, -179535, 694710, 417065};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques98(){
        Integer[] array = {-518026, -385734, -153164, 769400, 15627, -539244, 399131, -206237, 870183, -74064, -909600, -859081, -12030, -53275, 104010, -816446, 877516, 277611, -108896, 647920, -955774, 686804, 548299, -179022, -62060, -657097, 978520, 200779, 29953, 144639, -539385, 26224, -286765, -501732, 991508, -561156, -257344, -524002, -196458, 538659, -318153, -549344, -987910, -573615, -462119, -232025, -159497, -821898, -787162, 823856, -475675, 559707, 278519, -623805, 542943, 224318, 497175, 323740, -300050, -116792, -80568, -362566, -286606, 213246, -529327, -372722, -175626, 471414, 721142, 100163, -898690, 101531, 237987, 764625, 335337, -897656, -722359, -724594, 42578, -634230, -655255, -865967, -73812, 21257, 888782, -543692, 205892, -85099, 840876, 99776, -477282, -705977, -545496, -68189, -629422, 969178, 399519, 641734, -624305, 953063};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques99(){
        Integer[] array = {-327185, -660977, 391676, -136679, 5115, 749661, -431503, -455866, -739969, -948414, 488176, 171144, -829706, -118189, -148953, 942797, 458014, 117194, -803019, -376043, 14594, -290735, 229667, 179211, 638244, 8997, 87670, -244014, -576872, -953888, 256779, 483152, 951398, 278449, -285668, 642025, 960883, -279782, 794506, -443042, -635664, -499355, 889386, 254519, -267698, -804439, 6791, 435943, -135287, -978490, 463520, 110503, -539025, -242954, -490201, 809596, 692569, 425586, 143624, 183119, -884328, -811886, -248866, 862288, 318806, -48137, 86217, -773128, -618753, 706224, -396036, 887323, 58411, 694627, -792782, 232801, -281824, 828277, 130084, -350223, 281927, -939291, 910162, -314421, 895907, 374951, -185530, 299743, -403705, 892106, 642184, -507075, -998122, -75171, 796108, 192104, 956858, -565634, 522844, -257229};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques100(){
        Integer[] array = {761277, 419324, -473504, 306532, -474549, -575928, -983153, -255232, 535647, 629281, -911433, 479144, 983399, -189734, -461316, -159613, 180510, 59144, -41123, -378257, 276130, -744506, 497919, -982520, 341134, -909862, -104125, 859580, -13779, -92102, 642591, 26187, -246914, 164733, 176656, 909157, 667770, 890700, 544828, -792431, -776722, 26275, 258884, -953593, 871100, -802409, -781242, 173310, 934072, -85896, 938207, -946489, 899018, -356812, 847162, 968181, -799511, 568144, 794226, 257961, -220097, -871814, -182870, 346594, -956002, 435833, 348838, 611216, -103565, 424027, 245119, -18858, 260772, 467716, -71325, 325406, -481392, -169377, -71654, 367394, -487297, 483049, 811845, -278825, 45806, -776097, -572005, -504043, 766373, -454313, -112322, 899445, -996162, -632810, -889991, -116885, 846698, -603913, -26891, 313580};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques101(){
        Integer[] array = {-548013, -63002, 444726, -695531, 470746, -900553, -601027, -370121, 824024, 466839, -503496, 810405, 353140, -559943, 426004, 760025, 680746, -348117, -433434, 724520, -38623, 870968, -915834, -663691, 424448, 374161, 955540, -820149, -505439, -112435, 690303, 803472, -830599, 788827, -187782, -668732, 738290, -264792, 275628, -501076, -62518, 395765, -889918, -43524, 131971, -218363, -442918, 787915, -252311, 328929, -917071, -146792, 54061, 474303, -718933, 320425, -994889, 568988, 501992, -835216, -915538, 825398, 557589, -189724, 158192, 94826, 239999, 877015, 652442, 432567, 123030, 786270, 379580, 231514, 964183, 485767, -111563, 264414, -895529, 911152, -470194, -684911, 479664, 620022, -837988, -328295, -481695, 190277, 863943, 919806, 811531, 454336, 323891, 342828, 205336, -693110, -539484, -684996, -744969, 396433};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques102(){
        Integer[] array = {29912, 143965, -384663, 370428, 885296, -367241, -939887, -734413, -553109, 937862, -390696, 489522, -725548, 69356, -158419, -214871, 187473, -693817, -717833, -96225, -671667, -429711, 238539, -882776, -477473, -678183, 662195, -390070, 632576, -859678, 286791, 368523, 774334, 37605, -155138, 744534, 917505, -44445, 713369, -672756, 528313, -773362, 119948, 475776, 870057, 310926, -468704, 764623, -911877, -397327, -43493, 714606, -276206, -985385, 723554, -391457, -513687, -698471, -934318, -985022, 663765, 438847, 620080, 419890, -690615, 104615, -422225, 38733, -621490, 715658, 75429, -27289, -26474, -249141, -595385, 684946, -444538, -463821, 584423, -880026, 373524, 825290, 824577, -67156, -779317, 390119, -861082, 747364, 405955, 905240, -924341, -465576, 618975, -817651, 695239, -387315, -631257, 31091, 424798, -405430};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques103(){
        Integer[] array = {-255073, 403463, 85869, 563079, 854984, 462035, 295155, 145655, 458485, -664430, 109624, -185707, 241722, 27404, 12793, -626924, 456038, -80720, -204576, -503275, -547085, 946226, 422692, 850794, -795617, -918744, -488123, 298719, -386103, -455511, 460306, -509606, -487901, 356519, 691775, -523027, -494232, -411363, 190076, 93748, -850405, 433024, 715176, -818604, 828392, 262033, 951493, 711437, -243564, -746776, -774569, 613538, 368718, -628750, 630382, -935727, 289048, -522588, 550891, -177385, 594972, -994191, 167003, -268530, -621974, 904681, 135181, -891968, -11589, 523285, 852266, -372597, -701544, 5640, -381336, -414160, 394788, 90914, -840575, -823073, -940345, 857546, 483789, 736981, -867863, 240276, 981093, 852871, 235114, -136751, 904342, -85402, -674130, -475272, 436842, -84467, -744868, -375199, -608596, 298039};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques104(){
        Integer[] array = {-251663, 509473, -503902, 986234, 364522, -929267, 602100, 630934, -248148, -610132, -820312, 949421, -462636, 991020, -82237, 527657, 706818, 193200, 497222, -74903, 610559, -497946, -236944, 787898, 485788, -85419, 362659, 768445, -63177, -509893, 319963, -179476, 632805, 688719, -128265, -863484, -799326, 136018, 722606, -282939, -954315, -697982, 958698, 995112, -275136, 451633, -229223, -298690, -290530, -889343, 847293, -125096, 317659, 249409, -308475, 851101, 767990, -629725, 640495, 362611, -683511, 344914, 492696, -76994, -119423, 937109, 454205, -666816, 614208, -187268, -606650, 800309, 984119, 352896, -706051, 935613, -148450, -647098, -907089, 433024, 716136, -680621, -848309, -120923, -600812, -522573, 58297, -578018, -492742, 344537, 951362, 700196, 397821, 820977, 525954, 134392, -845161, 849853, 927490, -140782};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques105(){
        Integer[] array = {-660755, 917644, 651668, 131163, 590052, -82961, 575789, 19303, -440453, -906422, 123671, -549340, 194900, 21718, 763779, 15804, -407335, 790753, 210276, -219178, -504155, 332899, -954614, 257977, 526382, 703546, 438730, 957240, -879870, -494228, 812954, -475787, -423183, 950070, 886918, 635180, 404134, 525266, 887062, 73107, -259992, 379621, 574093, 714774, -104636, 325801, 944088, -244115, 835489, 68616, -159116, -860472, -145872, 784627, -240581, -132906, -240670, -544893, -708527, 435333, -971234, 706870, 153550, -185042, 366680, 494289, 215072, -513769, -654638, 79652, -711109, -753654, 856155, -188146, -961651, -563701, 246026, -462729, -964097, 498908, 164934, -855277, -865553, -351358, -928401, 355371, 202605, -461469, -591785, -194361, -635705, -736155, 179096, 196097, -242794, 437504, -911566, -442709, -117803, 426814};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques106(){
        Integer[] array = {-171450, -14012, 86840, 462547, -893673, -153162, -66505, 954983, -556665, -711462, 874463, -599661, -747521, -290669, 736047, -734185, -725901, 728716, -506443, -830809, -746429, -450271, 556652, 261524, 787942, 292161, 2765, 949653, -297463, 308872, -736422, -161917, -17418, 686521, 106847, 978123, 978064, -606104, 142783, 930362, 11799, 449711, -944047, -172476, -23856, -487323, 720689, -813553, -814887, -465181, -539759, -630611, 36892, -152599, 218236, 486426, -135822, -136422, -598100, -181063, 785196, -371117, 313582, 82594, -861127, 303299, 300271, -853449, -612692, 55265, 263491, -252405, -929610, -52529, -582925, 856546, -954040, -770597, -723317, 478241, 713725, -867673, -750375, 567808, -627342, -532166, -759847, -868577, -129236, 114648, -523314, 87190, -826370, 541766, 31128, -26769, -116705, -840576, 943691, -504689};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques107(){
        Integer[] array = {608851, -61629, 763932, 180742, -703049, 342240, -677252, 685388, 444673, 757535, 536113, 723775, 413653, 659422, -772954, -731157, -496939, 42051, -340367, -65178, 64065, -277176, -61100, 913524, -301998, -672797, 337111, 916516, 325262, 838060, -299723, -858739, -806896, -475390, 572240, -851087, 458999, 266227, 546185, 468676, -585918, -59392, -945103, -380966, 771122, 32195, -455020, 137867, -808807, 148821, -717581, 211995, 772006, -511329, -91049, -411489, -786677, -474819, -55739, -646745, -520877, -60473, -561738, 206201, -802582, 502881, 775665, 408283, -109899, -574157, -823133, -106775, -23043, 583079, 906144, 267133, -191454, -709046, 144151, 430988, 981709, 53193, 417671, -590601, -253895, 226155, -671114, 883139, -696167, 743653, -790684, -347951, -697447, -736569, -346640, 243920, -161228, 360974, 411975, -786866};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques108(){
        Integer[] array = {877855, -882667, -121685, -654629, -159536, -197824, 552018, 979503, 730636, -276576, -268867, 367017, 853143, 146397, -103059, -967340, -228912, 332200, 641693, 217372, -430154, 905444, -337795, 284268, 289962, -413569, -593369, 502580, 321667, 833043, 900014, -433454, 651281, 349117, -505563, 387195, 323318, 814262, -236529, -439967, -871086, 818398, 74417, -180822, 626367, -703684, 796251, 526659, -661462, 708400, 85859, 551885, 631198, 104047, -999211, 709180, -95820, -602731, 455085, 293039, 487126, 399116, 662207, -589098, 259186, 196681, 679429, 138477, 51314, -641271, 336608, -317679, -616659, -171198, -486430, 688100, 938357, 765489, 46943, 945030, 969528, -944899, 477269, -649617, -148494, -742284, -804800, -598543, 605691, -118202, 303557, 167866, 893036, -488751, -157341, -679803, -396865, -185807, -91041, -58662};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques109(){
        Integer[] array = {-502188, 84120, 273074, -256303, 167643, 832879, 496632, -361399, -752757, 375932, 853139, 12092, 846356, -83834, 760517, -725389, -532331, -84535, 673462, 651783, 172240, -485483, -528981, 353134, 471659, 826780, 49548, 713468, -576143, 463268, 186320, 649363, 197454, 463546, 990762, -712183, 703292, 449262, 236649, 290817, -945427, -385377, -165388, 386200, -90926, -654118, -608128, -498668, 186572, 709049, -50083, -963035, -962001, 898871, 213363, 108894, 389232, -651587, -325673, -800120, -63743, 952427, 190469, 418869, -494776, -119968, -505301, 27307, -762120, -790371, 40115, -431088, 107878, 437434, -704396, 270275, -58094, -31358, 526193, 846872, 619250, -463405, -256615, 545750, 825069, -442058, 92369, -883636, -729049, -150112, 928503, 612124, 803922, 353028, -355510, 945528, 26075, 46971, 356474, -5771};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques110(){
        Integer[] array = {476996, -583380, -497277, -350008, 190592, -15548, 987312, -624573, 617459, -513163, 623896, -109776, 366887, 886750, 412182, 132259, -297828, 862413, 772897, 20075, 971599, 240791, -868388, -649766, -583432, 41380, 562684, -92940, -27176, -552762, 285365, -149227, 563905, -786002, -919469, -729155, -280224, -773416, -400857, -411638, -594943, 984784, 7908, -26283, -336918, 78199, 484680, -138013, -949872, 896760, -491169, -942478, 822029, -178572, 78926, -352559, 862027, 752698, 124985, -748639, -195871, -332225, -366935, 827839, 575085, 818594, 432982, 677782, 779300, -130859, -372796, -786115, -290050, -848323, -155951, -542515, 63068, -770934, -239687, 907580, 335850, -488511, 975248, 573649, -389383, -322449, 53563, 234965, 890433, 185723, -976775, -459078, 740306, -71809, -453953, 9750, 608837, 595665, -67509, 226731};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques111(){
        Integer[] array = {915438, 468445, -697838, -440549, 716465, -330577, -758483, 119829, 549331, -934421, -294147, -437424, -677619, -535099, 264825, -154393, -655167, -979117, 417544, -846268, -144306, 931790, 613607, -861880, 412977, 705267, -546683, 715737, 912859, 350124, 671257, -902325, -869391, -902243, 647269, 196854, -396144, -327548, 444075, 950438, -122164, -934488, 60087, 442543, 265984, -186321, 215946, 35245, -410298, -157294, -871551, -603721, 877336, -723374, -835112, -697437, 868597, -461207, -666840, 367331, 494988, 695830, 666229, -909360, 401063, 734209, -447885, -101432, 223926, -230323, -475801, -877298, -993395, -179064, 610682, -768538, -25451, 927417, 592201, -472882, 70031, 76282, -568115, 781751, 563542, -746709, 790487, 917028, -758216, -42674, -734332, 725887, -675326, 246812, -62417, 670598, 238924, -381155, 199581, 700145};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques112(){
        Integer[] array = {448028, 52491, 261135, 344147, -853114, -596682, 42209, -255626, -756850, -100396, -435839, 263605, -934604, 239491, -251379, -282071, -631468, 243170, -258969, 582804, 188047, 518843, 993304, 364282, 213713, 445379, 649691, 185835, -783534, -872840, 478075, 754543, 428336, -644197, 9663, 841158, -481908, -488945, 753551, -42212, -65292, 566445, 422134, 893402, 398799, -761768, -170495, -13155, -274139, 795375, 938508, -175696, -634684, 831259, -451946, 870348, -928690, 722185, -719454, -616521, 316026, -135149, -663854, -163000, -490157, -268736, -475519, -658576, -987164, -234349, -679134, 870101, 29615, -960362, 269748, -814252, 613242, 798651, -205161, -771202, 99641, 372035, -426788, -343975, -708375, -640932, 507354, -969112, 753530, -470846, -359773, -382467, -229865, 437081, 210989, 425346, 288598, 762719, 491793, -692365};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques113(){
        Integer[] array = {-561352, 216901, -16281, -546363, 372187, 283178, 93267, -263255, -720955, 220317, -919931, 985591, -417880, -75854, 663084, -466681, -8408, -242625, 764292, 612157, -114457, -453140, 353448, -742194, -761707, 744993, -260207, 852908, -813625, 799748, 996166, -782373, 188618, 822256, -556792, -430268, -361098, -651063, 809973, 866096, -68309, -268393, 485161, 685282, -532806, 35987, -840079, -290652, -398290, -29154, -200721, -299307, 521835, -274720, -203511, 761721, 743626, 355220, 877874, -693573, -694107, -53227, -823033, -704631, -226130, 250537, 482535, -767877, -304516, 936651, -21221, -140372, 14839, 489619, -190505, -743976, 312428, -174586, -357725, 527259, 837306, -973814, -796470, 211263, 929356, 58113, -400, 861590, -866472, -650766, 941064, 975777, -866062, -889912, -37638, 212339, 637857, -957707, 329410, 548700};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques114(){
        Integer[] array = {-389577, -927397, -560129, -3839, 348140, 11536, 147378, -852602, -594677, 821154, -309712, -195149, 171232, 76269, -223191, -161448, -715488, -940114, 983221, 56337, 735126, 142122, 918477, -511174, -389591, 424808, 318818, -791808, -543882, 810228, 762414, 760626, 315986, -702638, -266319, -38083, -885890, -961402, 482550, 709589, -202205, -294616, 833856, -813373, -320435, -957023, 876803, -469539, -453462, -167669, -689532, 826701, -775184, -117405, -966535, -20737, 998941, -951144, 532884, 370677, -907077, 903028, -802809, -685971, 744667, -396946, 623404, 699307, -732611, 6891, 479362, -479901, -746821, -26393, -111914, 496624, -590237, -277382, -326110, 892455, -448539, -644744, -82642, -814311, -912727, -945891, 135410, 4095, 706097, -230904, 933778, 971133, -268752, -275683, 929778, 603785, -34084, -39509, -879641, -118635};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques115(){
        Integer[] array = {-273050, 149119, -120081, -263504, -55039, -286625, 64614, -479663, 294021, -513452, 541464, -460261, 228388, 942870, 504445, -350050, 762199, -262701, -481068, 152757, 494118, -657872, -974700, -179005, -138128, -706608, 913133, 385116, -484045, 860420, 866502, -576001, -399441, 732283, 845681, -957134, -795215, -573594, -492579, -604957, 482763, -709678, 462485, -149357, 303102, -752524, 324120, -540499, -655191, -321439, 471864, -125569, -243439, -180308, 139131, -432160, 466300, 695804, -836422, 612500, 424696, -737876, 619569, -435522, -702349, 408907, 82466, -223869, 975749, 595065, 290831, -864649, -168513, 86715, 192667, -749263, 697663, 527015, 359703, -761616, 425239, -542698, -42640, 571412, 278, -199751, -62476, -809811, 245434, -114388, 449837, -214552, -409142, 987575, 636951, -529293, -314955, -37936, -264144, -426133};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques116(){
        Integer[] array = {-622503, 343005, -484735, -640128, -562792, -937514, 495245, -266579, -133212, 443441, 791488, -684904, -104864, 676830, -951631, -704890, -981812, -300838, -930855, 185459, -186201, 146575, 205687, -470624, -126450, 493426, -763860, -828797, 129142, -336525, -593006, -545095, -282034, 48823, -645110, 513313, 109535, -213178, 415562, -607367, 938279, -979996, -694753, 364784, -803133, 141072, 438031, 427553, 778004, -497346, 948960, -447277, 937423, -288609, 252106, 769777, -900045, -623618, -297147, -813887, 410010, -601047, 138943, 383996, -731523, 367806, -377010, 566916, 279634, -426835, -840005, -451388, -979673, 96313, -611122, 818451, 900139, -934322, -291224, 665784, -120970, 142203, 778764, 579928, -224342, -515057, -88225, -91923, 459166, 229349, 162242, 814072, 928417, -522620, -891086, -64876, -166808, 20484, 23471, 355878};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques117(){
        Integer[] array = {170310, 231122, 719798, 399251, 435733, 687971, 184134, -612101, 570922, 172017, 596171, -607289, -344097, -114156, 157569, -130381, 610359, 44037, -814468, 820885, -340251, -284915, -749194, -32259, -906375, -885058, 405593, 205658, -405618, -937210, 217953, 69844, -656079, 453846, 513122, 964193, 893025, -774954, -354878, -25620, -307173, 159889, 432267, 59875, -988581, -452235, 262523, 80901, -987937, -373735, 805036, 633961, -825087, 433106, -237156, -819258, 95759, -146622, 438197, -521511, -939992, 656233, 17953, -322445, 440701, 905974, 172901, 280504, -193999, 445452, 169622, -570401, 2750, -357454, -939969, -569834, -520187, -116181, 218598, 426091, 236971, 654592, 804022, -401216, -946422, -431850, 654976, 399859, 230804, -539077, -430477, -669439, 538386, -432842, -202119, 154116, 831882, -55326, 798966, 758225};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques118(){
        Integer[] array = {836686, 141583, 592655, -824981, 16897, 388438, -908227, 262790, -508446, -191503, -304320, 465588, -229605, 596651, 496067, 490942, -206483, 820753, -286465, -843119, 688860, 36233, 342317, 719433, -341902, -117761, 929406, 663577, -46221, -430360, 537628, 183491, -424528, 345286, 945781, 745459, -146644, -470337, -664691, 59080, 71178, -944720, -899370, -750519, -592232, -343325, -934688, 411144, -339003, 963451, 509360, 464684, -941710, -130126, -134373, -248286, -23875, 287639, 66509, -713728, -854781, 767499, -744365, -477980, -939996, -211944, 707335, -582058, -139662, -67793, 845327, 966875, -55760, 36693, 799618, 214791, 117632, 192455, -951003, -848295, -291024, -667387, -864046, -84186, -344325, 36424, 328591, -886726, 82209, 14871, -918961, -13654, -803065, 276898, 410711, 557041, -15105, -145370, 623732, 769846};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques119(){
        Integer[] array = {-586428, -7957, -442737, -495958, -862619, 591630, -560330, 770234, 733244, 16571, 39986, -847968, 228699, 647276, -481399, -695689, -776955, -261242, 755801, -744422, -341599, 858517, -381279, 518288, -836670, 823053, -127315, 203591, -144109, 256793, 567939, 843178, 97638, -704556, 197621, -556448, -910673, 295720, -538140, -906777, -642377, 600094, 139193, -131275, -741073, 92392, -481191, -990677, 326375, 307239, -153262, 746783, 240192, 577733, 638860, 868796, 291755, 76513, -623868, 901652, -926504, 512717, 961457, 62936, -811381, 400655, -855728, -758478, -711540, -88862, 714538, 732095, -696211, -947398, 937630, 285528, 146887, 35017, 900175, -436438, -721511, -162856, -104358, 764109, -443876, 368518, -399215, 526094, 123102, 130283, 605277, 293310, -75804, -876371, 568777, -989748, 979822, 245913, -316841, 87194};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques120(){
        Integer[] array = {-910229, -147425, 699415, 995444, -145567, -824660, -934145, 722963, 345301, -140913, -961234, -815687, 7548, -265109, -776645, 955868, -437657, -749869, -244584, 312867, -545286, -961961, -203725, 46548, 423413, 593476, 679380, -456841, -231958, -333948, 294737, 594710, 795083, 725899, 92250, 525465, 651998, -35162, -758009, 201795, -745020, -190313, 226243, 827163, 940043, -935621, -326012, -438085, 971720, -574120, -49895, 319576, 761312, -106611, -783218, 611460, -504894, 781433, -752071, -411251, 538693, -189374, 674714, -519373, -740212, 342592, 515882, -899160, 496900, -453122, -901178, -615573, -958414, 467557, -47690, 731083, -410379, -509203, 783333, -976635, 146394, -16284, 379373, -692951, 208520, -784886, -622931, -393603, 350058, 377943, -606239, -824566, 953633, 929162, -159779, -641586, -653328, 904500, -146319, -293852};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques121(){
        Integer[] array = {45143, 634772, -891655, -164450, 781148, 201121, -569314, 270518, 399138, -490492, 728116, -445684, -268723, -997586, -73841, -740280, 931615, -58265, -554107, 772803, -656376, -571545, -735453, 491405, 834995, -425226, -57520, 773222, -444209, 90055, 751046, -936298, 911047, -992615, 511323, 706723, 103325, 123662, -882204, 62123, -959198, -533080, 689078, 558782, 2757, 886498, -9565, 776081, -635520, 896897, 96570, -497390, 482309, -348280, 634423, 585733, -91243, 150664, 35429, 329686, -132850, -606976, 273012, -461738, 862644, -274627, -868007, 238113, -718512, -601546, -536112, 817563, 691436, 673825, 522477, 262690, -291634, -437524, 410886, -715761, -107401, -948570, -525104, 549993, -549286, 820134, -923607, 554028, -208212, -26946, 158364, 980315, 420345, 547123, -535531, 901032, -663221, -874799, -666237, -439801};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques122(){
        Integer[] array = {755456, -370052, 907392, 952748, 30073, 655862, -757279, -407673, -995732, -3924, -420692, -268736, 483095, -290070, -678193, -43892, -800284, 653229, 603758, -238879, 750865, -356623, 796214, -868564, 922484, -487149, 597424, 396059, 724012, -564274, -268639, -729521, 939357, 645227, -127598, 156677, -872071, -194628, -185949, 160651, 719427, 885287, 484218, -20741, -549925, -721757, 645522, 827007, 140476, -612219, 977491, -17094, 510488, -87093, 62610, -512525, 474182, 581519, 256587, -351988, -842431, -115598, -900571, -899284, 276824, -375828, -542720, 837963, -781549, 167391, 347076, -596240, -895425, -196358, 70744, 253351, -976790, 656800, -891254, -365459, 661018, -797803, -176556, 638135, -841087, -447219, 96405, 902064, -875112, -607774, 3185, 913782, -632179, 126931, -900098, 41377, -812324, -280875, 156355, 782350};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques123(){
        Integer[] array = {711396, 731074, 476477, 79003, 346132, -170551, -726645, -229952, -178292, -435271, 248160, 415396, 598728, -729520, 376896, 182289, 766702, 236375, -320401, -197835, 981557, -391064, -996777, -661698, 377864, -887594, 179896, -256483, -18367, 62543, -111313, 936033, 435116, 305921, 560770, 8075, -444123, 983727, -515165, 515756, 293437, -534847, 147979, -406534, -788543, 106174, 58747, 785133, -828480, -763292, -751232, -912026, -294668, 18081, -384936, 667213, -399954, 582703, 250982, 390817, 781808, 246194, 510461, 812881, 431240, 352445, 559379, -772279, -340736, 990384, 636067, -753542, 518002, 753267, -11414, 18285, 32193, -209785, -811584, 549158, -72850, -239949, -973112, -880241, -737732, 142474, 160429, 581093, -866995, 674400, -475847, 143030, 19173, 922275, -906818, -884366, -622090, -83015, 90112, 902204};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques124(){
        Integer[] array = {771624, -365921, 744664, -129431, 878894, 392842, -7268, 384020, 99264, -407814, 888387, 174235, 74880, -736753, -321240, -752656, 586049, -810515, 777800, 512670, 386825, -279903, 155360, 992411, -441631, -339216, -603541, -165258, 809644, -946350, 207322, -854348, 959284, 2637, 521805, -777002, -44523, 112139, -343967, 574085, -470793, -308410, 960652, 114079, 560711, -945197, 473847, 918178, -637253, 967287, 755793, -228333, -958736, -796607, -978018, 114977, -205153, -757735, 835998, -827026, -583764, -18430, 118297, 597078, 160232, 507112, 868756, -291790, 938622, 202879, -285805, 535589, -394267, 10189, 75628, 762070, 633153, -207666, -506671, -321273, -809292, -140214, 188015, 282264, -130757, -389016, 810462, 600388, -290654, 472772, 910111, -734846, -877796, -43246, -145519, 79986, -207784, -948852, 275771, 923528};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques125(){
        Integer[] array = {779846, -400877, 4233, -452230, -877113, -769754, 540430, 29923, -675320, 788366, -893477, -694684, 627409, 32830, -994718, -288162, -327254, 188675, 207918, -354930, 126262, 305057, -820019, 908031, -523090, -974166, 713907, -819525, 85937, 573753, -854195, -798898, -45718, -183763, -457785, -316280, 42030, -58328, -646873, -59077, 564171, -615527, 350185, 331160, -404934, 138296, 576452, -593672, -768197, -120140, 120299, -431909, 937682, -554519, -460782, -72891, -548575, -972689, 548405, -729719, -245655, 248150, 355827, -118980, 109942, -297239, -219615, 491947, -214686, 535564, 172676, 968362, -225020, -56366, -559215, 669733, 703907, -456441, -183338, 508667, 422688, 898774, 31999, 232846, 315454, -220319, 789241, -886517, -367745, 321204, -318069, 869569, 449709, 770765, 839341, 240522, -942594, -425151, 40030, 753104};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques126(){
        Integer[] array = {832496, 646782, 129012, 6551, 665937, -913291, -348410, 573685, -238450, -231208, -923014, -568369, 252125, -382499, -383212, 476695, 509180, -864028, 295853, 810539, 899209, 183763, 667841, 93632, 531777, 49479, 9147, -3228, -333065, 944741, -532879, 437615, -905553, 75801, -58396, -865640, -372416, -854429, 38931, 807529, 284009, -50930, 398835, -456858, -716363, 802004, 814334, 482668, -354141, 342060, -171811, 333658, 292881, 408829, -861254, -611486, -868013, 512633, 968318, 201229, 908030, 201981, -142341, 224755, 837606, -426458, 156869, -351484, 10380, -426389, -615940, 172391, 315304, -972868, -241037, -964827, 963106, -750885, -895574, 175093, -441659, -643361, 396453, 847206, 519190, 597709, -853462, 339401, -24507, -648861, 773100, -217351, 1678, 762785, -386141, -352029, 767311, 986427, 705614, 324682};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques127(){
        Integer[] array = {-986259, 321376, 854689, -757390, -451625, 452016, -73074, 828789, 874981, 277564, 763249, -599752, 906035, 386422, -128010, -510194, -341478, -986842, -39334, 994415, -412689, 233487, 295723, -607222, -600877, -874263, 152975, -834117, -580919, 76222, -447973, -955473, -833956, 587243, 671477, -601089, -126804, -893059, 104515, -124844, -835860, 935111, -254658, -568660, 405886, -336807, 308813, 995468, 395482, -491181, 409929, 717830, 948213, -536589, -157441, -21330, -803653, 678286, 955521, 506919, 458775, -451264, -903499, -996083, 883199, -128474, 321160, 299870, 738158, 711197, 566992, 218160, -366981, 556611, 762224, 507470, 942019, 583553, -341369, -243821, 226706, 572101, 483704, 859140, 693563, 505981, -390997, -396830, 536549, 103438, -164310, -766623, 816704, -561440, -945020, -738845, -198315, -906453, -140100, 425090};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques128(){
        Integer[] array = {-558492, -875539, 745469, -962045, 506138, 218746, 653494, -308195, -705649, -451643, 389867, 149483, -379616, -525725, -773150, -314174, 74368, 684246, -730389, 21990, 933560, -127435, -240714, 911538, -113992, -735228, 642162, 239942, 947710, 595206, -853837, 907462, 818984, -612324, -646964, -789065, -990320, 297007, -887502, 617607, 660780, 710733, 331098, 978800, 42618, 179189, 398066, 833095, -132329, -475088, 443110, -218440, -92487, 910247, 810614, -391703, -223958, -5945, 75313, 350619, -386343, -855002, 550978, 534293, -519996, 91480, -409859, -841306, 579228, 104021, -286603, 422643, 861493, -64644, -8286, -719536, -719681, 667262, -711613, 781321, 715079, -533861, 974976, -678616, 853340, 68781, 460859, -826504, 777705, 498622, 721291, 75414, 849712, -552897, 53752, 824962, -944264, 972018, -290463, -755485};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques129(){
        Integer[] array = {340993, 326654, 222507, 527395, -367893, -881956, 477138, -56968, 756731, 207218, 887729, 280944, -593701, 917155, 366060, 917675, -144688, 589649, 838534, 635914, 118537, -200493, -193826, 756357, -430465, 894265, 537522, 220012, 442070, -773784, 623384, -682026, 456578, 234050, 987088, -912138, 996336, -649792, 874886, 160840, -91238, 778664, 802040, -41191, 934404, -801421, -69359, -224196, 944847, 361092, -427370, -391389, -856978, -21670, 601145, -380054, -714640, -860321, 745978, 750848, -592516, 559300, 626520, 785119, 509860, 640052, -136256, -535891, 483279, 546285, -942530, -85911, -773982, -691012, -933590, -893490, -371156, 145270, -35417, 891691, -643459, 94357, -278432, 70940, -457855, 453283, -694967, -261196, 283034, -505786, -55875, 253433, 718762, -353002, 447930, -515971, 7929, -535409, 843218, -488424};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques130(){
        Integer[] array = {541398, -963458, 143335, -465444, -893037, -830338, -950935, 870771, 175270, -166395, 958397, -266075, 163520, 205638, -796601, 294354, -164768, -24646, -796568, -446097, -356896, 556532, 563495, -612165, -841908, -960325, -614382, -923198, -962378, -502468, -637207, 417374, -813873, 569380, -978538, -375179, 171083, 769760, 259955, -429692, -680494, -122548, -395060, 423988, 553998, -230237, -599768, 145792, -532827, 104118, 243284, 548946, -310716, -53700, -452512, -40536, 619489, -488864, 22236, 239977, 219911, 865200, 778659, -506657, 243045, -793413, -146810, -799542, -790654, 507513, -316612, 461870, 358143, -379541, -69213, 943487, 15650, -478123, 321549, -843174, -729207, -108557, -488940, 95024, -931392, 414107, -906268, 870099, 445258, 421562, -274482, -66085, 988652, 501426, 74388, -439722, -378321, -605559, -586008, -515878};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques131(){
        Integer[] array = {-43108, -21532, -298921, -869056, 739338, -160217, -773913, -992733, 445058, 926941, -71112, 621881, 307370, 195739, -344837, 681100, 260001, 231347, 773445, 557172, -848087, 689127, 15614, -369905, 34468, 970937, -924567, 253781, -904597, 16981, -295258, 121302, -231404, -129838, 828728, -489314, -594975, -566562, 209340, 743787, -626983, 476080, -632665, -129055, 207950, -28796, 783485, -242214, -67269, 614022, -515487, -395953, 290284, -433575, -906926, -45893, -227350, -694458, -795003, -921467, -539366, -225093, -491696, -122751, 429554, 687064, -25716, -443078, -950851, 414713, 659038, -241689, 695163, 212656, 690962, 889148, -856555, -334117, -21148, 88964, -820660, -256202, -257618, -672178, 245754, 601265, 778009, -258707, 935299, 802378, -489036, -832379, 523807, -500708, -187652, -932005, 346296, 510651, -888316, 751527};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques132(){
        Integer[] array = {94195, 855401, -355313, 871638, -934325, -493038, -127957, 334857, 344840, 200073, 270111, -231574, 920936, -618056, -280088, -65839, -431775, -549151, -123515, 886422, 935976, 201416, -392340, 105840, 819467, 538595, -803037, -40549, 784173, 275156, 59330, -251024, 40304, 138227, -954575, 318049, -363044, 666302, 986536, 881275, -638159, -401848, -123856, -586335, 498391, 286111, 433359, 456268, -930526, -215263, 460111, 680937, 129260, -500193, -693648, 879117, -183977, 105593, -889296, -353125, -487532, 565240, -887898, -293086, -510088, 245091, -512200, -323528, 424775, 46258, 361959, 38711, -263784, -39412, -616556, -678402, -432151, -520641, -141730, 55769, -665907, 943815, -371473, 557465, 837074, -454601, -33522, 255759, 586089, -354313, -402469, -659388, 972484, 974635, 597498, -207326, 182621, -370569, -947476, 129002};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques133(){
        Integer[] array = {579292, -245615, 837851, -932428, 826800, -633392, -286399, -107514, -50776, -893388, -528148, -160705, 569618, -648304, -788830, -547216, -48044, 363277, 360537, 150085, -144127, 190879, 431168, -906596, 288704, 804227, -466476, 776318, 793977, -320726, 437620, -712616, -499827, 28133, -956912, 124227, 100852, 73557, 939288, -67839, 26081, 956278, 877910, 135215, -147730, -5572, 546240, 603436, -103186, 65412, 42026, 427288, 744092, -970336, 97401, -260758, -156474, 288945, 79815, 759051, 656224, 242355, -762567, -998393, -796815, 170650, 425961, -161859, 285609, 916221, -586955, 639725, 815807, -494742, 795621, 628406, -980241, 214269, 244619, 342072, -583158, -710884, -530569, 537087, -983733, 850236, -223553, 153019, 645539, 330377, -858558, 371402, 375441, -14456, -107918, 426082, -833840, -780819, -85214, 825797};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques134(){
        Integer[] array = {563372, -681889, 6383, -388608, 210301, -992003, -72853, 762595, 694196, -375950, -537945, -468118, 159778, -710630, 480954, -250735, -314271, 319934, 911941, 799529, -165685, -155780, 209985, 734138, -230583, 481097, 887996, -788186, -591520, 384626, 608744, -770188, 233605, 70078, 336038, -190432, -757363, 580058, 523882, -669544, -368184, -376731, 230780, 848784, 682913, -487657, 943958, 258472, -23545, -290436, 152583, -434965, 981466, -61324, -16521, -281278, -492994, -232883, -578410, -803539, -732932, -761906, -779560, 10097, -474713, 631916, 155037, 167990, -350306, 457848, -467051, -713260, -552485, -287520, 881664, 868481, 294164, 844567, -479717, -167837, 197162, -653081, -228521, 226209, 771464, -869372, 945419, 691507, -233656, -383019, 676251, -638579, 709287, 193825, -516213, -972263, 352319, 15849, 916701, 918583};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques135(){
        Integer[] array = {86481, -277124, -382016, -305119, 122002, -592429, 31790, 309833, -337224, -597342, 321123, 780826, -972830, 224761, 695788, 817388, 180729, 546259, 862243, -356540, 662195, -656667, 905069, -282682, -833818, 714054, -902417, 113505, -924372, -57061, 514437, -784341, 678499, 732983, 509455, -331503, -206963, -982437, 926010, 262302, -111375, -941854, 977081, 584804, 536449, -291925, 683135, 109485, -533236, -614302, -970228, -395378, -249745, 550405, 391625, 963820, 117844, -801861, 993282, -541097, -616934, -958113, 176103, -856461, -877232, 960986, 96453, -722843, 897816, 733748, -517668, 639577, -746875, 181809, 82577, 905652, -45942, 230040, -877886, -230540, -460438, -336280, -8007, 531043, 738641, 637127, 625032, -352034, 820063, 45058, 906871, 241886, 458214, 216129, -552175, -406388, 757072, 355634, 412216, 575558};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques136(){
        Integer[] array = {-52361, -885665, 293433, -682203, -402882, -120233, -65907, 41696, -616491, 136873, -503892, 767632, -161441, -133005, -615034, 285556, 468494, -635423, 896789, 921659, 28453, -734421, -220135, 65337, -414460, 837660, 709564, 590363, 992951, 475079, 665976, -537824, 685784, 823451, 281576, -898413, 250825, -636251, 60784, -961023, 748348, 631101, -615097, 444197, 648938, 220611, -104289, 957253, 582796, -636572, -342940, 198461, 913985, -769350, 218446, -687272, -124432, 955070, -151208, 419692, 259776, 749556, 89903, -683655, 783929, -56924, -125893, -394388, -629556, -414217, 939689, -461802, 706578, -211504, -367652, -971522, 24200, -475326, -357116, -738814, 766990, 955642, 563697, -188690, 672446, -951567, 2752, -906671, -604375, -132488, -466217, 187512, 152026, 191141, 301510, 351780, 897472, 46221, 472021, 936676};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques137(){
        Integer[] array = {446456, -179574, 843912, 165310, 731090, -970035, 294720, 30018, 872433, 69975, 629991, -641565, -10021, 502030, -623823, -311627, -232649, -355898, -764052, 225306, 204565, -674967, -340332, -159662, 173836, -83467, 432963, 662042, 250356, 696274, 260520, -702504, -762479, -175890, 291853, 241629, -173904, 802291, 726419, 173173, 298786, 367567, -957966, 396937, -930084, 74644, 814256, 895441, -466433, 442411, -63031, -392244, 207641, -79342, -147239, -334297, 206355, 867826, 216092, -153376, 794823, -127634, 326252, -873803, 876057, -958996, -806168, -586468, 54827, 262672, -834054, -302365, -887648, 68025, -85706, -306224, 773668, -532449, -173081, -939114, 301926, -640983, -241709, 862161, 639276, 197449, -69291, -439285, -906306, 178292, 347412, 772440, 39486, 389626, -388654, 662733, 519677, 71756, 794456, -220597};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques138(){
        Integer[] array = {788094, 786935, -526740, 890489, 798289, 203021, -710212, 510683, -596918, -254398, 593435, -208650, -643243, -571235, 593904, 495310, -383184, -350082, -266367, -271071, -963525, -436162, -433990, 772442, -430854, 272415, 856434, 77132, 516484, 498663, -998239, -623355, 304015, -675152, 647687, -56359, 405773, 11803, 179112, 361249, -605974, -59421, -332029, 269312, -972108, 529152, -32322, 381044, -684497, 834966, 371884, 758796, -950318, 271023, 735106, 790446, -854069, 705793, -74434, -687684, -283926, 73670, 453768, 636018, 84937, 159849, -605232, -674290, -244485, -556333, -453343, 644243, -561192, 660926, -933137, -698214, -173440, 830850, -459740, -231671, -617172, -711578, 324511, -197976, 271656, 755355, -262844, -935772, 616717, 538572, -708835, 75876, 723787, -150629, -136106, -143164, 903342, 322549, -200933, 449821};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques139(){
        Integer[] array = {-168090, 681416, 609609, -497260, 570214, -475536, 604094, -495336, -957476, 24554, 600896, 883430, -507122, 713319, -770658, 566390, -380582, 418160, 611005, 83206, -813002, -167604, -644051, 625047, 116688, -834422, -193304, -863304, 717882, -733339, 681832, -359142, 944726, -62096, -815944, 747919, -832605, 593560, -23580, -916789, -996926, 548782, -928537, 585329, -679403, -88117, 735364, 779555, 591468, 988254, 399769, -964690, -704094, 217242, -488647, -982249, -377112, 944230, 116804, -382518, -135433, -416667, 391085, 612175, -326084, 70663, 221598, -350698, -808098, -923406, -810197, 412312, 851672, 98004, 900957, -303942, 455298, 642580, -813652, -91662, -189677, -732669, 291381, -276381, 848213, -476914, 858531, 403776, 634019, -813153, -992552, 982819, 135774, 963057, 261104, -988824, 321246, 209285, -107020, 161950};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques140(){
        Integer[] array = {801419, 683745, 431503, -384314, -805772, 517798, -311002, -90647, -838504, -512988, 817466, -574215, -525015, -76992, -835324, -112337, -314528, 704057, 325337, -791834, -80045, 860013, -459797, 97959, -482663, -428451, 590173, -384230, -194379, 885910, -613973, 743493, -458847, 28506, 177023, -464277, 110427, -616479, -63910, -121874, -28684, 632456, 287380, -384257, 894935, 136581, 299998, 191629, -803486, -80359, 388210, -947788, 628367, 590391, 123557, 254041, 675353, -659647, 661581, 340432, -239127, 663078, 58442, 120394, -751040, -896305, 526815, 339184, -77976, -905365, -140353, -914157, 232194, 70334, 989040, 885497, 2315, 710885, -313983, 742409, -892399, 97036, 379975, 387968, 636597, 550919, 868387, 233139, -966366, -910329, 312149, -166796, -657891, 345106, -43435, -692989, 622950, -5289, -182318, -633952};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques141(){
        Integer[] array = {-525979, 393384, 999294, 448208, 166480, 917059, 295855, 962235, -651589, 768108, 147959, 845707, 756972, 410546, -387472, -373268, -923836, 365730, -332166, -830150, -910451, -369828, 77860, -930564, 175894, 36329, 739331, -591177, -94902, -809475, -579767, 60429, -759145, 588857, -847106, -931630, -114471, 369888, 237525, 412652, 759018, -738443, -521662, -699300, -738399, 275640, 168605, 492634, 762160, -562229, -548416, -494451, -91794, -62142, -859767, 186173, 172071, -886047, -370584, -905644, -498066, 971941, -815374, 794777, 656947, 734883, -427434, -277134, 493190, 159675, 668380, 975427, -901738, -367328, -624178, -538102, -922724, 224968, 599020, -565894, 577588, -758690, -382146, -707550, 898327, 421978, -655271, -722701, -996911, -305334, 863283, 977150, -715361, -888676, 128884, -718288, -34308, 278470, -470368, 330457};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques142(){
        Integer[] array = {104415, -674405, 893122, -808469, -411459, -685514, 23508, -541814, 342383, -974699, -754253, -572971, -413829, -721988, 908300, -369981, -375222, 896418, 509975, -206832, -200082, 638021, -220210, -79488, 543586, 908553, 583943, 851319, 766762, -687507, 946031, -17560, 808772, 17406, -357752, -389678, -769412, -719129, 772357, 427749, 262288, -766463, -60331, 884097, -827884, -725544, -289699, -105383, -762499, -399370, 679321, -698688, 362823, 80797, 280209, -290463, -224766, -150234, -584463, 981477, -264447, 108223, -906709, -320590, -806361, 441303, -279761, -786572, 921217, 44966, -868391, -167751, -70161, -118000, 703303, -305721, 56101, -625273, 791315, 401500, -882403, -870648, -834799, 46384, -136647, 442682, 70050, 435800, -267305, 153607, 749917, 790568, -949398, 649653, -254809, 520571, -776490, 872497, -440642, -441613};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques143(){
        Integer[] array = {683223, -232417, 498094, 802475, -479658, 485813, -151594, -907994, -93857, 566343, -26621, -982483, 237094, -830524, 559091, -879493, -29783, 73172, 555666, -396442, 48111, 323054, 961999, -940851, -69278, 321527, -834413, 153004, -335303, -714207, 681365, 876550, 209241, -59227, 56757, -583911, 93859, 254122, 754356, -599495, 519850, 374518, 723382, -850640, 635827, 454140, 876091, 357797, 116561, -457394, -54007, 276211, -534569, -228253, -207086, 810575, -977692, -842771, -964580, -273421, -262486, -223000, 581078, -186121, 874300, 273811, -100740, -69239, 740948, -561798, 236668, 459600, 593346, -301050, 541889, 500853, 816076, -903865, 352773, -190053, 288906, 915065, -991261, -368651, 255576, 707269, -855166, -814679, 659385, -204014, -626870, 830046, -736514, 108748, 79921, 580993, -542391, 635508, -234061, 357943};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques144(){
        Integer[] array = {-887045, -886615, -482706, -395245, -675944, -82604, 621676, -15869, -224517, 931436, -899146, 682036, -100452, 853885, 249771, 661916, -204585, 859045, -150413, 258215, -94973, -552572, -627268, -721883, -150444, -787386, 729911, 215521, -400139, -411852, 313702, 822294, -461995, -210981, 779126, 384484, -885709, -445268, -627441, 319815, 315506, -769858, 345257, -127118, -344927, -753978, -621245, -483551, -896066, -224815, 799199, -715579, -712773, -548531, 913895, -500295, 576808, -54263, -271115, -912225, -817048, 311617, 436156, 833473, 655965, -50860, 473409, 47649, 270699, 919294, -23966, -897781, 378645, 618554, -494099, -863291, -290584, 771994, 36062, 773926, 407450, -249752, 383849, 228620, 297378, 85775, 532634, -181259, -961077, -625858, 388285, 490968, 798243, 290203, 614843, -281044, 262191, -96079, 969828, 489634};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques145(){
        Integer[] array = {437786, 87279, -473241, 576788, -150107, 745310, 806727, 126887, -140990, -112225, 952609, 782804, -697598, -559740, 156044, 14981, -162893, 442100, -124952, 738686, -368815, -171461, 302560, 600916, -119546, 47328, 697133, -40197, 797053, 98490, 81491, -417774, -872041, 869184, 339629, 631043, 659000, 803531, 136124, -623393, 368595, -520691, 550379, -174934, -242876, 266079, 727319, -611925, 780753, 897220, -259955, -154081, 103567, -51147, 18090, 399728, 783445, -336332, 523258, 375003, -60504, -296312, 216220, 434651, 407580, -955486, 995749, 4442, 42421, 34519, -361143, 574522, -747821, 110644, -538732, 8833, 582288, -978368, -616042, 442186, -485671, -870462, -653027, 895564, -223752, 850012, 826867, -986598, 898830, 950743, -953111, 117799, 267628, -239390, -493005, 592944, -459050, -639743, 708904, -486232};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques146(){
        Integer[] array = {553913, 783555, -543312, -737185, -441157, 500989, 758455, 903847, 766956, 535583, -433346, 355606, 684649, 320180, 99652, -62244, -457211, -291346, 355262, 513893, -221064, -174070, 543039, 120155, -940096, -263146, 594029, 128123, -315186, -150083, 7556, 345339, 618842, 916453, 289781, -539773, -866165, 802183, -268164, -122212, 804762, 911148, 287757, -320429, 874388, -789722, -353867, 486370, -441136, -946151, 453526, 762308, -17548, -905701, -395695, 450140, -191913, -396283, -187452, -835656, -938260, -285826, -566240, -647183, 991444, -808417, -591382, -201183, 166407, 575393, -806005, -782701, 791466, -88056, 589353, 348671, -992611, -623907, -363432, 403540, -549619, -333325, -165812, -377377, -266611, -52022, -412137, 346993, 435271, -755665, -201036, 195334, -885469, -81191, 832844, -215195, 921722, 982066, 973129, -547386};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques147(){
        Integer[] array = {444473, 822734, 427544, 957080, 692465, 682875, 507884, -272340, -232847, -482279, 371105, 140930, 3737, 409743, 653910, 962988, -96115, -576624, 120423, 87463, -847100, 428579, -315554, 632831, 193689, 744160, 919552, -930372, -70752, -956090, -340077, 715996, 54624, 112699, -802711, -456026, -706426, 746372, 120227, -216751, -533278, -285704, -521794, -698234, 958838, 860827, 733521, -26166, -747154, -588197, 340975, -932344, 864808, 907957, 723820, 530785, 975936, -724740, -3473, -412261, 879386, -275405, 615169, 866326, -350393, -359898, 141754, 929503, 930670, -808264, 836325, 955372, 109668, -788386, 488168, -511991, -113538, 890745, 7048, 125082, -719193, -577611, -774238, -597132, 222523, 215636, -54059, 738549, -396085, 635596, 543401, 510535, 120165, -219964, 967125, 740395, 213071, 323850, -862978, 402168};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques148(){
        Integer[] array = {4461, 969577, 594035, -475617, 254298, 825850, 639309, -735601, -60654, 354164, -929267, -733100, -334810, 9613, -862416, -755608, -981637, 843159, -894658, -654137, -207097, 459683, 832821, -226611, 904094, -193382, 877036, -266630, -850425, -399188, 813147, -563, 431263, 981519, 619082, 376364, 659083, -100071, -891888, -94579, 449953, 706695, 324223, -719845, -562081, 773846, -585279, -620401, 604771, 231832, -460652, 305797, -560800, 865615, 197595, -105508, -60460, -879718, 875983, 316962, -823914, 588393, -428429, 59649, 94971, -702462, 199178, -33671, -468663, -75644, 924457, 364303, -474889, 22393, 92623, -45312, -839666, 544420, -323107, 174608, -179469, 956029, 180808, 730473, 887622, -911350, -442839, -691604, 684441, -971691, 603372, -702569, -400091, -411987, 178037, -636722, 16642, -691112, 105906, 749552};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques149(){
        Integer[] array = {472957, 122727, -638901, 986893, -161822, -839466, 388504, -838480, -196124, -960961, 497214, -727685, 149886, 597977, 232058, 148696, -738127, -870232, 183458, 853790, 765780, -927661, 409458, -253499, 194150, -266989, -812509, 740611, 512361, -588688, -502791, -857937, 676782, -936921, 238773, 672790, 343946, 111672, 832698, -885508, -511272, -583806, 191345, -513815, 42549, 19838, 616187, -329292, -531496, 461997, 624846, -730898, 122483, 20467, 478322, 414031, 846875, 534098, 455590, 863240, -335188, 605173, -758388, 282119, 545665, -930958, -33526, -316722, 724740, 421084, 131902, 873015, 640673, -712845, -44771, -192821, 4424, -807728, -758736, 512002, -640248, 243910, 42158, -825565, -721605, 516759, 56102, 547902, -867600, -544224, 641675, 417496, -923149, 961353, -581466, 122765, 502329, 308610, -33936, -469916};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques150(){
        Integer[] array = {922040, 642116, 96330, 953714, -190841, -273825, 759468, -323657, 636062, -734137, 595346, -881920, -108739, -489823, -393238, -702217, -45651, 372143, -324239, -46547, -480331, 245365, -709124, -142155, 536481, 59902, 465740, 792790, 876870, -13894, -937080, 684666, -708137, 730159, 660306, -456794, 562160, -425372, 813800, -40842, -922893, -310160, -207408, 402271, 828529, 115606, -196997, -600148, 593653, 427471, 182047, -321554, 677766, -600732, 163984, 34150, 254070, 254768, -270511, 986499, -399189, -594711, -605774, -170403, -119284, 493859, -25532, 129797, -449077, -880417, 341949, 632126, -627271, 991771, -861521, 782678, 513479, -660365, -500632, 485411, 718758, 193496, -438689, 194155, -504409, 986449, -471106, 645092, -855973, -649517, 106987, -970687, -432557, 544100, 457373, -949332, 59571, 171281, -846013, 521086};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques151(){
        Integer[] array = {175724, -292689, -386953, -35943, -73877, -178787, -953473, -635117, 252927, -515816, -540568, -614811, 83150, -726290, -597547, 901365, -658839, -772282, -860734, -731021, 465099, -774391, 420965, -547777, -144244, -656859, 626471, -554890, -437884, 763124, 58294, -734533, -202131, -935890, -184592, -613550, 824048, 127172, 280054, -541918, 931521, -655099, 950440, -620542, 734018, 744977, -388015, -634580, -401724, -892281, -143056, 611746, -33041, -742054, 833616, -661040, -613349, 140441, 105148, 943127, 665685, 671783, -9509, 531683, -313232, -630902, 292612, 432916, 642159, 739122, 303298, -507700, 978116, 574936, 578799, 41238, 989312, -465105, -159533, -571818, -194910, -910603, -135234, -573779, 669118, -29020, 982576, 142526, 950340, -309214, -36238, -59486, 720976, -152865, 642353, 841774, 897955, -500171, 263855, 858454};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques152(){
        Integer[] array = {-69657, 227615, 579057, -666996, -815519, 557410, -612720, 510856, -181286, -740349, -672798, 226381, 220765, 862912, 465589, -138464, 873268, 567837, -779597, 956986, 256478, -350835, 549310, -142964, 709032, -659546, 26193, 642544, 976827, 126354, 824493, -492224, 461339, -55471, 952068, -182550, -774698, 426242, 910004, 527453, -551318, 868027, 764190, 357633, 487064, -871869, -959271, 887482, 353520, -861470, 186736, 852947, -94177, 150853, 361022, -114268, 628963, -830820, 387543, -667375, -156167, -662055, -167261, 923803, 124824, 896898, 950530, -314812, -662608, 7248, 985245, 124508, -874272, 938599, 918055, 919173, 803668, 577640, 466167, -78611, -312532, -145192, 45045, -32443, -148497, 118970, 452388, -888829, -485383, 809187, -739358, 675131, -239832, -478789, -934273, -43037, 617985, -236343, 266934, 383295};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques153(){
        Integer[] array = {-703378, -806958, -340991, 894930, 148006, -596971, 279539, 806104, -663064, 675293, -757427, 5240, -91438, -779008, -658462, 771235, 139357, 841425, -643499, -886951, -135566, 784829, -835036, 148708, -782302, 838450, 814821, 159619, 337804, 762542, 726913, 674104, -45341, 539885, 375896, 824762, -932964, 12877, 29684, 673771, -338154, 609419, -242392, -236708, 410483, 619319, 263961, -2982, 736195, 258034, -521965, 646871, -509288, -468632, 539008, 417914, -607247, -539184, 592957, 927351, 780634, -196745, 718682, 191853, 446864, 508386, -181115, 258446, -576930, -683659, -770903, 583282, 459397, 946749, 783767, -847277, 834701, -418791, -619748, -35700, 146903, -255956, -214239, 393213, -441748, 385674, -962835, 990007, 182855, 898170, -70571, 847247, -28832, 53604, -27354, -592207, 791651, -605957, 930863, 685193};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques154(){
        Integer[] array = {730065, 773696, 521134, 398642, 202088, -754639, -624560, -158474, -777574, 465558, 246845, 574439, 101021, 514580, 668230, -40705, 841300, 47720, 491653, 821511, 517388, -122717, 984125, -644943, -382124, -26967, -934655, -809155, 319878, -705699, -839607, 590948, -14791, 598339, -321795, -956576, 456262, 421378, -658981, 427389, 8588, -892462, 458285, 231867, -145729, 2718, -114495, -867469, -334165, -526111, -572612, 825499, -884977, 860516, 232252, 517617, 686139, -243506, -188901, 163920, 584087, -983163, 830289, 313996, 128851, 354822, 850122, -311410, -88392, 403228, -681109, 348857, 674028, -831678, -178244, 684010, 881849, -450240, 666503, -494779, -731280, -735624, 923180, -58827, -449744, -888687, 706882, -300408, -951726, 471975, -838105, -322120, -785231, 406518, -229069, -475977, 939057, -453267, 632627, -606597};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques155(){
        Integer[] array = {-250697, -766644, -220091, -261037, 695417, -240934, 513602, 192620, -795376, -977091, -445817, -929968, 205006, -590712, 210178, -778680, 198271, 913348, 971482, 61039, -351833, -441599, -876639, 248933, -107051, -69307, -672434, -673780, -201797, 885389, -88864, 688190, -657757, 298337, 378270, -633305, 189063, -428304, -99111, -715841, -160676, -371736, 728465, -321203, 955623, -566190, 71179, 599918, -104100, 551050, 122428, 847701, -853813, -531868, 35990, -839337, 507441, -745717, -436707, 667967, 449555, -57805, -74278, 296830, -148176, -117563, 939272, -391754, 168825, 679010, 392050, -564278, -53507, -1107, -786365, 480028, -268724, 298602, -736142, -53715, 108830, 159783, -343373, 675948, 226137, -355514, -580447, 114219, -866529, -442629, 651034, 383536, -834048, -875177, 73361, 365809, -374372, 141887, -54036, 213992};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques156(){
        Integer[] array = {-251658, 673155, -389661, -462654, -464086, 402216, -291390, 634248, 220468, -307457, -955422, -868894, 638660, -669267, -806244, -749878, -941744, -455623, -737827, 515354, -983511, -626001, 28935, -145534, -286280, -831896, -702426, -694858, -91913, -302764, -481551, 590528, 483788, 643710, 903765, -78471, 67974, -509368, -42731, -974047, -292840, -713708, -602154, -126617, 369898, -672476, -612190, 483679, -21955, 793391, 742850, 857113, 489487, -970010, 892769, -451947, -234182, -751727, -965334, -896088, -473001, 780134, -923503, -176869, 192519, 992348, -657299, 49802, 163960, 261394, 695900, 667864, 726186, -566070, 315814, -926735, -354361, -479872, -407685, -17953, 72121, -863034, -835861, 561926, -564059, -713657, -704148, -576667, 453486, 752631, 765747, 196638, -206588, 948742, 363404, -982060, -477522, 179529, -67516, -473480};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques157(){
        Integer[] array = {630642, -766053, -978816, 786659, 336374, 888282, -464326, 962820, -34871, -530301, 795798, 451514, -755569, 829887, 770179, 695157, -91498, 54589, -554993, -942093, -608056, -255260, 755431, 834681, 580381, -895356, -560417, 436512, 500330, -451566, 365482, -722226, 395335, 795725, 4195, 409794, -664800, 209439, 600272, 988472, -184445, -922603, 470265, -258504, 810499, 518726, 807398, -295036, -112661, -815456, -859636, -969855, -636768, -898680, 549515, 171920, 676622, -398657, -247391, -31981, 311571, -756993, 235959, -728323, -696673, -84818, 43856, 607511, -750564, 972013, -76249, -688735, 973208, 606767, 877390, 26794, -175508, -945700, 927710, 74408, -648358, -397714, 383571, -115150, -46901, 764119, 591142, 27774, -589700, -284214, 997574, -834660, -584152, 454749, -85831, 733689, -310243, 109823, 954980, 872098};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques158(){
        Integer[] array = {-6796, 929989, 871658, 660871, 91918, 640813, -388790, 965791, -630332, -129666, 155693, -638425, -13045, -943374, -181401, -197750, -563760, 209553, -827853, -361674, -854706, 221067, 404848, -420835, 833358, -146015, -512872, -7125, 992389, 445053, -651065, 891278, 851249, 990711, -625981, 379317, -52771, 246058, -405481, -164533, 152317, -441651, 294701, 979713, -795225, -908019, 221885, -373024, -813451, -844550, 972441, 372626, 415561, 968634, 159745, -78443, 465535, -174372, -775429, 621751, -518284, 330953, 13174, 384325, -49053, -453799, -560115, 294112, -883073, -205986, -180093, 831422, -444594, -470712, 307453, 115260, 646418, 162369, -820067, 824504, 799164, -287607, -731053, 968968, 85140, -578738, 485111, -743581, 994771, -24332, -905162, 865329, 566992, 795090, 569468, 189835, 864393, 302364, 609901, 553343};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques159(){
        Integer[] array = {777802, 983423, -23058, -514504, -854706, -685398, -230415, 917701, -61654, -605799, -27054, 931589, -708785, -905020, 464820, -25599, -365147, -791867, -966237, 905355, -928667, -938463, 619452, 13734, -59139, 844051, 331518, 272560, 184015, 844785, -735563, -699176, -227224, 605031, -839962, 563171, 197832, 692029, -870885, -823749, -627445, 374247, 902219, 549808, -809126, 346159, 364593, 928274, -273266, 693119, 995226, 685564, -646617, 311736, 963048, 671604, 337415, -83095, 749283, -712351, 993326, -531815, 58465, 561696, -611799, 786566, -470803, 451903, 558465, -954194, -842991, -347856, -827800, -535047, -640995, 562419, 529644, -242550, 877050, 441226, 268271, 925999, 249381, -343509, 724826, 76019, 362129, -660579, 72975, 980068, 283625, 480867, -940642, 562967, -830170, -889072, 861211, -310851, -916326, -426228};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques160(){
        Integer[] array = {571729, 790525, 430381, 680484, -436253, 849153, -50834, 960423, -641100, 908062, 589006, 16192, -416159, -650668, 641392, -519773, 420640, -321675, -871601, 742282, -588535, 575476, -689229, -491641, 815386, 896729, 437965, -928482, 458970, 609153, 467826, 18380, -805465, -261391, -839875, 170591, 438310, -598544, -178934, -864552, -952950, 207954, 671426, -792837, 875405, 246182, 923917, -445274, -890665, -728142, -116750, -911845, -78515, 622565, 327448, 468692, -11162, 782323, 697598, -949645, 484677, -341650, -275463, -590054, 463025, 597289, 860625, -213865, -835451, 971382, -638990, 642803, -210939, 798641, -965271, 796396, -257615, -285780, -339484, -241127, 943382, -41081, -561288, -564015, -557384, -950749, 590818, 148374, 636396, -92773, 205449, -780361, -22193, -43175, -817041, -534896, 23800, 732628, -368179, 440263};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques161(){
        Integer[] array = {-389670, -888958, -998093, -760948, -599295, -306651, 624370, 140640, 853178, -850877, 327487, -682574, -204084, 703995, 451431, 243914, -286147, -296126, -169665, 876292, -753647, -541221, 955561, 186016, 376660, 614799, -836988, -178271, 818156, 784238, 682911, 155696, -882097, 247196, -515462, 44640, -461542, 459550, 932006, 629425, -935769, -70408, -155324, 168515, 184590, -242608, -39322, -199710, 618623, -379743, -170355, -123220, 519117, 762135, -661413, 351667, 733771, 1899, -978210, -24285, -860819, 949748, -687641, 5244, 574435, 386263, 152494, -579302, 16044, 861903, -609492, 410627, 154023, -694187, 564537, -567120, -992689, 772967, -592964, 225332, -80604, 843647, -614826, -139070, -988414, -870764, 198273, -935700, -605718, 702144, -463242, -450222, 682702, 275492, -123728, 743506, -417643, 16099, 160623, -394966};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques162(){
        Integer[] array = {-330100, -892665, 600538, 391007, -358153, -714543, 578797, -839935, -786531, 617477, 192221, 196548, -772674, 826034, -646198, 568474, 805088, 186664, 658988, -170772, 38319, 545351, 483117, -552911, -616571, 801138, 206041, 568809, -796402, -64464, 778582, -120367, 942603, 925041, -607450, 487470, -777726, -249264, 984621, -870744, -515908, -84602, -159694, -940316, 626305, 136806, 926625, -251781, -770684, -204474, 504931, -859854, -369167, 157485, -182083, -601352, 7028, -279479, -895328, 296495, 947383, 143864, -930113, -467938, 261460, -52011, -554950, 163734, 331221, -463196, -846088, -592891, 104897, 609881, 622736, 446769, 425542, 73621, -977385, 205675, -125582, 693134, 131298, -322716, 616769, 538828, -241305, 872919, 79619, 692799, -643316, -958256, 353820, 410818, 365135, -144007, 765014, -587246, 467585, -674218};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques163(){
        Integer[] array = {994286, -314483, -95434, 735488, 376684, -665383, -445134, -171395, 810409, 453612, 547533, -539194, 818150, -405372, -410521, -100880, -288830, 902554, -491716, -616891, 15320, 580519, 453330, 909749, -521751, -414285, 913248, -51151, -503047, 157872, -168962, -863015, 782524, -254585, -338559, -768039, 499323, -953072, 849854, -317240, -460616, -470081, 485072, -201691, 590706, 199498, -708651, 737790, 105942, 271560, -804308, -941792, -203731, -738538, 268977, 664626, -41247, -387375, 470002, 761276, -936683, 438880, 160618, 32906, -857328, -537989, 105935, -602410, 416624, 443577, -248734, 349897, -312849, -64330, 794095, -57447, 928473, 129942, 742409, -84162, 13260, 532497, -515400, 957334, 577908, -390775, -428943, -415784, -137841, 425861, 526829, -987578, -723786, 23949, 370943, -858495, 150074, 191773, 294276, -651730};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques164(){
        Integer[] array = {-219787, -619562, 81183, -408095, -983762, 53800, -72872, -757642, 775680, -282653, -617062, 408694, -756641, -437454, -635704, 195002, -490654, 437417, -542356, -763930, -20169, 868878, -981871, -744759, -211341, -363015, 962596, -485894, -108983, -731551, 485818, -323988, -642638, -512347, -356898, 944345, 39419, 733972, -890562, 730980, -934332, 775803, -345834, -848139, -424889, -222080, 918219, -396482, 889958, 462964, -703611, -22161, 251644, -274490, 698849, 750053, -905958, -511754, -759907, -930760, -423416, 995522, -216294, -444129, 516265, 585622, -156090, -807700, -253363, 509815, 469702, 585482, 65167, -531590, 729347, -552434, 289080, 75901, -186925, 944763, 483927, -567156, -754973, -325909, -102829, 769327, -720560, -629373, -817730, 817109, -911176, 734197, 636071, 68060, 723186, -319559, 79696, -35665, -781312, 536142};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques165(){
        Integer[] array = {55157, 57177, -867211, 26328, -619689, 5792, 877164, -846442, -619115, -815564, 774500, -109344, -820523, -536260, 354950, -12678, -857780, -238840, -425673, -977616, 19335, 608161, -819069, -985689, 494920, -589097, -649347, 411838, 155157, 369883, -333859, -6771, -306846, -198067, 843944, 677773, -855776, -813568, 635485, 674360, -15442, -545410, -257604, 46912, 885007, 345970, 401544, 419409, -750471, -725357, 839578, -814624, 82700, -500108, 378341, -177347, 65810, 774463, -948826, -2820, 831416, 20062, 122223, 917348, 272639, -741160, 901893, 818734, -8762, -869212, -188952, 892483, -815557, -669761, -600345, -177165, -53697, -874846, 310410, -403032, -893235, 330711, 670974, -824254, -34043, 748356, 28363, 800322, -422901, -283361, 431003, 807521, -275632, -868473, -186783, -424635, 194333, -863712, 730552, 73966};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques166(){
        Integer[] array = {-995537, 866527, -906483, -232598, -227809, -830429, 158468, 414280, 899250, 569592, 30745, 910566, 752107, 191642, 951761, 144475, -436011, -230355, 272028, -515870, 371666, 408287, 171009, 386260, -772863, 113230, -546745, -593437, -557921, -131406, -282807, 842127, -20308, 126587, 324066, -908203, 366635, -326106, 961529, 116227, -248811, 261927, -894687, -1226, -38355, 573685, 886562, 808772, -24068, 307092, 858880, 955218, 594506, -818287, 874991, 647272, -854532, -316654, -879872, 519610, 424870, -935115, 799369, -238303, -697585, 109594, -768897, -943917, 192441, -153079, -337431, 317186, -614094, 839035, 933005, 35966, 881812, -825904, -797875, -633002, 581211, -631346, 898185, 67366, -345454, -9611, 344258, 319420, 61207, -230925, 574805, -375601, 839605, 930468, 837175, -911735, -870965, 955483, 232943, -199390};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques167(){
        Integer[] array = {-575241, -619885, -80811, -236095, 109554, -120271, -508573, 901645, 101403, -360697, 535883, -54276, -541465, 494546, 452922, 532742, 291335, 909343, -987124, 61411, 834232, 139102, -477403, -631399, 82337, 169053, -531852, -308038, 480454, -535419, -880487, -467403, -481180, 794753, 379166, 867180, -627902, -23710, -142003, -309895, -201429, 359099, 882894, -428606, 724865, 443512, -459423, -499745, 818491, 960762, -147982, -757912, -985111, -542922, 65028, -302874, 148666, -215922, 668679, 828963, -525652, 127118, 384085, 620264, -936042, -922334, -148783, -101684, 389697, -87782, 427467, -17685, 555152, 349335, -755395, 309145, 299268, 241148, 797812, 117219, -788550, 74824, -691570, 816330, -90829, 100653, -880864, -610809, 588795, 85766, 372687, 797685, -354118, 653493, -212602, -625794, -357606, -265755, 482154, -654021};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques168(){
        Integer[] array = {632903, -684552, -537877, -677186, 343042, 683691, 757814, -252579, -813059, -768897, 145669, -303453, -627117, 165920, 910004, 2503, 214551, -347946, -418524, -221347, 681375, -448765, 246581, 793978, -598748, -816144, 762770, 39618, -473826, -762382, -249181, -674980, 932993, 564212, 810883, 49543, -253975, 322295, 240422, 857876, 321176, 531446, -695279, -701421, 928177, -687187, -725869, 97729, -565050, -849555, -338567, 786637, -975219, 902548, -163280, -87513, -97474, 8003, -78100, -528974, 725936, -756506, 60767, 136311, 6043, -864916, -539869, 375662, -227852, 539865, 214093, -528565, 199352, -83560, -246215, -960516, -568350, 326691, -382664, -513540, -832934, -562027, 587055, 554088, -215413, -95495, 163326, 277787, 929689, 723477, 549943, 113164, 780971, 607319, 31068, -671058, -13877, -795228, 266128, 858483};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques169(){
        Integer[] array = {-532947, 312684, -677469, -59599, -712421, -487204, 12463, -93103, -624750, -612663, -894728, 404462, -53054, 943323, -674930, 76275, -146209, 916281, -654602, -982867, 686911, 857764, 510881, 152434, -109613, -999693, -255774, 856883, -872524, -950630, 327778, -925818, 977831, -527605, 903353, 468414, 285346, -318603, 177326, 165580, -987188, 608127, 538837, -741763, -379165, 712412, -568588, -667081, -218929, 477560, -683482, -539812, 787934, 766974, -851464, -641115, 723984, 505223, 911396, -250887, 58649, 127465, 215137, -164562, -899081, 123890, -546221, -592950, 698367, 447958, 553989, -202184, 301275, 183398, 55863, 223405, 953392, 416422, -452114, 644750, -821505, -260653, 634909, 663561, 815543, 500382, -268730, -583887, -983289, -535787, 742629, 24098, 576894, -157689, -580677, 65985, -588639, -759393, 76424, 696325};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques170(){
        Integer[] array = {441178, -240167, 397065, 457595, 706454, -259367, -421637, 63411, 697698, -409679, -418319, 713983, 491954, -914200, 803916, 520530, 812673, -791070, -643996, -40843, 160835, -17519, -676233, 177174, -951512, 26345, 53454, -663261, 268971, 768583, 854651, 347059, 786579, 339990, 518348, -995718, 776798, 697868, -894889, 78924, 379195, 52802, 6498, 249928, -545451, 13557, 202404, -874326, -532472, -442814, -667305, -720573, -568402, 680875, 33727, 179227, -672818, 926328, 789678, 955136, 556172, -668442, -140670, 879298, -777808, 384484, 346257, 536587, -888331, 479462, 507767, 958181, 292180, 448734, 227300, -288602, 481372, 201838, -893420, 804234, -644576, 908044, -678634, -892401, -858303, 191743, 689294, -438253, 241060, -398955, 237136, 563218, 656230, 868349, 547068, -207068, -149934, 487337, 787445, -207340};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques171(){
        Integer[] array = {599257, 620876, -742255, 324109, 38458, -890431, -345354, -299978, 366331, -363988, 460550, 847598, 434559, -33647, -681231, 908330, 739706, 725006, -909238, -288279, -161824, 729683, -446679, -645701, 358946, 163747, -346361, 783341, 195712, -900565, 969216, -197721, -240888, -960703, 127651, -621668, 759465, 647351, 988703, -369962, -870869, -971086, -224989, -972449, 641430, -427473, 859252, 913531, -343659, 761888, 693693, 126042, 96086, 257041, -787804, -461516, 544896, 788131, 623533, 586374, -925100, -79121, 543606, 946361, 358421, 481530, -283238, -439293, -244883, -643576, -285200, 89244, 164992, -897823, 453450, -525217, -187433, -959550, 233789, 160184, -719979, 837483, 525020, 300880, -778549, 497473, -830703, -485834, -186855, -488474, -888021, -975090, 319550, -986196, -700653, -539730, 906885, -790501, 401689, 536579};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques172(){
        Integer[] array = {824722, 364745, 283572, -502070, -692107, 119350, -246011, -364589, 900593, -912359, 810797, 554756, -701213, -52683, -546615, 765856, -43248, 415298, -121260, -7568, -787325, -874587, -899282, -877310, -660628, 745497, -326290, -38681, 604808, 669902, -883517, -719541, -601619, 770738, -602279, -690102, 225713, -82022, -954897, -413871, -43170, -283852, -289179, 230565, -164214, -487591, 629444, 116590, -586359, -82682, -947808, -337332, 405318, -203414, 762515, 112826, 228055, 232262, 874417, -780605, -397664, -484237, -872625, 363770, 657412, 878840, 80052, 728621, 416621, 711307, -185095, 850314, 815630, 793859, 391381, -419642, 528680, -966671, 626637, 256059, 760657, -921864, -905159, -460422, -732908, 363296, -999939, -253151, -60084, 321785, -281207, -149134, -620061, -890023, 470480, 191940, -892722, -172245, -553930, -513429};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques173(){
        Integer[] array = {-377441, -843865, 595724, 610941, 640832, 795255, 144400, 640592, -741035, 837108, -62506, -115261, 925118, 355328, 891877, -292582, -288153, -826454, -36286, 38895, -684588, 843617, 811779, 720956, 26168, -846667, -594565, -750515, -160075, 75558, 216179, -791290, -130443, 425767, -176876, -116767, 399888, -813605, -864546, 644494, 250624, -72191, 459440, 169986, -725725, 656315, 220314, -333162, -953585, -1276, 937393, -773420, -685278, -898291, 77026, 214872, 629722, 274446, -881131, -262123, -931804, -237608, 2625, -819179, 301604, 54215, 700700, -746511, 316820, 73366, -199747, 156953, -465404, 527236, 49924, -258650, 227475, -455029, -130984, -904151, 715261, -528501, 273959, 355146, -263659, -908488, -416366, 117112, -593140, 156875, -792223, -723683, -538915, -539563, -59210, -790797, -989438, 325980, -737324, -66548};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques174(){
        Integer[] array = {462465, -11130, -422820, 574460, -716754, -542555, -969081, 307010, 528573, 592663, 469090, 15794, -808084, -874028, -156959, 200416, -411642, -127469, 570088, -36915, -913399, 374688, 512146, 710851, 396028, 820337, -650922, -314558, 82141, -799126, 86051, 821045, -267933, -428818, 455006, 995892, 211717, 307435, 857137, -101857, 440007, 979141, 609720, 803651, 613693, -527774, -286734, 90700, -281069, -336462, 844660, 145302, 911451, -430535, 439906, 672772, -441711, 293440, -338933, 905900, -606615, -683651, 87069, -444844, 894396, 407794, 358347, -771527, 252139, -365172, -232256, -271905, -674325, -797955, -683258, -520500, -301934, 635255, -481969, 5496, -343830, 180551, -575455, -533570, -149020, 304752, 862021, 727346, 813021, 874504, 78083, 211361, -360178, 220612, -221433, 774856, 109221, -665896, -613575, 632500};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques175(){
        Integer[] array = {-387930, -353348, -388827, 991009, 643316, 147482, 452505, 501584, 354513, 70432, 488961, -682842, 398150, 123667, 926482, -64938, -488750, -288711, -725679, -147817, 185709, -282878, 191558, -106834, 267236, 653728, 26300, 85532, 796857, 970665, -680709, 132326, -638620, 563396, -890339, -778864, -786817, 28119, 27211, 731897, -204020, -801556, 530583, 873759, 798064, 704830, -996165, -252485, 672870, 627042, 875659, 949191, -164357, 356076, 858503, 758, 12573, 405185, -281224, -909419, -82051, -318140, -962544, 186773, 936198, 613028, -730297, 152442, 347613, -140385, -493431, -164815, -539844, 809206, 560986, 447795, 862951, 593021, 969977, 532580, 95341, 246572, 948730, 324476, -723719, 521209, -683143, -572160, 271567, -385358, -682357, -157805, -150952, -817608, -448085, -812999, 425019, -445795, -942898, -103278};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques176(){
        Integer[] array = {506744, 586274, 773954, 400254, -27104, 700843, 490057, -476506, -418867, -375043, 886787, 761500, -1151, 547778, -407795, 991149, -136581, 886111, -666716, 440466, -528277, -629295, 14519, -132883, 598657, -54007, -346291, 568122, 363889, 843379, 558748, 535969, -614795, 849357, -894795, -956509, -514315, -143486, 814326, 647489, 329874, -676518, -434211, -34613, 915048, -965897, 833833, 860761, 211040, -648278, 484638, -931756, 307113, 108703, -615147, 16854, 667060, 535449, -147205, 502376, -992072, 886220, -905356, -25757, 731977, -236283, -382345, -720311, 536976, -502291, -619990, -589344, 207284, -925707, -592193, -467890, -630346, 304301, -728491, 468599, -650706, 413051, -836806, -715857, -466948, -608953, -710050, -994435, -478869, 379834, -894242, 801923, -492272, -603803, -313237, -534513, -744912, -531208, 174043, -675062};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques177(){
        Integer[] array = {-412522, -578462, 613944, 778193, -519135, -728791, 423316, -166797, 700572, -654958, 83656, -279463, -122377, -110752, 571093, 439995, -87872, -299212, 247569, 149646, -576608, 376229, -582211, -495301, -633790, 690448, 812378, 13064, 663641, -20933, 498233, -452936, -210251, 713423, 238721, -650630, -553296, -45514, 992567, -818911, -330515, -803624, 295753, -892318, -912449, -757215, 693885, 748501, 678788, -406149, -923127, 566925, 329002, 292606, -478507, 827711, -196582, 452966, 975528, 676352, -85341, 43878, -732495, 49939, -263664, 693872, -749830, -282083, -329720, -893851, -20361, -501962, 313602, 404668, 731267, -172464, 2747, -91259, -437684, 470945, 970162, -349631, 570467, 734718, 728093, -647430, 948978, 360312, 53543, 515763, -900027, -636375, 338772, 835728, -689022, 439292, -892013, -838874, 84210, 24879};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques178(){
        Integer[] array = {-816076, 939179, -152147, -555779, -768348, 92463, 552596, -668091, -1469, -289428, 945282, 965028, -799295, -498289, -508884, 537716, -151126, 748894, -124624, -8119, 12107, 540543, 827577, 312157, -180180, 580603, -101002, -409744, -325831, -336002, 34347, 348735, 315001, 310543, -831683, 150982, 215249, -7388, -575620, 791604, 961843, -360431, 12976, -763190, -345676, -978159, -733998, -110163, -881906, -134184, 395753, 228367, -923553, 846748, -452327, -54574, -359642, 484161, -552737, 791374, -279354, 939262, -371425, -334234, 611161, -923102, -745228, -556509, -662270, -173929, 958250, -904585, 705017, -415899, 481928, 469506, 948279, 524912, 222663, -811120, 234331, 345168, -188268, -481140, 368095, -602107, -139674, 858769, 790510, 769874, 713700, -943831, -325794, -557425, -739974, 402667, 180021, -206219, 207118, -907282};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques179(){
        Integer[] array = {637705, 748751, -689397, -156906, -99176, 899388, 925801, -802661, 847561, 9236, 985187, -665865, -610208, -343431, -800132, 640124, 798466, -208834, 322348, -480400, -2879, 400875, 303081, 942911, -537561, -528386, -855332, -571693, 508201, -196964, -152736, 812175, 106530, 300667, -657457, 976130, 78215, 475122, 736819, -571077, -719366, -518874, -590149, -763420, -152363, -212219, 278982, -127420, -541561, 969609, 757075, 609103, -261414, 144339, 629390, 9382, -880338, -841782, -604494, 230190, -163459, 58615, 762255, 421067, 147801, 667852, 746569, 426263, 102079, 962527, 370385, -430461, 723781, -737178, 673660, -317026, 717391, 946187, -874023, -778506, -310352, 115435, 403816, 676630, -325403, 478327, 645994, -657854, -596602, 854630, 485985, -97746, 909391, -817290, -674076, -989134, -676095, -212743, 527971, 251210};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques180(){
        Integer[] array = {181712, 748388, 112808, 676699, 316818, 199364, -15398, -355009, 567625, 575410, -841518, 521808, 833896, 386746, -203331, 601849, 744888, 161895, 17328, 778370, 764422, -146554, -193640, -111309, 43068, -497958, -577890, -204949, -185966, -941455, 488400, -912069, 370216, -62843, -595749, -673589, 127318, -30699, 552634, 968893, 292040, 649233, -422496, -52927, -90966, -726393, -956577, 884628, 760653, -574003, 897837, 355612, -582006, 367812, -935952, 999086, 353577, 190924, 770264, 731187, -164653, 137725, 491211, 80074, 355063, 319532, 901980, 674896, 201095, 4217, -11730, 584073, 986715, -757524, -83030, -709731, -580927, -356431, 485794, 806706, -104795, -290987, -351688, -882962, -250670, 892398, 71676, -677259, -550673, -649292, 619433, -432996, 17612, 441111, 467986, -774416, -363339, -172912, 895392, -54618};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques181(){
        Integer[] array = {-472836, -722292, -405649, -385266, 331839, 982892, -538965, -698536, -39138, 201622, 436253, 640725, 146313, -108735, 35594, -6808, 135539, 230930, -428778, -15488, 212228, -519535, -304371, -704907, 854869, 790540, 457517, -518714, -27151, -261013, 334451, -546066, -458349, 377600, -835633, -770242, 697776, -104895, -425173, 536812, 748824, -660782, -476533, 204534, -534773, -575405, 947867, 43625, -643018, -204332, -678170, -796543, -774928, -609375, 305540, 1176, 626741, -436515, 440664, 67928, 614846, -32570, 562302, -201819, 710789, -537035, 342725, -667055, -983209, -90802, -267155, -493281, -732869, -746437, -499583, -971501, 566505, -338629, 946720, 592990, -857106, 590099, -51956, 727703, -668250, 527950, 140657, 442686, 619480, -333446, -260407, -257782, -357133, 59326, -828702, -498933, -242250, -332259, -937713, -391052};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques182(){
        Integer[] array = {592020, -362669, 703119, 111984, 588030, -57139, -708152, -736214, 564332, -992214, 615589, 198437, 782155, 341993, 298628, 291458, 894282, -83248, 986162, 27289, 64082, 591223, 811308, -230937, -947914, -421559, 443339, -348359, -374836, -669657, -577878, -797718, 273640, -20066, 238370, -199480, -606224, -465238, -475314, 401655, 166346, -647756, 62647, -759698, 500456, -309601, -894594, 641984, -247813, 920597, 547615, -944080, -567454, 111988, 405363, 814403, -962093, -384953, 334600, -409087, -666209, 447082, 351074, -395690, 667473, -235071, -398511, -351231, -297148, -379317, -22122, -499108, 70314, 533583, -791419, 241197, 33720, 686188, -645167, -614726, 939047, -604094, -377695, -872863, -832975, -519435, -134644, 228690, 568413, 610637, -205444, 273813, 787937, -27926, -921503, 351188, -713764, -877222, -304539, -885520};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques183(){
        Integer[] array = {74301, -312295, -421342, 650362, 381837, -665622, 620211, -3883, 666466, 777986, 180631, -652498, -295472, 817797, 703986, -263242, 928393, -217234, -977531, -330272, 905430, -741267, 759523, 23530, -314282, 346519, -878759, -181163, 705515, 564415, -255788, -398168, -280304, -858064, 718669, 627903, 88121, 810127, 801924, 607141, -415500, 5089, -188233, 241870, 665941, 721294, -547021, 965875, 307885, 316008, 954110, -636579, -561096, -169824, -808830, 314014, -860996, -930549, -742087, -750878, -559086, -401928, 893281, 789807, -388092, 186180, -726064, -321224, 865662, -81772, 13487, -597345, 940145, -962696, 845616, 409459, -487298, -578173, 378845, 27352, -344177, 325366, -375822, 361639, -778513, -534428, 288997, -661597, 538413, 444879, 915102, 565071, -675927, -660672, 79779, -71168, 483904, -259, -604286, -537045};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques184(){
        Integer[] array = {-12646, -920877, -829108, -867379, -429599, 490287, -901860, 931077, 421386, -802187, 466340, -93297, -205082, 259235, 138606, -673828, -93074, -417559, -373154, 872845, 762992, -328744, 894863, 754693, -712267, 138837, 533496, -91817, -640439, -718878, 80604, 736260, 113962, 688481, -248656, 118634, 234741, -434953, -737970, 442088, -78498, -859708, 190682, 585370, 718601, -714100, -157890, -776724, -304885, -408519, 115965, 452121, -203535, -968784, 482416, 911419, -968768, 476196, 894860, 82369, -384741, 659495, 93580, 624550, -302249, 578452, 718878, 110891, -516875, 829008, 528863, -855920, 905487, 137899, 952605, -558381, -347823, -218042, -898964, 458612, 155107, 913583, 629330, 213670, 236789, 615454, 682239, -537303, -781630, 623441, -536050, 761745, 771210, 514889, -204624, -940492, -16424, 56197, -695926, 847694};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques185(){
        Integer[] array = {289881, 946970, 807647, -261253, 922828, 250707, 363183, 432665, -445994, 15554, -698692, -748438, -930203, 433150, 213980, 136206, 754270, 9168, 610619, 338765, 216968, -305000, -846566, 692027, 214838, 109935, 977718, -765820, 530968, -312036, 937, 412930, 69815, 135176, -12911, 984336, -273249, -714640, -62661, 378632, -310332, -985336, 106396, 838029, 574538, -887035, 633684, 569945, 211284, -431806, 404871, 893197, 548009, -560651, -243575, -780212, 344780, -585089, -17078, 820429, 285626, -771744, 46549, 286288, -932380, -168979, -460679, -95007, -477836, 616058, 931593, -161680, 871758, 151614, -690663, 895038, 105892, 638261, -419991, 723134, 108350, -34545, -985063, 262539, -306145, -941155, 591650, -146055, -610332, -864700, 698583, -594233, -556984, -532310, -304363, -416390, -683959, -875427, 321195, -12797};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques186(){
        Integer[] array = {-890719, 805902, 421974, 843809, 172856, 235525, 738571, -227555, 816056, -669449, -134532, 41575, 395226, -408977, 194602, 376456, -887155, -835725, 502441, 973437, -628983, 85219, 834510, -73892, -180996, -909185, -351161, -76206, -771377, 551139, -354897, 683299, 348510, 54705, 956505, -660280, 429678, -747448, -504024, -336474, -730928, -545337, -637243, -835174, -328450, 153861, 378380, -304332, 338894, 769523, 651948, -354110, -593815, -969168, 110451, -892586, -3828, -263616, 275178, 188725, 972108, -767349, 923747, -129700, 999507, -915419, -995955, -892605, 867115, -932978, 472077, -448534, 576420, 224932, -349424, -356012, -347796, 308738, 671565, 443663, -15273, 201931, 32452, 731243, 930303, -457740, -654226, 720828, 220003, 940297, 631148, 842933, -703254, -520949, -525740, 489541, 649807, 348767, 374458, -24728};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques187(){
        Integer[] array = {-305491, -254541, 252143, 360705, -145199, 229723, 921494, -907475, 122059, 789865, 369632, 672522, -659817, -318274, -462756, -55231, 858839, -845805, -716653, 770536, -201121, -220871, -727959, 384019, 462426, 294176, -241786, -786880, -857611, 916553, -565492, 58395, -645848, -251045, 100933, -433863, 677062, -7114, -781452, 899932, 514882, 110129, -30919, 743208, 278321, 560306, 359903, -474495, 585687, -962871, -578136, -900630, 328371, -472047, 13840, 267558, 72436, 230066, 294261, 702347, -651982, -813210, 695192, -68044, 707303, 209582, -646606, 655277, -531898, 751001, -222914, 653210, -321575, -679556, 32091, 618817, -400897, 409264, 700765, 807237, 513979, -296274, -125763, -255499, -793980, 84596, 897014, -75177, -823987, -314352, -351153, -692358, 283651, 198532, -416140, -714825, 487757, -495512, 785765, 531119};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques188(){
        Integer[] array = {671485, -702847, -811638, 175358, 340672, -90018, -529294, 419296, -800363, -382067, 465531, -588937, -293468, -586988, -612843, 545680, -804279, 294563, 736995, 305440, 333632, 506109, -47093, 862018, 507776, 867792, -429491, 934799, -901026, -255044, 129250, 554201, 231407, -841161, -133713, 632015, 324195, -784426, 506877, -702564, 228406, -599418, 331609, 879032, 113794, -562348, -842066, -787864, -97251, 409710, -698986, -91390, 207188, 619595, 557013, -468751, 766428, -489944, -231213, 749340, -869472, -746333, -366141, -26483, -362496, 622426, -413750, -838633, 171875, 660623, -409531, -258138, 564115, -369649, 277567, -218563, -509271, -735597, 733690, 324271, -884347, -499830, -977390, 722202, -860621, 746529, 476756, 520035, 770938, -848749, -22445, -854976, -860071, -45722, -41093, -230977, 121299, 448418, -528057, 456206};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques189(){
        Integer[] array = {57453, 587055, 479247, -301292, 100741, -569072, -348316, 849971, 646561, -165866, 409035, -131111, -294640, -840963, 985819, 570395, -144545, -21469, -903216, -499049, -465473, -623299, -625851, -563383, -543954, -614955, 796752, 76623, -597187, 654297, -495447, -713137, 552472, 316302, 362661, -15346, 911648, -323348, 643874, -301037, -418963, -93653, 838214, -166893, 765809, -281456, 833008, -73249, -495224, -666330, -853321, -846893, -940094, 658205, -334452, -536030, -372252, -254381, 351225, -136266, 140886, -895683, 660234, 653599, 181089, -464286, -393798, 512165, 439133, 83310, 697881, -97020, 363026, 381287, -205666, 154240, -354177, 67400, 976458, 496169, -745102, -629808, -32880, 903783, 210798, 359553, -609993, 525850, 126574, 192369, -776947, -237289, -534618, -244219, -134255, -167452, 638096, 63731, 950946, -560301};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques190(){
        Integer[] array = {-905228, 17514, 85470, -76483, -890233, 970746, 416887, 157790, -533673, 773742, 128811, 976665, -46221, 878613, -415858, 967424, 211583, -657497, 392167, -365391, 346741, 334678, -810127, -367668, 489689, -493081, -465845, -583446, -555388, -575018, -493777, 579119, -987048, 271748, 22757, 441746, 808587, 470425, -177254, 669466, -567161, 9615, 10674, 208768, -975922, -698071, 454539, -750881, -304392, -154847, -526472, -998894, -483818, -797983, -132248, 387343, 652597, 57073, -250013, -563518, 77294, -84291, -720233, -346394, 422063, -509181, 363559, -844701, -881261, 880321, -693640, 19602, 786271, 484271, -160436, 455459, -360839, 740080, 361336, 756495, 451652, 467416, 791790, -354078, -705062, -587602, 651625, 805575, -996190, 848422, -640993, -232047, 606310, 982816, -91019, -194208, 415234, -625406, 83442, 399649};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques191(){
        Integer[] array = {-366885, 721921, 988460, -366674, -221093, -195454, 233516, -261147, 349138, 400899, 490345, 165861, -461254, 68628, -103562, 543892, -736543, -515689, 8427, 868176, -461895, -44002, 723786, -906074, 290677, -794925, 989920, 242871, -816942, -78484, -348805, 423645, 622867, 174082, 200962, -236956, 587725, -186032, 765439, 530195, 201194, -770694, -294163, 485182, -883434, -101509, 863071, -988882, -32711, 241690, 785721, 457685, -666509, 564369, 816823, 811382, 959436, -524142, 227151, 402614, 674945, -344492, -32302, 381437, 512870, -317539, 744705, -431758, -738427, -248834, -933207, 376638, -311560, 529926, 801969, 443331, 879784, -414811, -691545, -67845, -374634, -563184, 893917, -660285, -790031, 33027, -385709, 480240, -102618, 862053, 557313, -913701, -530655, -286526, -856937, -416140, 985650, 817739, -949440, 740005};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques192(){
        Integer[] array = {221827, 827042, -335394, 953116, 342687, -450696, -456224, 572635, -796622, 775921, 594857, 488729, -313920, 563939, -905112, 390918, 609014, 865702, 547235, 870077, -748409, 739731, -262492, -274782, -24246, 445038, 654112, 132890, -781379, 16765, 473068, -360766, -543046, 108011, -393655, -658349, 370814, 579428, -461346, -611760, -891610, -690934, -209300, 994476, -211036, 195954, -608926, -803381, -271596, 766297, 952285, 529909, -63567, -685444, 307168, 136442, -16782, 13869, 250218, 954112, -166194, -564470, -348654, -628965, -146735, -661035, 627977, 203086, -342528, -39024, 270234, -812921, -392223, -892106, -644812, 74856, -48615, -657405, 154786, -401733, 404664, -799898, -963593, -402572, 541060, 582748, -397257, 221379, -794384, 548652, -544310, 816470, 792852, -58510, -949691, 203653, -644303, -152866, -685480, 912809};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques193(){
        Integer[] array = {-203400, 32661, 536499, -583889, -816983, -440057, -815750, 741436, 779324, 153396, 214107, -717017, 829670, 468340, -347331, -360474, 94005, -83510, -240399, 16295, -560801, 146769, 792859, -478203, 103480, 595184, 76169, -498549, -943887, 242577, 182953, 958134, -997577, 286951, 577816, 544611, 188971, 821608, 479044, 813710, 513296, -107568, -466787, -468031, 968081, -494820, 824663, 927040, -353721, 172958, 748438, -275183, -640644, -197016, -9364, 183780, 948216, 565322, -516973, -752838, -518589, -546464, 708881, -564526, -611818, 446469, 675127, -674808, -234485, -861285, 1859, -121100, -739290, -213088, 197440, -137352, 868804, 16062, 69978, -695900, -63044, 653727, 556079, -286628, -307692, -962042, 22474, -971019, -448726, -589698, 27381, -871618, 625865, -778430, -873916, 681521, 933613, 239761, -190371, 933867};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques194(){
        Integer[] array = {288270, 901960, -978095, 628581, 48418, 888498, 331732, -42373, 351736, -311299, -555342, -734704, 229613, 44089, 108133, 217571, 964021, 773496, -907117, -116230, -664755, 850740, 55754, -156585, -154227, -381431, -183934, -465921, -545879, 297707, -180944, -758125, -403596, -226695, 742308, -875953, 416912, 149833, -111041, -194237, 674919, -574472, 91417, -613880, -275046, 942742, -151109, 240383, 421696, 562243, -464546, 519613, -79127, -436181, 363949, 289939, 468882, -626397, 413869, 211026, 857262, -408897, -295277, -441812, -623833, 363836, 813963, -237878, 11856, -742015, -615734, -579001, 174476, -755711, -740485, 426285, 995930, -543034, 71220, 410972, 225844, 909601, 397176, -112990, 335096, 100769, -323358, -906618, -3567, -803856, 160765, 849726, -679626, -591918, 647064, 320343, -243490, -877789, 166861, 935738};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques195(){
        Integer[] array = {213498, -575693, 521324, -361563, -112036, -856379, 181234, 858057, -740143, 722068, -966387, 778082, 850393, 571359, -899511, 731108, 126925, -357184, 536006, 962335, 917287, -691129, 598569, 330551, 898244, -615307, 40365, -698252, 640053, 468418, 933649, -161405, 933008, 898851, -252995, 801753, -283797, -976103, 118732, 627096, 1867, 125533, -475384, -364651, 655051, -959481, -979930, 979738, -897996, 447405, -341820, 693665, -250843, 464579, 944314, -357442, 71892, 62570, 827044, -575077, 917374, 235480, 629528, 880396, 745709, -418948, -807400, -443742, -348774, -251649, -973119, -452045, -855963, -565799, -628602, -716513, -483883, 567528, -339533, 749885, -33410, -359408, 925003, 204069, 953318, 132877, -335683, -512077, 426868, 581654, 832434, -491015, -546417, 333117, -323746, 626673, 405269, 526204, 692848, -308015};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques196(){
        Integer[] array = {-607941, 838354, 593510, -499694, -146262, -167837, -723951, 34335, 220211, -814200, -233809, 459731, 487342, -869040, 26033, 642537, 116874, -77277, -126598, 296497, -642232, -963022, -411443, 605297, 150703, 502850, 280495, 424138, 365481, -297052, -419575, -220869, 784198, -417260, 939448, 73475, 635986, -862348, -54365, 154777, -426364, 210537, 150333, -774783, 222827, 61544, -114290, -647239, -445315, -433548, -407515, 80809, 656902, -151493, -778366, 316577, -584353, -973768, -91614, -274663, -687648, -664966, 199806, -302838, -28090, 329642, -21537, -168837, -168108, 837791, -43413, -728820, -432374, 392127, -881457, -877146, 724760, 878095, -273192, -608284, -195370, -469582, 856721, 196084, -673577, 131860, 145831, 941066, -531849, 981763, -440904, -3512, 796410, 70792, 515740, 765170, 777158, 321824, 6927, -875308};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques197(){
        Integer[] array = {859143, 478735, -354545, 958473, 460292, 916822, -525943, -505742, -561907, -438854, -808636, -263051, -168617, 128168, -915363, 666245, -292712, 786052, -247634, 249374, -304933, 918328, -352451, 323553, 977277, 328075, -332897, 804806, 142194, -349685, 64336, -17627, 216174, -172775, -245657, 972030, 609810, -912249, -175007, -72907, -542404, 251196, 212567, 802064, 127768, -978554, 71684, -444379, 932402, -879764, 699414, -577182, 187602, -264350, 238341, -581835, -973179, -920661, -287985, 657136, -929201, -427849, -689462, -82135, -999427, -180295, -670202, -731560, -661225, -905009, 143952, 217427, -657768, 908175, -383080, 608254, 655134, -568544, -852800, 651611, 787126, 706185, 875686, 493664, -157623, -557813, -574745, 514529, 510079, 698895, -540365, -960437, -923846, -735286, 97220, -423951, 474493, 171615, -844954, -500681};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques198(){
        Integer[] array = {229265, -501697, 936161, -65455, -563349, 695536, -634920, -881344, -270797, 949323, 140510, 917670, -195341, 763373, 14044, 773895, 94604, 859153, -843102, -128373, 754051, -371573, -477395, -690714, -453309, 881040, 58919, 751277, 322003, 906723, -358832, -335782, -613974, -16706, 896120, -26927, -820724, 628773, 774520, 153915, 242684, 396149, -744092, -252464, -765637, 806829, -109477, -290170, -72192, 5771, 554695, 567129, 815048, 284250, -319611, -685290, -953753, -151075, -637379, 898911, -627761, 68589, -799605, -563996, 853828, -389510, 607993, -347224, 252298, 634995, 557381, 620969, -100815, -330833, 115518, -18446, 742915, 386659, 448940, -846703, 368425, 695272, 171149, -874811, -165223, -857320, 124692, -434803, 441389, 726298, -552325, -961662, -361660, 809169, -537451, -169227, -101225, 217039, 336545, 747701};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques199(){
        Integer[] array = {695495, 877894, -753131, -353232, 57745, 61731, 534608, 992368, -528789, 842611, -748675, -414838, 638077, 101599, -159837, -320582, 362380, 626999, 503936, -612765, 125747, 504149, 953087, -411616, -662285, -849605, -62661, 259271, 546620, -741625, 202975, 515590, -267002, -546055, -134425, 591773, -896334, 707973, -338784, -344854, -138077, -362021, 762455, -469773, -432799, 117700, 554819, -532881, 955520, 495518, -903865, -881815, 614505, 939007, -236393, 971406, -753242, 773363, -472683, -138429, -665491, 790495, 468764, 665113, -179836, -820861, 987270, -225117, 396936, -659284, -126951, 680159, -428093, -83709, -75522, 898069, -994273, -408062, -642670, 137085, 683192, 854944, -528697, 466023, 99978, -66785, 886461, -386856, 172111, 436624, -240548, -600230, -191307, -449768, -902649, 750436, 309783, 197066, -521664, 349479};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques200(){
        Integer[] array = {-504586, -199016, -330569, -430029, -495117, 508379, 460042, -331788, 311733, 646157, 226712, -377540, 740321, -946966, 569550, -688582, -354783, 855031, 24062, 116130, 733071, -692463, 925555, -859759, -540675, 512685, 781885, -895695, -440298, -616432, 725751, -19629, -366537, -57297, -758635, -724115, 44975, 219001, -19403, -413901, 76364, 870008, -536432, -794340, -153071, 345069, 197717, -63089, 863210, 30063, 642001, 486210, -384014, 799713, -604993, -875921, -687157, 292943, -687444, -936524, -644745, 460969, 549626, 443025, -134049, 622408, 770748, 732339, 646933, -711871, 43152, 239832, -251647, 939351, 42705, 523386, 606490, -445872, -34188, 597737, -447672, -479713, 333862, 129278, -253397, -487432, 990492, -910196, 627953, 584132, -654282, -765133, 617605, -567790, 701390, 686524, 374559, -421808, 371559, 335281};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques201(){
        Integer[] array = {841650, -379085, -358946, -674913, -757355, -496259, 127918, -18161, -502528, -902416, -957452, -313515, -598966, -707234, -403479, 524843, -374355, 113372, -451572, 304416, -310391, -575448, 817162, 378912, 63812, -970772, -3807, 543898, -606099, 514001, -302652, 816146, -402467, -774080, 292072, 310639, 244672, -894029, 693529, 567582, 372694, 378287, -898669, 123158, 115811, 571676, 209094, -480367, 438281, -236013, 420372, 572277, 809307, 447312, 287899, -327134, -412036, 456617, -383147, -834975, -740623, -390444, -944803, 408441, 751620, 922918, 428401, 457899, 882885, -990590, -825158, -758265, 182904, -811792, -834870, 279405, -437792, 70057, -936512, -573898, -176583, 605558, 131187, -501509, 407324, 528061, -615351, 729155, 254776, 500809, 141796, 931056, -392981, 319149, -556046, 627915, -592767, -532845, -731512, -926415};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques202(){
        Integer[] array = {-68854, -359438, -251345, 602948, -604555, 107091, -848809, 914090, 477966, -794549, -480690, -120054, 939138, -662386, 961039, 464621, -661383, -192778, -806057, 277848, 913287, 300694, 330246, 103393, -584542, 51744, 678132, 956802, 631185, 34367, -643075, 290612, 932509, -240529, -408974, 278113, 229131, 284194, 260341, -793207, -252890, 762377, 941376, 338195, 378731, 550318, -23273, 926236, -178176, 782299, 114372, 228296, -586542, -228260, 595051, -274399, 719603, 450773, 843298, 260365, -839062, 522437, -159097, 731284, -515861, -575998, 658017, -71766, 21580, -573130, -188737, -299480, 840532, -682714, 676408, 96643, -595227, -116019, -760682, -349662, 287228, -205562, -818880, -163494, -748290, 805181, 747569, -570035, 243700, 626427, -428752, 426424, -868950, -865538, -200650, 263918, 522225, 162829, -716171, -512220};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques203(){
        Integer[] array = {-535569, 358767, 917013, -967123, 47688, -952228, -53388, -422542, -261671, -329216, 37596, 618580, 104727, -730245, -303701, 583135, -98662, 791259, 562329, -629516, -877067, -350308, -727796, -997212, -173543, -622451, -421138, 928090, 173641, 662000, -517595, -580958, -542554, 57790, 166276, -132821, -467205, -572230, -327010, -321022, -625791, -421901, -63481, -760364, -858361, -96689, -79716, 624741, 823255, 60023, 62146, 754646, 816823, 9447, 113574, -269260, 704736, 991764, 339985, 797119, 917693, 369452, 954502, -117073, 429644, -700682, -520286, 456443, 568575, 592369, -523360, 727759, -478514, 553206, 115353, 425014, 940162, 501952, 439361, 712626, -231347, -610983, 519162, 244134, -322307, 424834, 860711, -588037, 409407, 204791, -62699, 179392, -416973, 993192, -897522, -839895, -635653, 529753, 126066, 847871};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques204(){
        Integer[] array = {487026, -515567, -708019, -525054, 333510, 805333, -608473, -97527, 537940, -475776, 447330, 597699, -395784, 466441, 792564, 599127, -670513, 591690, -79539, 406067, -786456, -519271, -160380, 595224, -252115, -712538, -456782, -838471, 303598, 700662, 453671, -646415, -785089, 488373, 455190, 803369, -486467, 162914, 570464, -682267, 340572, 962932, 851964, -685062, -600624, -964431, 57422, -696263, 763511, -446914, -634283, 163244, 771048, 800380, 103232, -956157, 9488, -434477, 359348, 108353, 342895, -657828, 542378, -928346, -537349, -230671, -457860, -560094, -264786, 281446, 707735, -689550, -291957, 166883, 167373, -270666, 15888, 523188, -436684, -740259, 120695, 907080, 949325, -869327, 974867, -375498, -984923, -941895, -581687, 416753, -63265, 622930, 253988, -641795, 57597, 95472, 37359, -14291, 442657, -482614};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques205(){
        Integer[] array = {-822635, 180284, -988639, 386365, -132604, 45046, -328068, -580427, 225359, -460867, -683457, 283856, -952759, -124361, 829081, 740803, -135733, -662814, -429631, -866019, -780729, 879942, 484480, -171592, 293626, 915851, 873780, -830276, -825141, 952673, 188969, 750163, 253618, 587301, 519217, -783696, -648917, -561743, -993256, 884917, 262250, 608581, 72312, 452756, 278286, -941708, -458228, -159968, -642131, 569204, 871117, 566608, -21002, 658181, -46812, 922110, 330702, 625583, -719983, -111806, 549932, -950830, 295511, 771057, -846234, -861730, 523185, 113648, 993127, -827241, -943074, 707701, -3744, -231563, -124703, 548847, 143045, 90635, -639734, -742891, -177459, 320909, -973213, 20566, 213438, -795584, -99248, 997525, 401832, -77954, -976278, -622540, 574227, -509614, -811542, 856007, 676370, 727916, -781594, 718475};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques206(){
        Integer[] array = {-479358, 438117, -364068, 997702, -924688, 908687, 904106, -220537, -163049, -516581, -425434, -838877, 216827, 598630, 536009, 845106, 51727, 840521, 652467, -200585, 785954, -799144, -834666, 532983, -120931, 103080, 246976, -888073, 835054, 764606, -286155, -778361, 178598, -454673, -339888, -162087, 288283, 846326, -700002, -666604, -644045, -753742, 230141, 154794, 687807, -557043, -490596, 741685, 16651, -580297, 324108, 826323, 536383, -968143, -403104, 701220, 982684, 708882, -989887, -638148, 867025, -543495, -984765, 526923, -538972, 428783, -815151, -55646, -492089, 174639, -434833, -424271, 788600, -420859, 199701, 570597, -739463, 562332, 435609, 11338, 186637, 767551, 327718, 697214, 30670, -29814, -608699, 484623, -247601, -616797, 307407, -818633, -230712, -558099, -553332, 974388, -962546, -450641, 262743, 20457};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques207(){
        Integer[] array = {-430995, 541355, 258495, 269413, 130414, 247625, 488838, 267533, -545809, -881336, -785556, 45299, -511879, 902243, -386259, -801556, 573711, 122190, 333757, -668615, 973463, 497016, 244491, 636542, -708062, -7333, -643506, 994363, -538746, -690914, 910309, -366041, 895834, -734717, 9964, -154918, -601095, 138752, 567226, -49972, 523898, 434133, 763132, 308820, 1291, 991693, 523303, 292751, -967016, -456100, 134660, -374839, -25667, 828619, -436052, -488126, -455173, -166033, -797742, -634235, -114444, -626903, -459688, 309518, 918839, -388501, -404729, 187984, -441541, -520850, 326754, 71793, -809074, 76630, -223955, -710503, -879358, -9229, -468537, -760571, 180910, 557478, -918629, 665969, -730691, -213975, 918445, -964635, -164932, -693568, -688710, -577046, -940547, 298289, -916593, -806787, -638192, -939836, 114221, 503435};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques208(){
        Integer[] array = {-876268, 810761, -205881, -583183, -182889, 448190, 922905, -257305, 495293, -214303, -76114, -334032, 123146, 94934, 972763, -247859, -564069, 47, -239296, -791739, -981582, 677809, -791401, -608579, 586061, 101857, -690852, -905217, 663240, -802657, 251350, 628563, 314634, 276567, -763806, -795382, 377855, -4268, -383500, 233846, 559182, -4480, 561652, 534718, -276955, -201252, 870766, 91502, -646756, -111370, 963812, -152676, 88847, -382286, 260312, 316060, 488708, -762551, -738173, -535302, 879731, -156020, 28823, -524670, 53534, 856139, -807034, 834752, 238289, 363516, -568849, 147621, -721283, 487027, -781859, 862926, 34609, -761482, 420586, 481736, 20543, -338560, 206799, 570332, 572066, -157866, 376354, -761398, 597475, 652541, -978767, 963546, 942946, -441706, 749593, -715084, 261261, 697082, 477252, 539463};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques209(){
        Integer[] array = {393174, -888799, -132571, -1489, -662699, -551201, 323032, 908176, -899175, 820367, 238933, -401543, 895005, 571764, 403784, -504698, -605051, -339455, 29505, -232425, 319698, 341051, -995878, -80996, -343153, 69832, -606051, -908367, 458161, 484698, -146043, 456586, 599632, -28233, 426018, -230481, -506287, -968716, 211870, 197555, -54134, 659767, 309471, 27618, -183728, -637002, -183004, 381391, 320951, -199007, 638930, 852473, -314423, 425455, 404114, 460681, 502136, -714153, 411149, 924166, 202860, 629644, -512331, 778761, -436795, 526626, -123181, -825902, 456752, -376836, 522958, 221630, 757952, 356629, 578062, -829654, 71739, -525497, -181713, 334578, 437258, 522997, -748750, 843919, -840330, -577372, -437717, -62836, -46653, -929721, -970287, -84180, 267823, -531289, 384879, -230261, -382595, 760381, 590845, 692700};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques210(){
        Integer[] array = {37734, -756068, 774876, -282048, -461949, 92161, 318211, -565521, 445713, 394484, 289674, 267922, -247692, 91944, 740789, 389823, -20451, 166612, 300770, 538708, -8805, -614996, 728843, -198702, 11951, 329384, 748963, -716040, -2859, 368823, -742104, -610653, 615439, 478603, 434953, 680038, -565627, -813510, -388932, 945204, 416159, -611567, 468980, 77532, -294010, -931460, -9212, 381151, -991511, 48732, 307841, -687693, 205792, -397643, 140359, -637377, -421254, -901077, -258527, -735672, -229954, -546440, 626286, -414159, 787245, -548367, -638619, 725761, 998542, -967446, 758121, -171376, 34911, 784508, -771207, 369953, 522564, -236180, -932816, -612158, -821355, -800156, -118406, -166330, 861721, -752560, 252201, -825133, -181044, -866414, -222089, 422631, 960849, -784259, -216759, -146798, 36496, -599967, 938550, 798883};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques211(){
        Integer[] array = {-842236, -782834, -517881, -86116, 548398, 387903, 444509, 928195, 496613, 495214, -722693, -7023, -568871, -739619, 275032, 363254, -690669, 892674, 704247, 872369, -286976, 907904, 89385, 837725, 478364, 19679, 507485, -203542, 79059, 559230, -329051, 122308, -216896, -186256, 769560, -791602, -227245, 194493, -238244, -566649, 412369, -94995, 762062, -612697, -812741, 144933, -837398, -371617, 332095, 982558, -1870, -672532, 368504, 587051, 65401, -846238, -961718, 839310, -743513, 377991, -864474, 919586, -324145, -369484, 486055, 176107, -713320, 756166, -548695, -24597, 628283, -628779, -860067, -22882, -985928, 969249, 469036, -618969, -799795, 711214, -106777, 387656, 205949, 15934, 202312, 341991, -332440, 40715, 957767, -645760, -386002, 108764, 858233, 661638, 756902, -105037, -809319, -457467, -810299, 6499};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques212(){
        Integer[] array = {530190, -549964, 862974, 358640, -367811, 993425, 741797, 717818, 745743, 719958, 954783, 80527, -958083, 686175, -51697, 60726, 461029, -272705, -275019, 98278, -22258, 801780, -625869, 825798, -376618, -277873, -487923, 209359, -99405, -231207, -371745, -825964, 331937, -25967, 886077, -62303, 999017, 328787, -451939, -445861, -234079, -241208, -665047, -258403, 933714, 916821, -90098, -384737, -682220, -344486, -794857, -837264, 359451, 391841, 904594, -705451, 672350, -775366, -284636, -136767, 813775, 143296, 856611, 341278, 657468, -943298, 158165, 361206, -386478, -22259, 965880, -809453, -199641, -18444, -429027, 285585, 514129, -414962, 820405, -886892, -562877, 483434, -811224, -35523, -525365, -613143, -711557, -862384, -798899, -659629, -279510, -302511, 655436, 49150, 843590, -393572, 763149, 254176, 823566, -226386};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques213(){
        Integer[] array = {620626, -637545, -333560, 715924, -858627, -814688, -79345, 362712, -546102, -971958, -462740, -367788, -652593, -438683, -627067, 987482, 303400, -442967, 423986, 904722, -170947, 825643, 489406, -537142, -487302, -555307, 730479, -220795, -515846, 174678, -489502, 907528, 869596, -288036, -663019, -121810, -19045, -707928, 167761, -126566, 951406, 874899, 18501, -102424, -743094, -201627, -932902, -181907, -956664, -815248, -481073, -825588, -462233, -711436, -998344, -588905, -313060, 481870, -746027, -374660, -73442, 817589, 924031, -242129, 636880, -266754, 37443, -434202, -147076, 918010, 597312, -156391, 245887, 184145, 539040, 665289, 506825, 42356, -649160, -767634, -395870, -656324, 753880, -718738, -439903, -395272, 449500, 214720, 77189, -12932, -750575, 498002, 340129, -109241, 605134, -350081, 939807, -347898, 960534, -172510};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques214(){
        Integer[] array = {711730, -558918, 842183, 74237, -300832, 975559, -574385, 250823, -456936, -443708, -598769, 150574, 573100, 581394, 568541, -264732, -4426, 904268, 17227, 325167, -716785, -905959, 582085, 139077, 124277, 684824, -742695, 63644, 746148, -997251, -40816, -393889, -316926, 843789, -956544, -232741, 742991, -520170, 760585, -555677, -388639, -92626, 276555, -799539, 318524, 798151, 55045, -459389, -427034, -663622, -214425, -170865, 235728, -923175, 508285, 58646, -195544, 744420, -330336, -19823, -612810, 159750, 648678, -53260, -209423, 100828, 624296, -278915, 354162, 130372, 648622, -285746, 103225, 978063, 885647, 437386, -914057, -704059, 609375, 538369, -276409, -905983, 134944, -964912, -34936, -460656, -266198, 380164, -521890, 347213, -268188, -846783, -868058, 164868, 728033, -241409, -685302, 979605, 595929, 170445};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques215(){
        Integer[] array = {524107, -934009, -72149, -967597, 497944, -360759, 469965, 32122, 415605, 827170, -216340, 489592, 446696, -131829, -694714, -465985, -144993, -505364, 188747, 355516, -17527, 110203, 194528, -958932, -432163, 969674, -965400, 688397, -981342, 533567, 261062, 124856, 714697, 448032, -397768, -634534, -544267, 166248, -264769, -384855, 240144, 311458, 351270, 563253, 730836, 495377, 342599, -338057, 22617, -434949, -44024, -168744, 116837, 669046, 95488, 425008, 467099, -682445, 54660, -698498, -483317, -806891, 358316, -125600, 364476, 475333, 475470, 610879, 187570, -123184, -64543, 827395, 363393, 246322, -890305, -219650, 525706, 386396, 523063, 791493, -99042, -483631, -261426, -794122, 589356, -878129, -382499, 170860, -261441, -764725, 671955, -275323, -163768, 376894, 583650, -147734, 388646, 108653, -445958, 185509};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques216(){
        Integer[] array = {-91314, -284296, -391816, 665006, 695019, 269210, -592611, -903981, -916909, 364841, -690056, -695696, -935182, -512509, -848126, -796061, -30355, -400082, -179316, -830145, -823894, -181415, 26460, -122111, 984151, 170994, -402288, 50294, -776726, -655493, 280795, 762731, 267154, -972064, 700531, 282149, -429167, 985557, -34482, -177825, 603440, -885564, -347749, 718774, 237297, -772509, -968632, 838282, -169203, 226805, 497335, 343722, -678102, -387416, 327430, -344717, 710546, 534265, -262382, -846018, -937150, 279930, 123023, 565007, 632633, -11006, -294080, -112233, -28304, 826350, 543943, 474190, 845935, 257046, 431430, 842756, 635417, 486818, -385814, 707202, 175868, -384115, -652653, -902668, -243306, -122551, 926501, -638888, 211457, -907720, -26387, -760350, -739789, 850088, 430077, -184619, -783818, 480940, -485588, -487023};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques217(){
        Integer[] array = {-703811, 249471, 362758, 946175, 342561, 252125, -792242, -919069, -185157, 175321, -115788, -840232, 233636, 619746, -194579, 96408, 510279, 200743, 372014, -402145, -707511, -131128, 277287, 147409, -489722, 1313, -768406, -876585, -558386, 965167, 236601, -276989, 96716, -890990, 792770, -954860, 855907, 505956, 492569, 901032, -716979, 529977, 299146, 73153, 911004, 247290, 503664, -264951, -441509, 455416, 756187, 879729, 928294, -851566, -135164, -31850, -196103, 695634, -843756, 561204, -175238, 969155, 375326, -376336, -29475, 870976, -42158, -67728, -385832, 942512, 301150, -752509, 145074, -916824, 383049, 305258, -571292, -94791, 881633, -45807, -831662, 990726, 771528, 878829, -969606, 493393, -502151, -865190, 215640, 560442, 345011, -708175, -433198, -398019, -342673, -68064, -13853, 577186, -115383, 46968};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques218(){
        Integer[] array = {-460254, -641320, -975556, -133050, 322681, 628270, -892972, -895566, 485944, 678294, 345168, -753737, 294014, -701730, 627079, -777799, -932044, 36220, -439319, -397726, -902148, 923498, -124088, -813252, -430392, 447022, -175719, -206629, 905839, -517145, 718239, -51449, 402122, -913886, -786449, 167587, 643263, 695498, -530603, 535730, -272754, 406551, 474487, 938493, -294922, 232050, -656657, -570423, 510980, -340692, -203455, -340387, 204582, -38599, -630167, 4520, 199114, -85472, -212838, 491547, -813398, 997082, -964615, 265862, 48412, 558436, -545615, -578886, 361039, -915926, 818219, -313791, -913084, 779556, 207149, 61868, 712900, -61558, -506214, 472771, 580245, -416373, 133198, 262451, -654380, 641059, -251055, -808981, 370695, 809738, 740676, 66133, -540087, -351854, -943334, -403663, -184974, -715613, 959885, 755866};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques219(){
        Integer[] array = {-544551, 744314, -908973, 187091, 558125, -245803, 385408, 800134, 289159, -924585, -435013, -273869, -690726, -605762, -677027, 364431, -935897, 979154, 535946, 672444, -741674, -167450, 46823, -857675, -674113, 14502, -245826, -754394, 657012, -533856, 529322, 707010, -176449, 93921, 333769, 998088, -221497, 695440, 630623, 829299, -479164, 467205, -78518, 74656, 779553, -963595, 790041, -1571, -612127, 610841, 407151, 618251, -9488, -610371, 943423, -102049, -522905, 539661, -161219, 935629, 192316, 824792, 626772, -345681, 238485, 991126, 297514, 730793, 976483, -649866, -372118, -780665, -218216, 616972, 876041, -624236, -468121, 67246, 192663, -521315, -31117, 20919, 139348, -308673, 295188, -837899, 105695, -434304, 117645, 32128, 269083, -264855, 451655, 355690, 529598, 153694, 831421, -321265, 473821, -319704};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques220(){
        Integer[] array = {-739214, -169811, 447941, 711531, -601657, -544241, -810621, -28881, 570700, 494689, -309332, -167255, -763987, 417500, -180434, -613653, 118582, 313060, -320709, 621733, 621555, -73323, 327747, -625206, 762666, 679645, -871195, 733156, -19188, 624063, 635955, 922499, 97104, -714160, -469023, 14659, 724619, -744841, -543136, -212008, -954325, 398324, -790421, -762481, -405472, -912491, -210512, 580750, -688696, 396981, 902040, -603663, 807414, 35892, 101398, -57788, 28037, -119600, 694392, 85739, -210165, -343952, 60754, 471180, -878063, 957496, 376373, -365513, 619561, -152705, -388289, -627759, -679918, 745072, 952983, 61693, 788979, -491365, -385313, 536301, 745058, -589359, -995347, -629947, -572762, -633838, 420943, -529253, -950845, -371015, -107291, -875642, 772480, -852342, -72339, 349220, 944460, -493119, 70055, 829063};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques221(){
        Integer[] array = {613455, -661616, 117255, -901713, 143649, 484411, -557796, -536754, -900860, -580687, 418493, 526825, -55319, 675119, -573986, -507806, -723561, 533994, 120129, -393012, -280553, 257333, 89842, -765591, 605397, -156726, 432518, 9994, 627470, 668100, -69772, -858524, 737407, -488899, -924030, -548953, -263923, -534303, -603690, 864587, -941051, -925012, 986153, -152856, 527026, -336101, -352305, -561624, 55200, -251628, -314810, -736157, 113784, 184825, 474165, -450615, -964836, -377017, -796946, 387303, -858650, 772082, 388419, -204160, 352887, 447784, 325666, -609355, 959248, 783741, -380870, -175045, 697246, -216193, 402086, -131193, -436769, 537485, -847875, -955883, -685744, 949873, -162890, -296952, 301145, 826139, 312438, -546777, 259523, -717062, 904163, 594113, 88372, -444207, 74576, -693540, -780902, -688901, 56419, -205776};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques222(){
        Integer[] array = {-39337, -421182, 943276, -195160, 134057, 9443, 666160, -851039, 226724, -543340, 544842, -684150, 686247, -643154, -830767, -18347, -791334, 282435, 856846, -886558, 756060, 824919, 90950, -155792, -227124, -452261, 131710, -445964, 838974, 426553, -934545, -719495, -32885, -844058, 865636, 801624, -401059, 811138, -622421, -375095, 456220, -689394, 63977, 386360, -819777, -932163, 124692, 612831, 955244, 658988, -180313, -605035, -938782, -262235, 230516, 853505, 610152, -279170, 245084, -433239, -42201, -876808, 281600, -833870, -257759, 825514, 707002, -521852, 512791, 279143, 373449, -695988, -243386, -307348, -137304, 456974, 232576, -895470, -694408, -593971, 118529, -253646, -640332, 202655, -970711, 923005, 298334, 113392, -189686, 399578, 539922, -775948, -368370, 792960, -250571, -329777, -204461, 706591, -661682, -85121};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques223(){
        Integer[] array = {-208645, 189929, -97569, 263669, 420036, -604036, -268720, -695582, -728467, 97489, 555386, -571964, 394733, 64472, 327710, -240583, -491429, 87814, 25041, 704598, -520631, -121601, -412191, -228457, 820613, 701311, -685862, -342773, 250974, 804739, -201779, -565086, 674537, -216970, 317764, -884590, -804615, -214582, 388305, 935845, -617232, -305418, -265037, 864097, 859078, 575961, -440684, -684887, -632462, -969906, -263194, -405922, 486577, -254962, -63784, 137800, 747802, 107920, -811743, 20727, -605622, 344891, 411630, 226667, 672909, -486998, -678547, 262052, 827102, 188112, 153339, 46033, -956435, -754003, 820551, -20409, 928326, 261456, -871169, 884819, 514299, -689697, 110692, -3849, 118211, -679768, 815718, 946936, 444698, -983536, -718233, -941903, 316299, 745111, -231951, -104382, 197199, 262031, 306962, 421835};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques224(){
        Integer[] array = {352877, 194435, 152981, -833610, 958971, 890609, 636791, -15852, 613339, 735681, -756502, 341988, 978840, 382283, -414584, 987684, 924330, -593140, -293127, 150015, -526501, 424165, 661659, 242488, 547564, 623344, -200007, -715048, 963275, -148518, 401470, 492396, -298124, 174093, 907922, 955973, -522885, -408909, 828244, 541063, 497739, 985799, 767113, 849263, -469080, 962930, -479981, 935871, -688529, 507145, -12170, -745182, -364537, -175580, -529820, -720514, 957815, -649775, 481672, 63653, 660952, 453006, 179752, 80384, -284127, 363263, 603535, -325443, 223010, 896340, 433738, 510969, -900236, 518486, 653308, 254069, -587570, 866499, 551462, 945524, -43406, -86461, -832002, -15941, -767475, 148122, 47326, -534279, -997, 127863, 374507, 861839, 364144, 328554, 910822, 23932, 52890, -659757, -752840, 92708};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques225(){
        Integer[] array = {827927, 188966, -562395, -337641, 656718, -202011, 647108, 732958, -141832, 323599, -941725, 57934, 231482, 55093, -935976, 85974, -859222, -411257, -554283, 110739, 164098, -576527, 472206, -39444, 282717, 913588, -820170, -732171, 521330, -934027, 760850, -465280, 730041, 220966, -430622, -474022, -641000, -153790, 288457, 632176, -984687, -475427, 575946, 928190, -625379, -169879, -654027, 984529, 367857, 470872, 561829, -809285, 787205, 825057, -445835, 662615, 867325, -676678, -789233, 987402, 144885, 173952, -70555, 448292, -758947, -386405, -328203, -179472, 494606, -597584, 764860, -452964, -771680, -993063, 475859, 789425, -236482, 959639, -823688, 927080, -51780, -789253, 550397, 194945, 156932, 504770, -659264, 287946, -218461, -84422, 130050, -261629, -118680, 3904, -195031, 306339, 34703, -117024, -586262, 219228};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques226(){
        Integer[] array = {491578, -726194, 622555, 261509, 957625, -843201, -669160, -170152, 243358, -31945, 402027, -926736, -70059, 817605, 854956, 128577, 55079, 948848, -788843, -786061, 63647, -627477, -339690, -305884, -209673, 386208, 402731, 476824, 525915, -655006, 836127, -886953, -891205, 929230, 933943, 354846, 652933, -436075, 336929, -533787, -480559, 565152, -378272, -259391, -917331, -936656, 229657, -379936, 760399, 80928, 641577, -808013, 361674, 500611, -147627, -894926, 785545, -940989, -574360, 307450, -399188, 530983, -364733, 433090, 136157, -676630, 176108, 201509, -913703, -420849, -163052, 316165, 816014, -351491, -642997, 437355, 715697, 326143, -444929, 693005, 87975, -696904, -491029, -594282, -97695, -820454, -819749, -23571, 149440, 622851, -489786, -904942, 505077, 433701, -302666, -85243, -375262, 48672, 698542, -638284};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques227(){
        Integer[] array = {996125, 966334, -989454, 919981, -946958, 1973, 909941, 123911, -684494, 474796, -109744, -970711, 791321, 663661, 94165, -966400, 697180, 519252, -578013, 550462, 680381, 268670, -619116, 55400, 594556, 14024, 92381, -832032, 674404, -752038, 587987, -397862, -457280, 251861, -574225, -868300, -296354, 501760, 955195, -676058, -18302, 83529, 551659, -621764, -28922, 734633, -911539, -45213, -419211, 334470, 874690, 986545, 900495, 934053, -323461, -548152, -817163, 799234, 202897, -425033, -462747, -953618, -780916, -106095, 155419, 757650, -179408, 489090, -380166, -572291, 668565, 185023, 215070, 421875, 8473, 45640, 808280, 887323, -775184, -968673, -674252, 175844, -959970, -320447, -413124, -272610, 300509, 874797, 917443, -649880, -256026, 454025, 617276, -554080, -952975, -130604, -40059, -590415, -508573, -138291};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques228(){
        Integer[] array = {1385, 763503, 250818, -796232, 738936, -382912, -187673, 543400, -362058, -732167, 369556, -448540, 929670, 123443, -474566, -501976, -266695, 850467, 485798, 533419, -737513, 626344, -108050, 744033, 770179, 980824, 316598, 377584, -674482, -893853, -234290, 382215, -980078, -191913, -616123, 69790, 988892, 886317, -778418, 378265, 74337, 153108, 683020, 395268, 505452, -736502, 154649, -240499, -557927, 392267, -39154, -687838, -330904, 897777, -704426, -116628, 918697, -280334, 731964, 563740, -131931, 877076, 572625, 94516, 416658, 635629, 727297, 44071, -95480, -593184, 92289, 699997, -345601, 411229, -539475, 72513, -320895, 262666, 970297, 613121, -989190, -335248, -276162, 356637, -931242, -241680, -474100, 35053, -7831, 927172, -473340, -345663, -584213, 295348, 142508, 803368, -109524, -889737, 23591, -716910};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques229(){
        Integer[] array = {905987, -468212, -697775, 636948, 523859, -363700, -697166, -173355, 886218, 945314, -916765, 803510, 48608, 423900, 780136, 367332, -306782, 280889, 679450, 821657, -810429, -52997, 970189, -832973, 465534, -384116, 295142, -42595, -869919, 589947, -432341, 739202, -682096, 412231, 682680, -201862, 296270, -723374, 208589, -106946, -564564, 159681, -666321, -66752, 843288, 167304, 141153, 551905, -838356, 275282, 691664, -270297, 77070, -503910, -392583, -345816, -304636, 996573, 430048, 404034, -718229, 708919, -591346, 61653, -30740, 107759, -513486, 467226, -112632, 528082, -241338, -576899, -615842, -763495, -378885, -681799, 824995, 603812, -518411, 179079, 521927, 833655, -569536, 417504, 521276, -476447, -228965, -436859, -402835, -252321, -262248, -117684, -171363, -160389, -460695, -815853, -846436, 459134, -70031, -874361};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques230(){
        Integer[] array = {-834770, 886211, 786423, 198632, -21160, -4178, 468326, -854265, -698531, 867146, -213714, 708932, -840584, 479293, 31359, 695038, 151356, -738321, 338898, -266848, 635746, 291762, -13116, 485159, 88688, -890282, -562938, 723558, -705806, 84434, -802142, -268627, 208450, 131517, -64746, 820444, -997982, 830803, 36752, 541236, -646297, 878065, 519315, -475350, 162070, -965913, 468105, -965143, 88495, -715909, 838059, -256902, 14381, 815921, 526482, -451993, -428171, -65072, 174183, -600543, -401651, -702280, 893572, 878579, -303997, -623995, 79025, 273994, 426822, -826921, -240844, -912673, -136750, 295488, 626079, 719947, 409842, 994261, 563966, -368176, 298049, -167269, 302931, -37017, -873442, 800503, 379627, -382273, 760325, -772227, -219290, -951805, -736580, -468350, -201369, -966971, -133746, -235252, 57133, -267389};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques231(){
        Integer[] array = {-523663, 763590, 312916, 876311, 287119, -156655, -705313, 203035, 675370, 550262, -414450, -691708, -596569, -199385, -878425, 65283, 68342, 938907, -169718, -32369, -190232, -432843, -848504, 659308, 576340, 274989, -223404, -178464, -116883, 588924, -429401, 163448, -561559, -805854, 912677, -185807, 450802, -314281, 979658, 912563, -835100, 777933, -935113, 468511, 1879, -169305, 50268, 310849, -249377, -943292, 374859, 173884, 809265, 731454, 817414, -800154, 120629, 210856, 502463, 78092, -527968, 134028, -901193, -102229, -80319, -163030, 406873, -525551, 23136, 578827, -153792, 358897, -478947, 796585, -529043, 827766, 52371, -177699, -79598, -95035, 582676, 858176, -309818, 981607, 256587, 835901, -157732, 534969, 168554, -265588, -532623, 173587, 184399, -164996, -391098, -12502, 631345, 484984, -683103, 556073};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques232(){
        Integer[] array = {-792665, 456693, 992000, -861773, 956575, -58362, 975469, 573779, -45435, -762642, 303857, -317571, -51655, -302629, -687261, -589165, 152979, -241748, 487888, 627829, 87702, -323452, 17606, -576213, -449739, -694587, 464321, -471378, -927446, 779592, -92015, 714441, 78012, -279490, -353601, -318476, -285563, 828215, 643423, -321934, -541899, 755441, -764867, -8213, 598546, -540947, 517952, -106979, -192204, -764253, -317759, 161966, -744813, 674086, 630289, 441794, 811767, 927100, -452840, 64281, -125577, 260144, 807749, 294047, 489013, -774967, -663026, -346682, -414570, -668042, 567461, 843953, -53904, -977660, -259061, 981581, 603226, 802605, -340418, -245675, -106477, 593863, 839345, 961939, 277965, 7652, -672120, -363285, -852597, -867787, 508152, -467302, 560253, 377292, -556120, -437109, 796411, -616474, 363355, -485364};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques233(){
        Integer[] array = {413192, 429025, -280023, -126038, -507485, -730405, -676606, 337136, -83517, 296841, -735788, 115903, -159715, -481415, 96940, -534804, 489566, 162431, -383527, -202935, -712335, 744658, -636746, -785131, -386577, -246113, 442432, -174658, -77831, 614307, 388727, 332846, -968624, -529498, 896836, 864726, -664852, -995982, -908881, 190882, -910783, -759935, -399326, 52025, -447163, 968643, 17122, -962237, -81302, 109673, 921785, -89616, -675628, 537502, -534892, 227826, -555039, 707494, -496862, 566728, -741535, -913691, 173889, -562913, 735135, 424487, -553272, 475134, -625852, -435478, -924031, -965500, -150586, 24801, 427014, 980415, 515703, 963750, 289148, 551185, 789092, -16041, 220298, -664593, 881237, 882968, 994738, 545397, -152396, -88955, -781526, -929758, -788287, -663915, -854838, 718425, 736753, -854190, 77728, 942259};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques234(){
        Integer[] array = {764478, 705417, 64667, -625018, 733320, 421715, 380403, -73434, 500345, -853010, -163103, 524225, -165639, 912889, 983907, 685543, -388569, 609761, 929710, 237187, -943166, 30769, -202704, -285954, -813926, 503872, -105981, 309689, 336511, -248914, -480461, -500202, 920137, 730485, -326735, -674992, 304675, 530328, -905990, -931474, 28110, -823320, -820731, 849374, 677172, -311974, 4642, 755701, 63175, -357028, 863824, 941695, 815065, 403193, -12748, -310064, 513466, -865646, 30611, -681526, 209607, -576970, -195584, -200100, -468649, -737720, -786332, -642800, 370716, 80729, -463523, 84152, 492272, 49044, 193197, -376032, 619564, -944744, 788980, 613848, -293561, -56226, -523345, -533216, 35885, -632989, -802223, -490438, 420775, 44715, -353889, -615109, 555126, 376748, -60141, -439436, -573416, 748436, 706977, -454737};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques235(){
        Integer[] array = {-237461, -652090, -820311, 470422, -638037, 118556, 713687, -208576, -122118, 586137, -939008, -708611, 597085, -642164, -865727, 216145, -277051, -331501, -596898, 68858, -479011, -362216, 927736, 188006, 688894, 780600, -472453, 884189, 373810, 934433, 304908, -653576, 588609, 370830, 934622, 27323, -214211, 108447, -789802, -208496, -498123, 546119, 7142, 1640, 354769, 557430, -581025, -34809, 295844, 294387, 368674, -168154, -980715, 186557, 474875, -954150, 626319, 175886, -272306, -363720, -665720, -171619, -941877, 922446, -806272, -978125, 793001, -338894, -407092, 443935, 31587, -330247, -49042, 750915, -517474, -122602, -743814, -768457, 257203, -295598, -231398, -573635, 175658, -273956, -581339, 291086, -834100, -127268, 860712, 950265, -636632, -804755, -192523, 9546, -393400, -13018, 590923, -186973, -945279, 325723};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques236(){
        Integer[] array = {302263, -515789, 224631, -169491, 622908, -874636, 120566, -330254, -836301, 707700, -500927, 505576, -233349, 676518, -29066, -125770, -983304, 548298, -282499, -287242, 475427, 745205, 426108, 541204, 114946, -519846, 851755, -218614, -882258, 810178, 25425, 604443, -369833, 330971, 175384, 182937, 379256, 67831, -795109, -226961, 529120, 44176, 890022, -576524, 942882, 921917, -233998, 292974, -108652, -805160, 460523, 109293, -971092, -57848, -105185, -207697, -541895, -170649, -844210, -677999, -136421, 87687, 256391, -414784, -126500, -861782, -8637, 937370, -294076, 372780, -237373, -597842, -573217, 653136, -152483, -301951, -275222, 617904, -803271, 280508, 906467, -594283, 411945, -483671, -274048, 637618, 83213, -866623, -628346, -945109, -708582, -821759, -501633, 676252, -636836, -818101, 693494, -671315, 115057, -232841};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques237(){
        Integer[] array = {235297, 931460, -627522, 551559, -483999, -262345, 485730, 224272, 667366, 936399, 934879, 88479, 64510, -232703, 300098, -678373, 909964, -466865, 666088, -880752, 374345, 668660, -358258, -632224, 445847, -502467, 124554, -358165, -56090, 515334, 531701, 354117, -517396, 166043, -596974, -264915, -729573, 125805, -130503, -769419, 646456, 446334, -916470, -638463, -273411, -879433, 190386, -503390, -593613, -808425, -587690, -182574, -815563, -125600, -645026, -765431, -643426, -739259, 283885, 495003, 691723, -306175, -550372, 302293, 40816, 148053, 947736, 14071, 810177, -946771, -503660, -527786, -568573, -121247, 239336, -899358, 962913, -554375, 103692, 609301, 843853, -794785, 95380, 275929, 243432, -451610, -831032, -416753, 620673, 652699, 46680, -43537, 590585, 92391, 685499, 249879, 40962, 610793, -201631, -136273};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques238(){
        Integer[] array = {601869, -140010, -217855, 962136, 977580, -360535, 225555, -785338, 677733, 555922, 830385, 730524, -498583, 920888, -174938, 771605, -531640, 708026, 33794, -383698, 717812, 617745, -524618, 203150, -439582, 500274, -494072, -450965, 534860, 666023, 590824, 638307, -602405, -261732, 622431, -250862, -260940, -840078, 436015, -821011, -55591, -44973, 324746, -987009, -963446, -234356, -128978, -223239, 117550, -658247, -932919, 800451, -978164, -932323, 947050, -174087, 601767, -660057, 813135, 483082, 647287, 204963, 579907, -797439, -163763, 179904, 710494, -884589, 655764, -718159, 70695, 601131, 823999, -986623, 71955, -760657, 650394, 128705, 412949, 919783, 833590, 520044, -917479, -54782, -763158, -229837, -999377, 669215, 707719, -403192, 100223, -571877, -450054, -333272, 295671, 265375, 348466, 592935, -728387, 216807};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques239(){
        Integer[] array = {640101, 782958, 375452, -50664, 683476, 644847, 116841, -120997, 956123, -716583, -3385, -545209, 403462, -133589, -640514, -16144, -633370, -223047, -299042, 82076, -115085, 63897, -951659, -969584, 747025, 484085, 544456, 657021, -714008, 952742, -800201, -85247, -193607, -556604, 46152, -267816, -859074, -942996, 896548, -192773, 560955, -187622, 678786, 61484, -765216, 853305, 297728, 998543, 472000, 597185, 336261, -95276, -922475, 814909, 663099, -503938, 843604, -237997, 183536, 238508, -846898, 788153, 71176, -672245, 704360, 413537, 939029, 466368, 799375, 884986, 627800, -616178, 588757, 173994, -755441, 806445, -353028, -241716, 457470, 574103, 235812, 370012, 110702, 977498, -212460, -984635, 539970, -45796, 251737, -147712, -839006, -347772, 881528, -501167, 630367, 664403, 14696, 726921, 852357, 447304};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques240(){
        Integer[] array = {-92943, 292302, 475386, 707226, 883124, -979168, -401532, -613890, -212265, 217304, 983760, 855761, 154766, 257696, 808114, -142687, -723131, 645041, -603217, 97230, -813114, -717419, -775629, -272830, 927555, 510373, 460524, -897507, -217723, 458901, -271601, -70066, -718373, 881147, 626018, 97289, -942518, 705505, -267389, -994456, -364553, 741469, 114837, 205018, 888883, 625623, -293640, 134585, -975725, -577615, 186761, 66944, -28249, -996092, -516771, -477528, 496276, -179779, 605031, 753993, -61460, -190070, -169569, 226850, 636895, 255663, -885533, 839684, -563704, -625104, -337304, -151289, 148046, -791652, -686162, 941591, -548542, 95201, 456633, 248342, 173664, -469924, -230741, -86376, -62916, 700896, -411307, 145057, 336275, -969396, 456948, 869575, -588960, -975417, -177106, 609546, 429319, 732808, 225444, 447888};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques241(){
        Integer[] array = {-951809, 366806, 243943, -945177, -645382, -731902, 828983, -348280, -313164, 892666, 564809, -823442, -945484, -405186, -340656, -464790, -290001, 567403, -99432, 617440, 406361, 159192, -782978, -835016, -937565, 481799, 683961, -107675, 864413, 407086, -576497, 607431, 408177, 50027, 238053, -757887, 613510, -283899, 731423, -678946, -504371, 420176, -430914, -522206, -348454, -600364, -770944, -984857, 37672, -516371, -277952, 542070, -896763, 35653, 940540, 987873, 256244, -834188, -833244, -709127, 293129, -982242, -406754, -270595, -445570, 374603, 740931, -986056, 12092, 101038, -262202, 700870, -239217, -798088, -851500, 812141, -371693, -393301, 323464, -36490, -830838, 663660, 985751, -769649, 366925, 258201, -717015, 113464, -507957, -411985, 702769, 795507, -654242, 529195, 322885, -438803, 832687, 875796, 24214, -572805};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques242(){
        Integer[] array = {-38497, -259785, 101545, -779603, 104125, -97675, 783263, -907050, 571724, -924371, -581199, -74225, -823023, 701233, 228515, 75672, -974644, -944871, -315521, -652228, 923281, -451318, -817035, 48609, 136209, 770596, 592636, 859280, -942484, 658426, 751601, 970670, -263427, -228866, 656128, 574165, -89865, 473992, -362007, 285065, 189458, 21425, 89510, -622686, 576651, -710756, -272672, 795954, 421015, -885672, 106207, -535031, 974470, 640731, 524891, -946873, 663810, 827074, -342444, 681626, 671871, 926402, -450281, 667664, -773137, 531169, -896429, -388096, 877677, 528146, 137059, 676871, -732733, 403673, 902005, -630936, 115592, 792334, -369537, -805199, 589901, -497302, -269210, 824734, 235224, 737846, 916246, -430945, 814987, 44652, 98474, -353632, -969409, -769651, -995962, -454288, -447221, 277572, 584002, -820606};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques243(){
        Integer[] array = {320028, 59181, -205087, -244262, 939358, -631595, -112006, 825735, -266309, -570168, 233873, -200124, -908854, -110483, 938981, 341222, -885345, 478037, 675424, 551261, 680299, 277177, 224540, -473148, -361451, 337199, 212879, -235973, 489187, 288187, 24638, -282921, -124809, 364116, -837865, -942779, -111000, 62267, 354424, 138757, -526750, 625395, -922859, 799357, -25934, 748367, -382037, 955918, -598102, -570864, 920639, -623338, 949553, 134148, 700908, -96283, 134735, -607153, 75075, 631739, -159603, 417012, -234723, 23107, -304738, -718537, -773232, -233931, 292108, -530975, -726417, 928094, -308824, 789065, 967952, -628586, 636529, -577692, -62273, 259795, -378905, 846060, 573552, -641969, -134285, 420728, 602916, 277930, -34084, -185843, 938104, 693648, -321070, 977721, 834352, -270458, -822653, -714907, 169791, 646418};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques244(){
        Integer[] array = {-235021, -365761, 454843, 906030, 731322, 217623, 265676, 569319, -17126, -908048, 752811, 435613, 281464, -386988, 252995, 328329, 286988, 274915, 575514, 814184, 156941, -857501, -780831, -321440, -382779, 832311, 548474, 845500, -204553, 470966, 470567, -716503, 664813, 5228, 845981, 916648, 844423, 294267, 983203, -180571, -900590, 992144, -919222, 433023, -702408, 322623, -876874, 886181, -490764, 383808, -769149, 468713, 719895, 560491, -911367, 597488, -773989, -410507, -377787, -809319, -207067, -425207, -448403, -112717, -749761, 427611, -196788, 240118, 775678, -209527, 277278, -322081, -4521, 602745, 926869, -780168, 37180, 944934, 532656, 177575, 390677, -238494, -914266, 112633, 977988, -36282, 663587, -208852, 935002, -536371, 652327, 480563, -198379, 157839, 632698, 488884, 564225, -492232, -322841, -346409};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques245(){
        Integer[] array = {-368643, -656079, -278370, 537941, -842273, 711092, 174093, 648115, -372627, -867592, -409002, -207464, 393596, -733395, -624358, -733255, -773529, -818494, -835046, -696188, -173888, -949836, 428014, -582083, 645387, 602035, 571844, 811586, 784688, 520020, -127321, 524590, 175883, -649215, -161154, 328349, 385636, -584011, 202753, -196443, 945702, 223647, -318392, 854819, -244699, -997871, -195249, -990069, 806209, 152651, 333874, -199145, 839423, 245720, 888314, 925899, -904027, -991460, 531814, -159801, 638255, 946954, -267651, 909103, 586511, -370451, 598140, 383318, 487381, 631525, 198162, -96056, -69893, -831934, 394053, 769866, -4885, -471603, 149453, -743506, -248302, 202454, -914409, 886566, -254053, -952464, -308827, 277897, -447323, 648673, -742270, -863388, -842341, 98209, -570786, 362820, -257407, -82662, -500693, 883613};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques246(){
        Integer[] array = {-714330, 955566, 77606, -125288, 761473, 14181, 48136, -996331, 400136, 553149, -245494, 866683, 617328, -743078, 173087, -568099, -357266, 268134, -27727, -822207, 983122, 200381, 759984, 997524, 516849, -799485, -361492, -630046, 440374, 436347, -381339, -936109, 587681, -866965, -505614, 77692, -748182, 407121, -815073, 95389, 100115, -736397, 901998, 268773, -765553, 951177, -585176, -189829, 401460, 851091, 674477, -110059, 992178, 555970, 639025, 664189, 463740, 276496, 494661, 303694, 55021, 965842, -36193, 978577, -520544, -933782, -900573, 533009, -580366, -120810, -999921, -501939, -200324, -926620, 501113, 528980, -474439, -742108, 108078, -168008, 377939, -144648, -810782, 159445, 947719, -542143, 839016, -446291, 126850, -820617, 540837, 434504, -22547, 974289, 841164, 923036, -902422, -818342, 670499, -525229};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques247(){
        Integer[] array = {974423, -824902, -360565, 559901, -661062, 82202, -371827, 581706, 441365, 872730, 614211, 477849, -53006, 411989, 476751, -812346, 212230, 179997, 241258, -492217, -92002, 762736, 328187, -176894, 583062, 227664, -510403, -847893, 951623, -901405, 524335, 761265, 892142, 201611, 783829, -102685, 153073, -318849, 783155, 569072, 720397, 955315, 681611, -585802, 775437, -217250, 72417, -299049, 991852, 617494, 988995, -735323, 969963, -53486, 871270, -159009, 255588, 89529, -338407, -619860, -635591, 242749, -214453, -297982, 261865, -561237, 485590, -224783, -590324, -388279, 322495, 83897, -645296, 717437, 850096, -375431, -136993, 632213, -926701, 887051, 604594, 538674, 807112, -167205, -354118, 898985, 345666, -949798, -96840, 411547, -429318, -306926, -847186, -299894, 51169, -158488, 174467, 971414, -341928, -252726};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques248(){
        Integer[] array = {836177, -935950, -935396, 6130, 782917, 424535, 775841, 122078, 579599, 621438, 863464, -766142, 708285, -240025, -828392, 968839, 915347, 398809, 540077, -85751, 786213, -464267, -106152, -818845, -881613, -571745, -617153, 648231, 733825, 520486, 287449, -26393, 895566, -803774, 353333, 620834, 581120, -279321, 633942, 32886, 333888, -660390, -901338, -405318, 81725, -179766, -307100, 669507, 158003, 315000, 421733, 45002, -607980, -714973, 373315, -434104, 456446, -855582, 832477, 266672, 290705, -783008, -200106, -427370, 636471, -241874, 837761, 41051, 464344, -634636, 646081, 818826, 897097, -333541, -827519, 661656, 678262, 622010, 866766, -302223, 633744, -972070, 776671, 185557, -529896, 346129, -320747, -436945, 750645, 702615, 452596, -541646, 400747, 831103, 243838, -955498, 747572, -405728, -491937, -483151};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques249(){
        Integer[] array = {-995330, -113358, 563981, -534310, -100037, -865961, -557514, 385653, -988140, -791256, 684073, 777348, -157467, 32556, -23934, 686716, 417022, -725229, 330863, -440342, 144458, 652438, 477655, 878140, 793059, -79004, 645257, -84639, 762875, 102739, -140620, 36276, -734790, -84697, 472904, -271989, -498966, -674472, 475607, -888173, 608238, 457236, 720383, 822545, 413230, 205162, -472063, 645164, 232459, -689560, -458319, -74427, -962727, -107319, -132005, -621360, -829617, -859219, -143680, 138416, -932, -683739, -703644, -532555, -378917, -529461, -312968, -195770, -580181, -302573, -435599, -316312, -588322, 445797, 656396, 467614, 356641, -463768, -542190, -152959, 121709, 950816, -700544, 878754, -71955, -452141, -263227, 399961, -843474, 957960, -214642, 581302, -839599, -118063, -179212, -583202, 701131, -771902, 406008, 256178};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques250(){
        Integer[] array = {-262218, 74289, -217597, 977114, -820863, -21725, 511719, 971655, 770218, -913905, 22923, -827872, -91771, 899170, 490170, 709862, -818992, -762859, -546286, 514774, 272011, 361173, 286943, -759944, -955208, -214208, -823610, 552033, 340021, 785083, 732297, 181802, -35216, 594774, -324639, -403663, 358262, -127529, -432943, -827755, -586457, -150906, -482448, -911937, 715808, 282938, -683343, 238679, 16518, -596079, 714364, -921531, -814434, 66680, -746227, -544354, 724799, 131800, -392426, -373863, 982399, -92739, 297983, 680868, -747010, -465880, 869366, -215711, -885621, -644944, 817450, -12871, 543535, 575721, -900488, 811069, 335715, -56426, 237926, 54450, 587141, 527029, 474048, -176472, -778739, 294738, 930693, 648640, 562927, -361277, 343617, -140637, -32608, 686345, -366467, 451991, 818930, -389665, 113944, 136547};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques251(){
        Integer[] array = {433937, 797716, 426487, -490756, -852716, -830008, -759718, -630128, -95232, 69662, -649667, -57035, 588834, -751275, 571125, 655463, 453018, -351229, 337713, 249551, 247366, -153174, -234164, 932374, 479199, -664288, 105701, 68046, -417998, 508831, -137627, -505947, -661773, -443976, 120646, 487247, 522278, 170816, -613741, -141837, -634968, 601192, -549254, -35997, -260016, -427637, 78403, -538648, 661331, 383486, 256885, 330719, 198953, 314122, 629982, -800599, 297303, -329401, -348515, -702468, -454639, -521226, 357773, 33500, -903922, 519946, -372595, -752401, 457602, -304353, 973128, 493650, 768780, -825958, 390806, 666137, 599251, -246854, -998378, -990340, -738344, 885895, 577702, 364887, -121346, 214046, 828584, -610444, -572688, 709787, -758575, 984568, -228802, 994181, -598237, -291739, -393586, 256250, 651299, 524937};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques252(){
        Integer[] array = {-102391, -132330, -394174, 224570, -693833, 60510, -315690, 544206, -194546, -524647, -69143, 797192, -8214, 933358, -681640, -586641, -159067, 638087, -414476, 525844, -517908, 142508, -826991, 918915, 126546, -812304, 14960, -712775, 493768, 548724, 805666, -818901, 241178, 7780, -258635, 608181, -878170, -960996, -660527, 794791, 117414, 669751, 30393, 410968, 670490, -936721, 779094, 901958, -840857, 946345, 996607, 556668, 195785, 650543, 19359, 384245, -870537, -270401, 419398, 832109, -936121, 129372, 165417, -498123, 302977, -216997, 689206, -330074, 529577, 661263, -570985, -30314, 580948, 238109, 809476, 204701, 194864, -400754, 870459, 744707, 591167, -223415, -817122, 430306, 249122, -281394, 185524, -377479, -59454, -958732, 595214, -268219, 863924, -94832, -41879, 6961, -793592, -168507, -508889, -811755};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques253(){
        Integer[] array = {-804939, 532810, 339076, 501183, -99247, -625442, -163753, 279487, -815841, 185118, -77396, 240776, 689112, -65844, -851558, -450215, -453269, 160283, 610682, 451575, 640581, -347187, 719871, 466888, 559160, -665992, -633515, -764793, 944710, -882769, -142984, -899999, -343163, -439357, -380137, -616551, 982698, 873499, 116239, -22007, -515822, -51935, 296365, 295833, 40694, 28086, -818283, 758371, 218464, 352284, -231425, -951073, -925676, -643375, 968037, 746545, 659342, 93854, 222711, -193569, -431113, 7717, 195252, 73220, -245685, 89151, 949033, 571696, -597837, 543252, -697162, 228105, -695108, 353518, 186956, -863322, 303375, -792812, -158510, -339406, -457968, -930036, 168037, -523918, -470054, 674416, -928381, 909464, 683431, -150354, 784234, 458546, -882637, -694372, 209406, -181347, -568528, -856262, 8510, -850028};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques254(){
        Integer[] array = {-159992, 585926, 181923, 842144, 42118, -712641, 49980, 723604, -737475, -87770, -778669, -22271, -792521, -599407, 239684, -299982, -359217, 623848, -469845, 647764, 316192, -130039, 393170, -714137, -961295, -391167, 834882, 215513, 75582, 268801, 950656, 219129, -530850, -18289, 112042, -740625, 520501, 889700, -950709, -656740, 830674, 854508, 167249, -313732, -912150, 369482, -657756, -553435, 59217, 895911, -927433, 850879, 663274, -768183, 57562, -717731, 409136, 729458, -333512, -923427, 30088, 693116, -50423, 464816, -749086, 373707, -900296, 817024, -696253, 8272, 151135, -84431, 988339, 842203, 576831, -379515, -458869, 271027, 87226, 362805, -333178, 796276, -404289, 508284, -11515, -368824, 676016, -10182, 999249, 524934, 765336, 225251, -186761, -528202, 767841, 202342, 256170, 130155, -168717, 192367};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques255(){
        Integer[] array = {761233, 461996, -44736, -231621, 172385, 978829, 384398, -237561, 278160, 871422, 980493, -901356, 206118, 427812, -56946, 420824, -799932, -905402, 209924, -479562, -613994, 814859, -879440, 861613, -165351, -927691, 642980, 620275, -761190, -98263, -41223, 330575, -407057, -490215, 124841, 527, -158284, -637666, -718788, -966130, -626629, 413719, -885900, -686559, 687037, 394668, -161037, 989718, -254235, 568483, 241503, 606702, -3797, 714636, -371593, -952570, 175459, -794103, -491343, -338839, -305645, -213019, 187321, -498152, -78013, 132193, 86322, -333243, 182207, -715944, 953173, -15888, -277070, -97388, 38419, -803689, -990920, -949951, 74400, 378266, 685544, 90112, -738727, -708590, -125057, 176735, 850473, 115975, 568103, -692685, 483866, -405859, 797593, 125618, -628370, -51490, 319638, -25750, -843257, 563843};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques256(){
        Integer[] array = {-425143, 605436, -437476, 61847, 787215, -723116, -820848, -552071, -289957, 20309, 594730, -704584, -186029, 281441, -69618, -751745, -854998, 970795, -726220, 306478, -850875, -215819, 754409, -211160, -972060, 392856, 779314, 841500, 164227, 348299, 265816, -280714, -584009, 576492, -92930, -583648, 524111, -105217, -106487, -293746, -756799, -532483, 25874, -58700, -730654, -510119, -24086, -200714, 869997, 264361, 568459, -118378, -332667, 726455, 796349, 842653, 685127, -772393, -644486, 767448, -593234, 419371, -263568, 299251, 284701, 91793, -182294, 204587, -582077, -214106, 53652, -611848, -63117, -672253, -714598, 674185, 456104, 327303, 165494, -4787, -57454, -724635, 502048, -163018, 521458, -481895, -307657, -197206, -65836, -412607, -962359, 79113, 795834, -223403, -615263, 944939, -905554, 439732, 335694, 749913};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques257(){
        Integer[] array = {-898216, -804071, 797252, -884796, 550269, -75037, -297177, -55776, -414589, 2985, 70144, 124530, -654111, -797043, -807899, -593618, -584312, 269638, -384112, -496131, -655919, -16739, -787006, 345222, -160104, -296122, 585898, -163687, -711077, -129885, -723442, 632217, 763640, 200725, 241257, -993516, -709195, 375358, -111725, 958676, 927005, 782526, -516996, -879143, -929281, 847766, 436636, -395030, 736614, -651942, -899961, 106215, -142848, 26927, -788366, 574429, -881770, -261417, -38001, 530529, -865972, 753881, -718416, 586948, -634567, 457026, 208409, -770171, 828501, 330833, 67950, 256098, -411662, 914801, -315122, -559913, -421164, 902147, 813326, 60104, -171853, 556476, 141360, 697387, -979387, -473939, 134673, -553447, -709563, 431996, 572788, 676733, -15390, -855592, 746890, 589964, 881368, -402516, 484166, 355172};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques258(){
        Integer[] array = {557701, -363779, 127293, -391880, -876174, -786195, 452699, -5661, -26199, 183593, -150820, 759012, -554094, -48106, 272881, -825974, -764889, -224769, 548042, -258755, 970604, 526603, -66581, -234279, -597454, 575852, 777380, 941382, -489519, -91826, 51035, -505540, -776421, 552250, -417473, 529639, -913975, -32923, 322175, 78438, 609592, 635616, 630060, -902758, -15019, 186233, 51189, 414955, 841947, -325259, -292504, 307391, -542750, 962747, 910275, -653571, 758124, -944819, 146740, 765145, 95190, -973999, 145524, 661026, 59961, 464676, -812812, 691447, -882018, -618528, -946646, 229296, -419486, -466956, -919028, 849807, -48761, 776811, 470550, -510210, 656027, 691385, 67496, -833844, -651005, 735727, 744861, -266206, 967882, -459942, 991485, -218841, -37496, -450472, 28641, 942043, 816242, 28673, -591640, 815041};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques259(){
        Integer[] array = {-870054, -98065, -645731, -346584, -131316, 924652, 509106, 676733, 101235, -831234, 479597, 490428, 470096, 904521, 173233, 325447, 155952, 653241, -158163, -302267, -950263, 266969, -279652, -993314, -270082, 414560, 368669, -441333, -94546, 23356, 815203, 654336, 78219, 350302, -251275, 43980, 607397, 783731, -217939, -575267, 623414, -780595, -37994, -649318, -760552, 831899, 860529, 236934, -54019, -910521, 297836, 806076, -521734, -56414, -888884, -312848, -91853, -873335, 643946, -932468, -723159, 380234, 539580, -421334, -338304, 844759, -658530, 221785, 669128, -795124, -104796, -526857, 601188, -175856, -828563, 216695, 393675, -260891, 223818, 689165, 485288, -494356, 670362, -97375, -169030, -272340, -184056, 231681, -163439, 264311, 800178, -961846, 901022, 298872, -182672, -901894, -87652, -927574, 25353, 230899};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques260(){
        Integer[] array = {-468953, -850753, 283880, 285616, -687338, 553071, -817826, -938052, -458725, -185893, -469036, -15379, 534722, -721912, -357192, -907440, -914717, 96901, 164058, 352865, -772474, -810904, -682409, 281173, -547133, -883447, -477022, -538765, 142411, 322104, 45804, -665026, -294581, 767886, 508952, -393175, -28339, 698287, -855249, 132416, -668627, 535249, -862233, 329730, -294034, 529005, 206671, -668433, 538182, -77733, 989332, -176384, -855591, -115026, -574640, -532056, 79109, 428466, -117110, -608530, -879498, -460787, -786379, 160033, 888908, -815618, -745740, -728508, -13925, 508203, 384712, -459299, -401157, 139955, -111366, 794721, -580087, -962165, 572548, 863739, 225949, 726689, 627481, 233533, 156344, -780542, 237815, -647669, 976231, -505729, -995370, 541250, -972383, 472626, 174503, 122649, -58814, -436962, 701014, -768366};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques261(){
        Integer[] array = {260637, 584479, 870418, -480010, 36213, -672842, 540103, 967836, 611770, 265866, 492047, 35666, -658530, -786412, -973160, 484417, -758182, -785432, 330038, -555183, -54432, -654857, -953845, 665577, 649134, -15144, 15542, -227217, -884954, -388555, 582347, -430826, -713994, -865469, 89454, 239884, 118453, 118992, -958020, 708814, -848959, -61405, 108580, -55412, 81546, -861929, -18759, 236853, -596353, -273690, -387095, 956787, -945304, -829545, 264570, -52841, -788933, 129045, 595303, -439713, 70036, -987102, 918754, -215844, -746812, -178282, -243430, 380535, 119311, 583875, 873591, -764097, 20816, 554652, 807217, 42979, 952722, -197752, -806537, -371765, -528836, -300833, -341941, -502324, -600282, -388660, 976093, -874126, 299509, 150095, -656960, -781066, 578036, 673818, 836026, 381891, 603974, -715657, -635888, -87836};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques262(){
        Integer[] array = {-359093, -613658, 53643, -499696, 879093, 287552, -728984, -495696, 536217, -140610, -347855, 470628, 601423, -566049, 783903, -48037, 339679, 640372, -443088, -644555, -62922, 560874, -705146, 456726, -923343, -935348, 496208, 978382, 849425, 783937, -731627, -671575, 875088, 793044, -898044, -868131, 417743, 326132, 88815, 88318, -382763, 407939, 398155, -336885, 802362, -527270, -828877, 493031, 785324, -480436, -788620, 192000, -762563, -235261, 788104, 510095, -346641, 466677, 706027, 937109, -773139, -504023, -205895, -614451, -494039, 781329, -413326, -811425, 208328, -789259, 106375, 958822, 764842, 789257, -195705, -353737, 950956, 152634, 265736, -173456, -829947, 110256, 772137, -107415, -998285, -241061, 785711, 632639, -847599, -229779, -233988, 664289, -178191, 747161, -712507, -480875, -633947, 725540, -142451, -926429};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques263(){
        Integer[] array = {212245, -447520, 708939, -866953, -770886, 724468, -587220, -805197, -350398, 474981, -864367, -848020, -122742, -23836, 661400, 993533, -868358, -320553, -955534, 793925, -632026, 508658, -634940, 362588, 501666, 451174, -26421, 356060, -237645, -486348, -273616, 301586, -34055, -159137, 84177, 122569, -837021, 61253, -667713, 861822, -660604, -784658, 923236, -299958, 956348, -806896, 378614, 263085, -985462, 420978, -822796, -934744, 497725, 992276, 382609, 392240, -316076, 161505, -39899, -384788, -686369, 836898, -79224, 386285, 643739, -244440, -204488, -398495, 553307, 842771, 163380, 663782, -751913, 609298, 312553, 432980, -563708, 254073, 653893, -431874, -337646, -880096, -598086, -832900, -479770, -131478, -689721, -915766, -997262, -492516, -941927, -578712, 254296, 800651, -79493, 379311, 2593, 506154, -151276, 923007};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques264(){
        Integer[] array = {434287, 105765, -152671, 358325, 417409, -73083, -120300, -800911, -823787, 915524, -373681, 138632, 502196, 259254, 587718, 373944, 443753, 786132, 420344, 953061, -367273, 238952, 116488, 771861, -261358, 29013, -520535, -814296, 860349, -297828, -335374, -538431, 958385, -520492, -875659, -236193, -721582, -792416, 800779, -802640, -439768, -253102, 287272, 190024, 329171, -990541, -332679, -220249, 763110, -427995, 274723, -294043, 272161, -138572, 444179, -811606, -701402, -713083, 385036, 3126, -181044, 13526, 788215, -680762, -99558, 309913, 546576, -998421, -27923, -545957, 438782, -63076, 314699, 462516, -887380, -371930, 677557, 822711, 606075, 110774, -673437, 315757, 339360, 214852, 276362, 624835, -551968, -792000, -535421, 100673, -233857, -676201, 34792, -133426, -552656, -261619, -958027, -770037, 844801, -410140};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques265(){
        Integer[] array = {-66672, -814681, 406620, -518115, 197054, -260201, -918163, -170234, -613380, -25457, 951171, 865863, -287527, -471202, 696191, -69216, -393298, -914544, 63449, -109273, 242430, 430540, 78835, -968036, -323132, -148395, 55167, 994342, 422793, 787646, -298002, 192463, -779397, 294774, 521156, -141918, 9536, 266685, 532856, -708071, 995661, 265938, -198178, 42661, 5432, 649399, -285662, 929286, -684734, 31048, 68803, -569123, -320862, -894043, 667533, 13041, -177978, -635307, 235179, 321664, -878552, 130085, -851069, -31242, -235814, 858247, -428409, -40472, -221477, -422813, 936320, 576543, -236599, -674988, 387861, 95183, 794064, -816916, 303599, -313784, 362072, 981429, -495490, 680736, 796786, 541409, 867261, 389949, 721706, -327912, 817947, 514491, -910836, -465005, -247641, -698091, -606063, 246690, -7330, 901805};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques266(){
        Integer[] array = {-503925, -182933, 61495, 60903, -29416, -19302, 134247, -732271, 615826, -55409, 106677, -450072, 305805, 389823, 495467, 847826, -982015, 869675, 314102, 986164, -818386, -508974, 646933, 175015, 467544, 614612, 441576, -585645, 617389, -426566, -228853, 191432, -867067, -662141, -280764, 301872, -912944, -960510, -637302, -670331, 205607, 336596, 905972, 197351, -615401, -531969, 1753, -144004, 196288, 773182, -6037, -568493, -444660, -691657, -267322, 282922, 171048, 585526, 706268, -63913, 862112, -709160, -387481, 349400, -948916, 570185, -488345, -613580, -492748, 91736, 349847, -774747, -211770, 738861, 791500, 405900, 138354, -642194, 730084, 861258, 437867, 774163, -802250, 35562, 615896, 913407, 46323, 109635, 601260, -503752, 142296, 395251, -286054, -80936, 313021, -811037, 346776, -487779, 596246, -336243};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques267(){
        Integer[] array = {-169286, -771575, -428358, -534614, -604661, -160900, 62585, 953302, -17698, 583516, 609120, -19992, 516138, -541509, -833366, 139843, 533374, -737651, -196872, 428181, 546762, 441768, 895494, 596094, -299983, 608230, -312190, -288815, -196090, -217689, -550971, -134195, -266289, -84000, -257331, -912238, -636622, 825341, 114773, 535489, 391972, -203312, -369373, -445601, 332800, 705984, 902235, 590743, 353016, -937609, 891924, -567959, 780312, -979759, 356073, 802225, 806697, -21473, 147095, 943001, -391611, -65663, 314356, -504994, -373265, 190648, -779230, 855586, -495513, -178145, 873228, 466515, 541835, 893202, -75660, 456825, -275086, -991195, 764973, 571097, -617568, 607055, 484710, -981806, -821382, 709879, -832608, 967198, 234852, 931438, 158256, -954848, -366174, -366915, -602759, -60565, -996648, -185362, 694888, 376609};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques268(){
        Integer[] array = {646132, 767623, 563434, 711935, 496991, -357981, 807355, 989496, -325258, 551825, -974005, 42288, 613523, -107161, 942324, 415817, 80157, 25396, 297702, 154686, -226443, 550908, 797763, -715006, 441223, -32212, 973724, -5524, 459117, 219824, 674301, 629794, -94753, -557829, -619036, 232310, -693929, 343304, 711659, -228412, -219371, 713052, -379561, -79736, -281971, 197693, -928445, -848384, -244333, 886715, -968079, 705879, -988686, 789773, -790436, -376270, 640843, -143183, 615159, 573839, -454235, 979658, -141214, -713020, -676934, -324754, -504225, -138129, 107843, -150661, -34999, 597001, -226882, -580487, 205229, 662418, 123500, -530580, 800498, -764852, 560427, -17734, 72891, -812264, 340957, -559396, 685299, 231081, -776048, 195170, 75132, 977619, -844598, -405308, 463126, 377387, 653528, 83371, 549002, 62850};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques269(){
        Integer[] array = {41188, 814984, -848995, -70274, -577586, 602756, 811755, -876635, -171726, 739190, -977768, 678206, 366442, -506580, -630913, -538592, 653918, -41797, 326347, -587448, -516156, 292884, 579545, 818495, -264958, -244955, -478837, -512711, 999381, 688050, -832572, -359944, 928079, 848557, -468763, 535787, 776850, 829127, -166960, 126260, 948620, 441551, 849863, 531024, -721286, 906856, -779192, -514506, 807612, 122165, 288772, -365097, 338025, 608781, 146792, -845040, -787356, -114017, -788686, 149012, -608481, 794127, -184922, -980901, -233835, -282525, 837537, -598502, 96589, -95098, -207596, -971465, 613038, -581774, -407559, -753526, 705363, 563863, -487135, 914230, 507058, 267362, 342501, 397682, 298803, -825015, -501163, -944687, -32732, -432824, 958565, 226372, 731407, -922253, -477597, -920924, -590286, 137938, -536213, -313891};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques270(){
        Integer[] array = {152124, 970772, -951301, -454796, -914045, -338205, -581307, 971711, 193418, -137832, -502669, 382229, -60729, 697908, 70966, 72017, -576562, -862946, 788692, -567655, 666313, 339466, 588286, -946232, 432402, 363814, 142246, 36952, 92434, -931954, 831101, -998162, 490748, -647835, -138022, -837479, -836444, 628899, -470115, -540770, -571006, -468281, 291347, -805050, -148381, -661431, -247248, -34977, -135740, -752011, 638783, 186693, 488977, 723252, 33042, -480115, -184853, -146557, -955547, -93581, -166004, 953364, -703780, 180977, -116263, 286570, -759258, 110385, -711236, -946997, -285471, 94868, -825731, -36316, -31141, -676538, -570990, 614305, -957497, -805640, 438539, 657171, -531643, -160684, -647027, 176518, -437679, -421706, 482544, -738960, -889526, 426884, -406169, 616542, -958049, -924182, 333055, 314481, -353192, 794603};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques271(){
        Integer[] array = {-113208, 230881, -163017, -838274, 655406, -495126, -71747, -822518, -386740, 242943, 462260, 693987, 191226, 279697, -51184, -935322, 70491, -23616, 816692, 41775, 469745, -152355, 995940, -618049, -614946, -538094, 955470, 832890, -190638, 520805, -939394, 112655, -821355, -780477, -153939, -964955, -614966, -780150, -649154, 242701, 347789, 307424, 889381, -886192, 589407, -584231, 779191, 566733, 559512, -670790, 170567, -862525, -405553, -448077, -161688, -73177, 345068, 689982, 92104, 129471, -89324, 49838, 30243, -78017, 736495, 735612, -401517, -657478, -29816, -700261, 805765, 252340, -454994, -879698, 682166, -682223, -566274, -942290, 358169, -495503, -664517, 392336, -956126, -215171, 510770, -387861, -6097, -428025, 292519, 659844, 786138, -86399, 578605, -755011, -774564, 729309, 939993, 406689, 881522, -984037};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques272(){
        Integer[] array = {189042, -176084, 497479, -580128, -428971, -307353, 535325, 467046, 486083, -193294, 772776, 697743, 781434, 327096, 450215, 560767, -110321, 419440, 744687, 634660, 150400, -650798, 757805, -234043, -700738, 176181, 346954, -412641, -772714, 362239, 866573, -459427, -7754, -268025, 283247, 875051, 347060, 642490, -350578, -76748, 244861, 581417, -668835, 291261, 501638, 65937, -683036, -127511, -754558, -965396, 41426, -674897, -937171, 857870, 906027, 540247, 305993, 741141, 280792, 271323, 568605, -518486, -681823, 799557, 893242, -359883, -940169, -38274, 364410, -733605, 120948, -357051, 123580, 617782, 340772, 22651, -453938, 699827, 530387, -377699, 502351, -420487, 209272, -745339, -47213, -879143, -142603, 729621, 784927, 94872, -647625, 937432, -769489, -67533, 114091, -124521, 617248, -209740, -944880, -815169};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques273(){
        Integer[] array = {-563255, 593323, -838872, -245805, -574805, -754952, -347700, -41943, -215164, 450624, -681713, 501564, -64316, -380817, -45468, 702690, -444104, 567512, -848901, -404074, -96787, 826602, 850269, 498457, 998387, -66582, 955147, 564021, -711390, -719628, 639469, 140960, -483111, -670872, 603405, 454756, -282088, -28315, 421407, -568242, -59948, -818988, 569516, 185936, 802883, 704147, 921387, -617801, 501531, -135651, -789935, 455478, 389046, 73240, 181083, 832211, 292614, -730822, 927108, -181194, -987988, -392723, -911980, 731981, -609835, -306670, 537964, 412006, -495088, 177062, 818287, -143323, -827464, -350868, 261001, 806127, 793160, 168584, -679242, -136995, 216935, -591225, -479991, 2798, 163831, 367842, 519862, -131175, 114488, 554559, 848167, -691312, 208532, -872627, 282815, -828777, 500235, -705861, 507826, 911584};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques274(){
        Integer[] array = {-997170, -143369, -387068, 972230, 994435, 465933, 94564, 213047, -246913, -622237, -550661, -280373, 272753, -348030, -553741, 934719, -851332, -81306, -832990, -315869, -556269, 425577, 685427, 548017, 839372, -190458, -845791, 29243, 268406, -198102, 883924, -594632, 800029, 134475, 230696, -247847, 780711, -766760, 602370, 218309, 819047, -150735, 780072, -776458, 435843, 82247, 475272, 832972, 134398, 619897, 141938, 457569, 769991, 694678, 282752, -987544, 515869, -450514, -317789, 533164, 369993, 679113, -377334, -946964, -285496, 729194, 732030, -425012, -150601, -969088, 5229, 508053, -502922, 993711, 181485, -978751, 195485, 173707, -368153, -922826, -243082, -469118, 230905, 221685, 573858, -854950, 551761, -115246, 963063, 700293, -217302, -829550, 881736, 881570, -875568, 960519, -362847, -294075, -721105, -723346};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques275(){
        Integer[] array = {-968423, 669097, -685159, -836957, -651248, 735590, -555249, 869430, 867248, -933363, -280005, 52657, -350287, -689571, 464709, 499430, -384890, 302025, -901302, 482221, 592781, 96718, 675986, 296810, 968767, 13430, -225962, -863831, -812976, -706857, 522452, -232595, 509652, -506235, -602650, -291475, -910219, -2752, 728366, -434616, 879840, -422137, -927723, -60814, -633294, 876355, 580077, 325166, 236360, 329073, 965877, 713943, -197987, -393492, -392089, -183691, -132006, 135840, -703979, -813092, -181006, 349599, -468705, -597397, -979919, 437556, 972753, -684838, -132704, 858672, -460943, -242195, 903802, 661926, 440070, -153008, -964215, 962025, -581425, 375241, -364048, 90727, 416020, -949724, 711042, -177304, -668343, 438923, -414269, -968465, -716991, -953211, -281199, 112927, 270319, 835448, -900412, 158360, 513744, -917004};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques276(){
        Integer[] array = {891988, 451196, -986074, 974119, 61885, -960073, -881556, 512346, 100830, -574194, 767923, -202303, -560511, 434096, 110889, 474106, -669293, 480392, 205262, -203692, -325813, 241453, 495472, 721132, -458814, 946407, -503399, -808217, -475181, 337149, -725056, -919553, 892712, -169068, -706455, 329201, 46258, -369052, -414144, 242354, 14594, -356404, -964657, 291716, 773606, 349613, -456683, 399260, 122635, -464982, 993171, -728025, 452339, 206731, 228693, 241794, -556399, 776346, 186781, 116473, -803392, 288727, -649436, -123619, -949481, -554343, 868814, 800347, -467496, -560437, 952597, 766254, -727577, 632458, -815348, 209477, -934944, 918217, -691295, 279404, -815043, -487376, 777874, -490376, 211723, 965184, 337120, -923258, -136038, 620223, -867044, -966252, -34006, 301968, 981146, 117554, 265462, -249395, 371708, -942834};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques277(){
        Integer[] array = {990765, 320559, 909643, 55077, -708439, -526945, 142123, -868079, -634173, 789876, 87561, 496419, -252655, 316907, 810996, -602268, 833160, 617931, -757404, -97231, 278093, -647730, 791223, 117936, 465502, -651712, -289519, 569392, 559688, -327500, -190565, -669915, 894711, 201993, 811574, 388073, -515188, 945102, -968141, -867161, -291873, -69773, 894494, -156806, -798018, 510025, 738223, 801847, -461470, -550890, 729484, -783371, -733443, 625983, -518635, 852067, 696965, -511400, -292152, 570546, 420908, -937352, 342104, 75687, 589312, 965121, -485860, 849891, 749421, -339038, -822553, 583348, -393371, -396560, 767521, -35115, 521270, 348945, 70000, -294306, -507600, 926947, -903679, -327294, -671110, 193707, 676024, 624736, -512078, -46814, -653206, 862601, -341281, 337762, 684665, 311951, -423518, 410963, -585931, 542140};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques278(){
        Integer[] array = {-135622, 735801, -805689, -886090, 98295, -162654, -139113, -543089, -563588, -599118, 937927, 213528, 163087, 884425, -400842, -281167, 661375, -792448, 180380, -408718, 343258, -214750, 74245, 111935, -620078, -288925, -137401, -225863, -696603, -577280, 329391, -608550, -278303, -803420, 737220, 826819, -584498, -843901, -88440, -400188, -15254, -643050, 402069, 13450, -117798, -107519, 765637, 596302, -856030, -33257, -291585, -616487, -701804, 364224, 173491, 20025, 545420, 360054, 889804, -222766, -113965, 203115, 191905, 701317, -749336, 820671, 416368, -338261, -900725, -720181, 473326, 436544, 907993, -893185, -632790, 60385, -73144, 35103, -467501, -856445, -60813, -479668, 204479, 593174, -528815, -265059, 546180, 170722, 117787, 727207, 589277, 614955, -338726, -747924, -444585, 92874, 566963, 46057, -29421, 250408};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques279(){
        Integer[] array = {401491, 936493, 288420, -870774, 74877, 208058, -608258, 652568, 184563, -305870, 320239, -390088, 917590, 60712, -251136, 134574, 878519, -221907, -496377, -806451, -527259, -786689, -740068, 558512, 353895, 837813, -790836, -791100, -15224, -89107, -352593, 452888, 10838, -62176, -510486, -625988, -106056, 544611, 258808, 914749, 129213, 838165, -441095, -947802, -238720, 468516, 242739, 800334, -839601, 885942, 275, 577353, -709739, -318724, 807333, 709328, -284632, 333198, 591080, -819021, -595555, -774601, -804461, -414262, -126960, -275492, 711769, -213305, -892504, -511225, -517015, -70766, -781717, 106809, -208233, -599484, -905784, -775465, 135267, -796668, -867893, -651742, -350423, 7105, -441267, -194860, -588125, -424962, -550806, 800392, 667206, 130311, 399811, 798466, 744185, -818254, -148235, 171297, -865444, -266097};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques280(){
        Integer[] array = {-391962, -677150, 844129, -650339, 511301, -123079, 564792, 721528, -832010, 54563, 959936, 744668, 5635, -571937, -995880, 693559, -586859, -868032, 978239, 394847, 982563, 955124, -587218, -407721, 705598, -911106, 352893, 590303, -176191, -690875, -549254, 605157, 28122, -319619, 713456, -685771, -815287, -642158, 148693, -790786, 668575, 631045, -839457, 182872, -477771, 720502, -673013, 622969, 729212, -748474, -292707, -443841, 370402, 321082, -544294, 70546, 812294, 336773, 920750, -620538, -597072, 599086, -661990, 503077, -977305, -123283, -294559, -140748, 452256, -123009, 466989, 430309, 852415, 196063, -96450, -998091, 395241, 855950, 568145, -53612, 148325, -793958, -883088, -834258, 536148, -216936, -87862, -962535, 619847, 508311, -101871, 571370, -832193, -592992, 49240, 260062, -747745, 697625, 412495, -95763};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques281(){
        Integer[] array = {552439, 832621, 587434, 348386, 71545, 84323, -145148, -706265, 648888, -225202, 949431, -277253, -926016, 202106, -10929, -997492, -203140, -168740, -836069, -346133, -598672, 12764, -561875, 283313, 937404, -78231, -472793, -228444, 633091, 880613, -611899, 534478, 740701, 473654, -976386, 804774, 718724, -113213, 913486, 107000, 414247, -691299, -783468, -848432, 721697, 375861, -399420, 284046, 252786, 365526, -750557, 241892, -473556, 495147, -378701, 125095, -888785, 978545, -609901, 771530, 7668, 177576, 761579, -790320, -612920, -984511, -351802, -202856, -615800, -247461, 40990, 721941, -250912, 208509, 722378, -756126, 885742, -833548, -923735, 834631, 305056, -338172, 410410, -850625, 637399, 470084, -773949, 252589, -111, -900842, -828499, 580241, 135644, -209845, -481422, -312384, 607374, 260747, 810652, 802575};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques282(){
        Integer[] array = {826328, -209227, 316233, 230042, -127591, 19413, -763045, 574224, 679697, 513712, -981522, 788151, -684262, 197491, -712785, 318307, 799500, -465786, 605390, -24580, 181978, -295969, 659440, -820584, -656485, 202663, -464048, -977913, 31033, 448472, -484330, 710981, -561900, -284604, 234481, -737024, -948262, 251332, 552508, -366409, 833301, 789184, -630054, 751835, -993375, -804301, 324624, -538145, -541550, -610206, 381915, -673404, 714742, -933079, 43074, 701097, 286484, 835990, -603336, -548109, -860370, 922996, 313747, 350828, 269176, 698868, -987814, -449055, 223938, -465106, 642887, 175216, -21256, -266733, 557245, 928563, -445938, 170335, 254699, -38189, 144367, 127073, -480695, -607386, 782666, -228891, -275787, -301471, 964087, 576321, 168432, -782024, 868770, -377084, 851846, 668485, 237991, 481974, -575410, -486698};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques283(){
        Integer[] array = {431986, -745278, 194857, 465295, 847295, -643395, 719558, -171737, -535203, 959522, -776739, 408358, -325247, -533551, 55253, 637087, -482780, -434018, -695375, -883181, -828133, 383175, -342471, -133213, 370007, -73637, -653685, 962365, -964800, -133027, 823961, -38126, -321482, 922491, 108584, 306268, -764533, -530605, 686029, -456629, 895649, 105291, 892895, 252004, -320447, -232444, -665383, -487651, 955465, 550981, 916193, 425194, 675641, 736822, 971091, -216652, 359644, 917088, 618885, -55767, 336887, 568716, -29015, 198985, 346178, 247864, -216328, -9279, 457739, 141240, -416652, 527760, 394411, -236024, -64380, -282552, 729320, 817371, 675338, -700427, -464160, 78673, 237720, -237927, 374807, -473448, -901402, 45648, 684967, 651130, 489026, -33015, -631533, -975293, -91133, 905274, 823875, 111501, 146838, 479632};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques284(){
        Integer[] array = {-266024, 609600, -99494, -534104, 890610, 862700, 515745, 910252, -739267, 534450, -25024, -565906, -974122, 361137, 594792, 482556, -501203, -513328, -852652, -223042, -814981, 321579, 464895, 429494, -757748, -588233, -302993, -773192, 114447, -496863, 437244, 637127, -658571, 536801, -432074, -119234, -329524, 471328, -304920, 770897, 119553, 212726, -234957, 206913, -279850, -677005, -861526, -237878, -726668, 59482, -805824, 472683, 4715, -247107, 350364, 51826, -767242, 505021, 597870, 473014, -467728, 945547, -744334, -877135, 426845, -376360, -438103, 499437, -191613, 558326, 530885, 557197, -329306, 97531, -414610, -791870, 386032, -779428, 375619, 10784, 382571, -655858, -786669, -531375, 579777, 817448, 61876, -942972, 640406, 840329, -28057, -47373, 957240, -899132, 515058, -150166, -790250, 411759, 545298, 450125};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques285(){
        Integer[] array = {-902505, -519861, -59722, 678950, -459095, 636721, -895901, 740976, 532786, 972094, 693414, -302268, 417799, 920556, 6981, 522141, -349203, -862270, 603846, 563176, 398726, 821653, -23445, 814039, 45730, -289037, -528248, -714767, -55686, -125953, -905416, -288250, -465206, 805829, -401356, -155012, -774678, -418030, -197127, -604525, -423041, -298436, -862602, 591169, 166988, -972004, 519683, 72321, 384711, -491968, 627086, -647993, -703925, -514747, -932224, 695202, 880173, -285730, -225712, -223540, -619312, 31259, 538545, 999582, 903673, 685661, 894882, 873999, 625169, 286442, -674557, -284227, 611524, 20885, 351293, 414002, 596048, 862451, 519821, -251824, -497889, -190960, 643786, -786262, 190389, -262039, 491014, 674908, -693391, -764601, 505860, 232461, -229890, -346549, 407993, -277564, 272635, 35475, 565105, 962071};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques286(){
        Integer[] array = {239809, 518733, -480546, 26367, -354021, 525932, -154474, -968402, -122226, -97317, 100849, 695703, -934561, 54836, -765844, -542420, 219952, -528786, 727090, 932760, -687478, 554679, 275058, -795574, 408919, 492796, -480250, -349027, 134112, 700088, -227579, -811550, 930080, 379724, -428337, -172891, 616709, -584794, 58146, -220570, -208822, 11760, 915935, -645610, 450893, -187321, 367568, 933704, -57476, 91558, 836476, 906955, -534728, 979425, -955930, -713554, -171255, -773582, -17484, 839936, 294513, -89358, -611189, -772813, 169697, 757589, 60936, -172821, 569752, -811182, -870717, -872231, 145265, 159094, -723441, 775215, -175784, 39515, -759984, -378823, -888270, 311602, -361910, 419177, -597488, -435960, 895668, -351042, 738927, -698914, -860616, 916211, 526360, -783832, -62817, -299642, -829920, 19575, -24359, 647107};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques287(){
        Integer[] array = {-50855, -132500, -240476, -617617, 466990, -557372, 105170, 5138, -863866, -53134, -979735, -882871, 824764, 623305, -941440, -979239, -567571, -593157, 163688, 292479, 114741, -236184, -612912, -419129, -487826, 89289, -616128, -545621, -973884, -383878, 916074, -636861, 455102, 995537, -877286, 100773, -41764, 700812, -421445, 637140, 279704, -345016, -259129, -142303, 138648, -231631, -453340, 262075, 458375, -210045, -789510, -795502, -221830, -467735, -325566, 54271, -821795, 648981, 433450, -197633, -483990, -218314, -754548, 268913, 467170, -603820, -925418, -184875, 269201, 469962, 134931, 75827, -901082, -188997, -90941, 992796, -634309, -309062, -76436, 56931, 275114, -99898, 343149, -813465, -688324, -236717, -241851, 887940, -480181, 150074, -930768, -856787, 664667, -364888, 29656, 844044, -842988, -821585, 916263, -385444};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques288(){
        Integer[] array = {498062, -733712, 155012, -889636, 385321, -824073, 15597, -876049, -501371, 243794, -43469, 104622, -996108, -507264, -113397, 579775, -77323, -976328, 370828, -457270, 240698, -474929, -630373, -141137, 440526, -624733, -539818, 537017, 459323, 354500, 315855, -69207, -44918, 645060, 859329, -265697, -741315, 599269, -726296, 949805, 952787, -882806, -580186, -237771, -472812, -966762, -944617, -614048, 304114, 490517, 624637, 29169, -624033, 205645, 311319, -401465, -454973, -699018, 560026, 234674, 297612, 825171, -688302, -140432, -581546, 176327, -587972, 858181, -358234, -344217, -357503, 991383, 742249, -198670, 963532, 649266, 559197, -515406, -106842, -348837, 633692, -229375, -74574, -437758, 790637, 673859, -821836, -977457, 693334, -575240, 73113, -912768, 606460, 116818, -662295, 738650, -835291, -907339, -102725, -489349};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques289(){
        Integer[] array = {910814, 52031, -505972, -495990, 965028, -164564, 907635, 565223, -476463, -892157, -746368, 847352, 652995, -268704, -754524, -337435, 654724, 891167, 29722, -596151, 383189, 821075, 139540, 259875, 57217, 526008, -58609, -645780, -258076, -231490, 572586, 261545, -277222, -100112, -426751, -997249, -826606, -52785, -695779, -4873, 795001, -872313, 912720, 637844, 668878, -478804, 174637, -256315, 555152, -508383, -642309, 406823, 425081, 385003, -268015, 952114, 227831, 346514, -694671, 336901, 111034, -933011, 994343, -336944, -265156, -68289, -632891, -564553, 270010, 477371, 223346, 466241, 740882, 963411, 160718, -65511, -783994, 299926, -111250, 763269, -197767, -686780, 984277, 301801, 997656, -774176, 865219, -509094, 486311, -152456, 192569, -756415, 661892, -286752, 498813, 841587, -84241, 761952, -134025, -376885};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques290(){
        Integer[] array = {-96800, 768056, 518130, -801676, -452170, 137932, 964617, 629737, 814954, -142027, -35494, -12430, -851382, 918121, 121186, -494833, -814957, 116798, -137975, -577201, -543460, 954304, -385199, 660533, 50268, -196348, 420901, 242828, -453394, -129086, 464739, -900396, -491911, 902049, 560053, -322496, -164127, 754157, 225358, 406482, -249537, -582906, -696299, 354060, -653798, -808996, -430712, 460775, -188447, 554472, -523828, 495526, -842155, -684329, -843666, -904165, 734657, 257503, -702134, -223102, 842320, -959000, 73280, -371188, -664064, -84552, 290724, -410712, 175995, 250224, -224673, -768318, -195951, -965389, 8454, 841167, 159184, -343927, 465736, 794500, 272143, 26210, -52921, 647234, -946149, 925110, -335958, 970877, 961900, -437630, 411423, -724608, -336217, -284167, 949415, 509798, 362526, -957674, -472877, 289023};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques291(){
        Integer[] array = {912894, 731973, 264935, -272616, 114723, -995214, 923041, 372011, 573978, -145029, -773767, 903680, 951505, 669923, -669312, 417112, -337333, 331945, -958130, 450220, -446865, -457415, -12085, -228376, -507164, 59765, 689297, -325401, 823008, -524085, 176577, 92369, -862691, -746398, 103824, -914447, -597456, -931218, 586652, -644154, 536128, -331259, 428916, 114629, 512639, -205077, -915957, 251078, -311441, 235509, 464290, -965628, -257048, -720008, 90494, -179911, -229302, 536531, 194204, -344503, -7676, -229761, -779084, 713313, 640237, -732980, -305397, -308991, -828825, 581142, 397008, 512858, -147976, -504589, 272402, 350101, 159546, 189265, -624307, -510423, 906873, -631443, 78569, -931972, -642854, 761543, -505535, -207513, -740571, -78948, -851303, 589045, 219387, 666048, -316045, 85860, 118768, 721351, -926242, -551024};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques292(){
        Integer[] array = {-247221, -79879, -173600, -436022, 67833, 701838, -69516, 870031, 578323, 101842, 196653, -374685, -400022, 671634, 726464, 497549, 972318, 348371, 697558, -774671, -39266, -557768, 257753, -170571, 583034, 697699, -107247, 961200, 867196, -264713, 179875, 190213, 230650, 144700, 294717, 32508, -207867, -585809, 439935, -558748, 961234, 917518, -138719, 144972, 659538, 824071, -507267, -103037, -16941, -686751, -593406, 439283, -552494, -268565, 122489, 444667, 268617, -832547, 66236, 246846, 242122, 890936, 56687, -523300, -236378, -61756, -493799, -197489, 309126, 662936, -658969, -665612, 829728, -73661, -934167, 131981, -683526, 924512, 493509, 694926, 603689, 739741, -991135, 342577, -53690, 72125, -795392, -557476, -318669, 953333, 532660, -957328, -607379, -786555, -869168, 901650, 163225, -761949, -620184, 727046};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques293(){
        Integer[] array = {464450, -181938, 740004, 690315, -268175, -861753, 692837, 989972, -275608, -912190, 241612, 774953, -127946, -614416, -59237, -965297, 295510, -881914, -499203, -402905, -279505, 741437, -384808, 328804, -356084, -387932, -388147, -236587, 634549, -310940, 52169, -950326, 26406, -924304, 269936, -514994, 1628, -792802, -911510, -884615, 569173, -962093, -182700, 235770, -126252, 257909, 277095, -798196, -724507, -460001, -714876, -513177, -46735, 981590, 374089, 54577, -410143, -573785, 587322, 730843, -574227, 608417, 48553, -994649, 704743, 369522, -677472, -686478, -662894, 383271, 215596, -826709, -727850, -810031, 426176, -277730, -596134, -389840, -29598, -398699, 551199, -271297, 64020, -5812, 867756, -167992, 986303, -721353, -810415, 918073, 941155, 812205, -847498, 597264, -186971, -433314, -236388, 260126, -878904, -834557};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques294(){
        Integer[] array = {-74320, -223887, 704263, -979013, 711818, 19944, 913214, -135107, 295845, -758293, 217704, 68492, 491932, 598502, 859477, -96594, 284226, -7701, 581809, 568261, 688266, 56591, -257301, -772775, -605139, 645440, 819085, 456213, 717289, 691876, 850262, -957137, 199010, 799328, -363465, 405231, -475211, -351591, -415108, -643219, -390040, 903093, -882439, 473187, -934656, 885967, 96781, -290866, -263294, 818311, 617294, -807904, 291087, -881519, -659099, 970982, -470184, 437687, 72981, 967581, -792578, 750569, 335630, 845003, 351929, 415591, -621786, -185305, -353739, -997856, -256203, -205376, 858545, 595866, 414809, -938358, -331375, 147678, 823623, 369568, 87603, -673658, -809876, 101644, 66533, -134271, -124474, 185733, 108620, -501349, 834783, -132716, -495924, -381998, 509772, 664284, 26238, -578271, -889573, 359244};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques295(){
        Integer[] array = {-501325, 270381, -21209, -359, 310000, 601082, 453803, 81375, -18502, 245165, -640165, 384392, -188458, 546087, -756645, -797289, 785548, -962019, 823780, -682572, 849450, -468510, -33150, 940734, -342182, -59868, -286952, -359407, 121217, 816193, 29566, 402798, -913767, -83000, -82313, 384744, -429188, -900879, -530388, -340802, 51378, -453603, 369041, -810829, 815371, 984400, -114507, 316847, 854756, -570876, -396932, 753104, -838443, 276604, -604127, 886947, 321295, 689241, -710767, 659265, 307548, 899594, 969721, -308469, 803003, -40010, 144285, 410738, -911746, 45250, 990666, -986307, 253973, 354243, 314510, -800344, 900576, 626957, 693398, 167475, -712517, -183056, 80377, -426037, 678641, 446355, 916285, -431260, 353373, 850118, 231781, -878611, -269638, -78750, -53083, -666907, -127883, -209425, -986434, 238409};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques296(){
        Integer[] array = {197626, 381008, -716991, 784930, 853864, 304174, -660785, 386562, 297063, -823907, -488584, 813163, 909257, -8583, -686260, -726632, 983491, -906935, 929638, -515004, -481699, 505961, -211380, 594464, 154595, 857269, -615999, 849140, 320315, -449584, 362301, 20406, -952185, -416491, 806405, -150279, 745965, 2779, 806659, -93812, -606401, 960804, 91111, -610599, -635092, -770916, 367467, 153056, -540292, 868938, 296119, -216787, -828064, 809865, -378783, -107510, 743038, 79314, -47780, -605744, 705389, 913243, 355578, -863237, -870764, -334759, 631562, 518661, -904753, -844352, 169134, -788396, -954016, 565471, -237829, -316733, 460810, -889894, -114010, 606143, 989086, 847194, -166926, 774202, 592374, 812808, 924710, -125185, 344753, 608862, -420092, 851355, 924058, 37256, 719477, 868203, -813522, -266185, 471386, 591462};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques297(){
        Integer[] array = {-168249, 947304, -311378, -748670, 145179, 790457, -435778, -429939, 665568, 209517, -475764, 482998, 21200, -335948, -147378, -982173, 644208, -833190, -84566, 491398, 602411, 68318, -906219, -46643, -502528, -16093, -882630, -599593, -307807, 230280, 91245, -754781, 131592, 2863, -724111, -882932, 883110, 283595, 656740, 999380, 366232, 683941, 771438, -889421, -2151, 72268, 843478, -352154, -953696, 563432, -335974, -189921, 170379, 984007, -791123, -9887, 135411, -354799, 317867, 845422, 383386, 806495, 363610, -657159, 210295, 668936, 976359, 522140, -911657, 357919, 415009, -87523, 318511, -659768, 785174, -818262, -78274, 400165, -186017, 960546, -215455, 565803, 10354, -482884, 977061, 79371, 959085, -74562, 552120, 865329, -739812, 17718, 933187, -281453, 302183, 318553, 816803, -892183, -19112, -166086};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques298(){
        Integer[] array = {58041, -531855, -102608, 727826, -317078, 680870, -610090, 18150, 914773, 144378, -884669, 91691, 830868, 235306, 630377, -688522, -48252, 335910, 580103, -617860, -943069, 95672, -819741, 594077, -962474, 14462, -877927, -203331, -789541, 927050, 49560, 35459, 267021, 637809, -527608, 841273, -587816, -346248, -851588, 256102, -853142, 512802, 137979, -893683, -605899, -705033, -994229, 994594, -970490, -865207, -883871, 79689, 913881, -162981, -899167, -913484, 112105, 589903, -929266, -668887, -153218, -36744, -293714, 899290, 311268, -167112, -624267, 356944, 239205, -239110, -198422, -28422, 940381, -756370, -93153, -8125, 466425, -980693, 374865, 805763, 295434, 971812, -551379, -200967, 958026, 622545, 647718, 649845, 632108, 480151, 293960, 769424, 325438, 842582, -569906, -585702, 50487, 303923, 986293, -586472};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques299(){
        Integer[] array = {895094, 302062, 543108, 720046, -176326, -61900, 62866, -898591, -315237, -288158, 107913, 471280, 245513, -125374, -437527, 74181, 629450, 515062, -54066, -825184, -421716, 226974, -145712, 24958, -736247, -842864, -430667, 755621, 717202, -447902, -542028, -906125, -248420, -567366, -646874, 796260, -185128, 551939, -547920, -81582, 425427, -461000, -723957, -520335, 453803, 474234, -117340, -701665, -302810, -528338, -620798, -532281, -10538, -104786, -513903, 583442, -69781, -768169, -468110, -504961, 557832, 462271, 987611, 521946, -132218, 915909, -699895, 357509, 298440, 27756, -657278, -66079, 67527, 709489, 289450, 840036, -422548, -130429, 209599, 893874, -64111, -186686, -454854, 716319, 498229, 116573, -685039, 118461, 47311, -663410, -728164, -570828, 86992, -378043, 343835, 402672, 221598, 389149, 299788, -875638};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques300(){
        Integer[] array = {-959540, 196840, -472365, 912454, 79676, -291845, 440640, 650665, -655034, 695330, -245833, 559389, 836131, 620499, 216214, -764427, -33010, -778402, -400473, -284446, 79952, 783661, -822683, -583260, 182203, 898677, 30067, 253127, -641631, -517004, -842102, 93352, -171000, -671839, 267832, -95378, -235197, 84067, 187005, -874877, -69867, 150157, 277737, 939132, -523574, 102879, -158593, 229858, -237941, -388982, -954058, 254612, -675714, -914145, 624702, -950045, -120411, -623101, -706245, -785208, 671115, 499468, 804124, 459417, 3887, -849572, -992677, 663640, -311260, -227364, -791505, -965034, -668214, 602522, 721757, 802215, 28797, -144820, 387069, -867076, -934836, 930417, -975369, -119977, 29422, 78117, -70238, -983022, -419581, -151690, 301416, -645003, 29733, 779571, -512833, -632983, 437318, 104156, -564304, 528490};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques301(){
        Integer[] array = {944637, -974998, 54050, -436841, -734747, -601748, -963391, -862595, -186083, -793492, -865041, 418037, -693823, 28200, -101371, -609312, 922406, 579838, 341159, 436617, 444719, -195419, -897987, -647567, 592152, 287286, 138590, 444281, -489485, -87777, 470008, -691443, -242894, -941, 524680, 433284, -734778, 521021, 359862, -968157, -169944, 917159, 617170, -137337, -652181, -937595, 642994, 368051, -868458, -382291, 845390, 217287, 714456, 333847, 17789, 812535, 97246, -51253, -243272, 304604, -756896, 771176, -285097, -174114, 487254, 715703, 831078, -104134, 624281, 311114, -58934, -172612, 607574, -595180, -515745, 895812, 245937, 126269, -629870, -455299, -523828, 461730, 81515, 578417, 547773, 633703, -825644, -687072, -621571, 265241, -616278, 348779, -584982, -865925, -963167, -348409, -194890, -67644, 678669, 37204};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques302(){
        Integer[] array = {486219, -378105, -39764, 251974, 738687, -519325, 174277, 778045, -520277, 491857, 167606, 541229, -79828, 766158, -492251, -944678, 375272, -865822, 591452, -722060, -322605, 987714, 595695, -826488, 264010, -835396, -121336, 523542, -567777, 752163, 191753, -42864, 927051, -507720, -983633, -294237, -355933, 219684, -165974, 485078, -359165, -644413, 982874, 492527, -636633, 655400, -304220, -876534, -33732, 38468, -283368, 510572, 829464, 557952, -659634, 780805, 928523, -552797, -81161, 653386, 327571, 355177, -583256, 112598, -314193, 53971, -543753, -290271, 125558, -756422, -333542, -792925, -205796, -420118, 132722, -2884, 215539, -40421, 449389, 44156, 175405, -885090, -188204, 303364, -397944, -49487, 925309, 770580, 949274, -65220, -892508, 656782, 169886, 150626, -472879, -832609, -222225, -44510, -673684, -701336};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques303(){
        Integer[] array = {-490438, -952863, 700228, 610100, -512567, 155890, 241026, 996218, 768092, -174256, 742625, 173992, 394729, 194238, -312810, -944719, -785104, -910252, 909843, -903696, 425843, 346882, 825902, -23714, -247162, 757291, -66998, 301946, 633669, 986517, 118116, -991189, -666638, -664767, -625735, 376812, -879452, 962079, 317757, 870252, 400068, -958190, -217122, 732528, -753157, 888203, 578432, 977025, -717259, -695424, -719028, 555852, -901659, 277036, -545451, -148708, -257281, -360187, -768423, 613306, -438873, -193189, -744609, -361281, 96723, -937104, 503869, -907546, -270714, -450194, 952795, -532686, -649529, 747486, -439446, 688301, -478862, 849681, -300738, -317224, 513694, 435497, -501735, -891180, -253799, -408696, 3210, 145836, 492673, -964987, -169623, -372298, -605356, -233647, -792296, -141551, -936783, -516375, -302742, -301516};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques304(){
        Integer[] array = {959115, 80047, -632918, -19164, -773188, 801811, 506221, 67255, 450530, -852881, -302738, -483773, 575055, -239338, 800438, -691355, -503383, -76257, 975458, 201176, -940831, 139683, -855329, -755490, -281161, 193078, 781252, 457507, 953947, 724036, 45797, -710930, 501091, -961269, -436058, 118752, 471453, 851543, -213505, 931948, -854398, 45688, -724333, 304202, 975721, 580338, 679887, 635684, 437263, 616411, 282960, 400654, 647862, 564520, 671189, -175603, 812594, 309952, -869273, 744886, -28719, 135936, 233904, -862504, 646715, 12888, 536026, -87718, -847530, 306921, 208111, 472580, 180050, -138970, -18090, -734217, -708187, 479476, -832778, 685324, 765997, -891334, -3508, -109118, -117279, -581619, 948292, -285121, 814004, 664424, 196943, -6710, -511997, -486582, 777775, 465210, 526819, 61060, -666280, 916826};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques305(){
        Integer[] array = {138114, -434278, 788344, 41794, -787825, 761630, 370435, 213428, 882450, 53617, 102914, -69885, 749471, -461229, -392724, -566136, 213214, 913043, 122019, -241017, 972734, 644445, -965370, 356578, -616261, -890966, -953504, 940442, 904444, -253336, -274311, 21446, 939155, -857099, -651841, -663498, -343750, 275292, -856167, -288004, 158499, -628692, -977203, -771277, 491461, 117684, -27921, 257289, -392140, 169274, -308557, 691505, -972536, 699133, 154642, -466963, -957930, 521631, -246108, -258608, -611771, 616267, -257019, 846962, 607147, -461431, -884693, 508928, 725596, 988876, -114059, -709181, 956690, -541588, 241549, -836061, -824122, -847123, 447251, 190956, -209278, 938694, 913693, 595156, 82571, -786263, -381676, -202831, -812179, 952157, 995081, -455899, -967757, 261975, 858089, -337694, 962028, -213731, 418906, -921228};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques306(){
        Integer[] array = {-95106, 541440, 434534, 646875, -551654, -453364, 946952, 115832, -650344, -626966, -501351, 811328, 127059, 25817, 753119, -696134, 157358, -196201, -105141, -539372, 93970, 240788, -685783, 44026, -508633, 821834, 157338, 314999, -887602, 287829, 196869, -691893, 939176, 311679, 7974, 560810, -26967, -248540, 6214, -519563, -443300, -505702, -659526, 819061, -246452, -349238, -649015, -81760, -890865, 199675, 712279, -270556, -387770, -718623, 631121, -274588, -689832, -101507, 4337, -508198, -569739, -35085, 449766, 467536, -142922, 908248, 795102, 446313, 460959, -852643, 378235, -820441, 212659, -96261, -393112, 21609, 541311, -823224, -375799, 558367, 499681, 403290, -57213, -444806, -985222, -839586, -347135, -921666, 566385, 669303, 109231, 711389, 481286, 379419, 165209, -564467, 339237, -99835, -802083, -399421};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques307(){
        Integer[] array = {605342, 3029, -746394, 35954, 93756, 892991, -85677, 94253, -649904, 671499, 470548, -756449, 210533, 610242, -348655, 484967, -672025, 706043, -644836, -422012, 886335, 990116, 556170, 744208, -266591, -352564, -649338, 607892, 442003, -938464, -550386, 295536, 950116, 831386, 713393, 778942, 128467, 588361, -689400, -85921, -205594, 742794, -22592, 867155, -78707, 284951, 669462, 226692, -396077, 977162, -981897, 860675, 98774, -262166, 723526, 162442, -302488, -223070, 469590, -574468, 13883, 298341, 760036, -210225, 112036, -371200, 831351, 728212, -916538, 671201, 571635, 947920, -87503, 807760, 824820, 802953, -201114, 270536, -697435, 752560, -567388, 576405, 962242, 630330, 347111, -112753, 507724, -735907, -81348, 70544, 566186, 568785, 261559, 554996, -40938, -16630, -654857, 681817, -698839, 216577};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques308(){
        Integer[] array = {-124665, -637917, -268756, 963044, 694680, 991030, -702897, -812293, 489324, -67483, 754365, 563109, 124643, 52201, 869637, 287875, -31721, -468414, -507532, 991258, 140744, -801773, 626515, 182192, 776809, 130038, 271831, 673849, 493081, -813492, -675822, 493964, 575669, 120010, -759616, 921454, 134145, 250672, -830430, -449015, 636975, -381935, 484096, -740119, 182606, 386054, 288490, -225825, -127929, 536074, -929521, 146263, -353003, -232145, -142835, -516590, -686374, -689704, 238753, 315944, 596177, 3109, -668195, -185902, 337760, -62538, 304873, 309090, 893300, -532167, -780344, -648751, -790163, 949678, -953087, 692690, 709735, 68125, -502897, -898976, -767919, 429680, 15248, -374465, -387252, -954081, 873120, -418568, -368171, 810303, 157585, -111815, -702326, 627715, -222884, 656897, 953553, -156628, 74699, -446032};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques309(){
        Integer[] array = {861210, -126624, -767743, -978177, -528997, -705305, 690454, 567022, 424087, 721695, -369654, -712126, -539516, -562532, -206804, 147960, 97095, 143967, -831735, -509732, -422950, 25430, -947335, 168128, -340734, -95652, -646851, -942156, 72084, -656917, 429782, -959781, 706198, -591152, 574229, -796671, 334756, 689478, 740118, -245045, 993289, -54264, -772800, -870411, -662140, -231082, 133277, -874723, -936313, 123115, -541979, 183271, 642093, 408129, -286980, 416988, 526334, 689033, 45536, 387810, -114799, 588263, 660333, -586137, 663372, 498081, -851148, -437221, 688000, 641964, -396067, -942460, 930667, 222088, -471806, 578209, -731766, -14978, -863972, -365156, -472747, -471526, 222808, -28728, -87429, -151985, -66470, 706475, -331295, 704853, 710109, -584031, 533259, -854408, 217378, -956075, 732083, 373855, -623580, 247621};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques310(){
        Integer[] array = {338968, 269751, 485864, -118843, -255647, 284529, 346242, 144111, -707915, 536326, 343750, 677846, 934258, 762669, -293315, -595242, -763475, 574107, -141970, -193720, 586892, -393865, 649785, -683292, -268079, 929377, -730856, 101443, 576299, 673557, -359915, 554591, -280857, -818955, 8403, 766635, -494536, 897161, -16167, 725061, -330099, -846467, 593371, 216325, -405606, -242236, -484629, -364537, -895579, 933054, 987518, -453424, 576571, 455031, 729971, 892545, -271383, 400913, 71639, 218039, -398740, -745060, 451851, 592961, 546831, -795652, 549234, 194338, -961873, 584383, 902356, -30631, 327264, 392233, 441257, 513607, -577912, 474810, -236796, -245545, 889309, 867715, -711052, 572725, -194973, 542199, -473006, -112522, 653734, 137291, 535993, 355638, -689418, 470577, 898110, 274968, -166886, 43462, 435233, 596270};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques311(){
        Integer[] array = {-221972, 591727, 47872, 132623, 808960, 491853, -617560, -768754, 330828, 717303, -530296, -124421, 745929, -923279, -823884, -235846, -502365, -612756, 415403, -185730, -724532, 572085, 192226, -931345, 896019, -507003, 72303, 441471, 130383, -831457, -95984, 976271, 838482, 980325, 295397, 654296, 531908, 917922, 234749, 575217, -252070, 716324, 833615, 19273, -157857, 179929, 845157, 837925, -302285, -346805, -888251, 113663, -419066, -420963, 169900, 172642, -523249, 919998, 1894, 47300, -129598, 281064, 540317, 422753, -143556, 44067, 953595, -520724, 79884, -787751, -153961, 500137, -978009, -793860, 491611, -326372, 244919, -534387, -453485, -449707, -540729, 801448, -131908, 121817, 614062, -384688, -722073, 491538, -191165, 88400, -87517, -291335, -782660, 852057, 468983, -11993, 105998, 851263, 168955, 865694};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques312(){
        Integer[] array = {991491, 312901, -796802, -835701, -624217, 808105, 513323, -368749, 626974, -460985, -826235, -691445, 613021, 461065, -319869, 670063, -176066, -991638, -956453, -459401, -307440, -731918, 512517, -917816, -48163, 223721, 408265, -659407, 888961, -54688, 60914, -937600, 935797, -184433, 899739, 345786, 965553, 257104, -564691, -381893, -552966, -825844, 276518, 740973, 749615, -33723, 939853, -497987, 748543, -475005, -785322, -600170, 443904, -362226, -779619, 541699, -134924, -181652, 607042, 356216, 268219, 850743, -654216, -813876, -124174, 933699, -490491, -196945, -953920, 495414, 457935, -408845, 586000, 692513, 733620, -179944, -507828, -686511, -44511, -45486, -917909, -163816, 763675, -525228, 869927, 233077, -149703, 127726, 810890, -649509, -276773, -131517, 567625, -87466, -959070, 700216, -819114, 386605, 410639, -679491};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques313(){
        Integer[] array = {-345552, 699756, 65791, 755615, -599632, -99508, 906981, 986321, -258786, 511525, -737053, 110756, 691353, 915281, 688598, -938554, -627659, -615579, -81975, -51185, -868262, -612961, 29806, -883469, 105318, -383367, -403089, -120576, -95176, -777177, -401111, 463514, -730780, -353995, -713775, 344286, -974251, 199305, -943320, -268766, -579574, -383861, 814072, 573587, -950200, -870960, -835242, -923086, -668798, -519779, 176336, 674055, -306889, -422394, 380040, -68806, 337125, -339681, -545301, 746589, 383298, -946025, 145341, -168396, -989481, 370007, 320934, 508424, -153018, -973849, 805392, 842060, 977048, 768086, 55032, -621114, -313084, 179593, -164084, 725844, -962890, -771056, -651729, 271625, 74346, 72225, -473723, -475095, 401466, -519489, -601549, -622167, 320108, 222136, -962233, -191319, -17490, -491170, -614794, 332433};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques314(){
        Integer[] array = {767402, 819120, -345237, -425593, -366978, -990989, 400962, -319742, 954702, -57758, 131127, 671766, 719507, 356191, -817289, 568047, -136178, 108983, 266252, -756151, 286450, 590982, -500486, 696146, -261537, -920035, -807961, 295509, -967011, 667642, 689433, 900906, 328617, 872625, 807752, -976292, 5479, 782047, -737746, 26395, 625687, -302632, -235589, 302055, -11500, -802220, -610100, 299610, -323221, 308570, -79323, -748650, -791648, 627461, -416353, 487909, 927241, 349007, -52668, 969905, -459670, -723764, -685414, -358429, -440614, -371796, -472832, -29307, 432572, -288472, 212152, 447324, 700522, -744891, -752643, 87246, -863501, 912176, -633868, -496072, -823617, 328749, -18158, -482103, -119790, -939182, 372561, 4066, -938358, 505618, -618884, -480566, 138703, -656085, -959793, -325335, -644096, -673778, 355981, -491902};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques315(){
        Integer[] array = {156226, 602653, 128496, 779537, -607854, -673047, -564550, -924116, -498354, -363154, 470378, 444340, 284253, 402758, -634798, -435310, -643325, 321419, -725614, -39765, 92195, 704097, 96755, -770501, -412781, -249254, -654128, -996147, 413835, 604346, 415077, 596510, -190233, -932799, 339800, 370212, -282356, -137519, 940358, 70970, 912238, 561142, 426039, 530523, 418010, -56260, -214167, -509960, 221810, -959563, -137944, -295534, -208081, -359526, -835800, -440784, 728743, -115865, 338518, -67238, 947760, 162072, -699318, -438389, -946853, -894594, -805101, 544265, 992357, 335734, 6766, 1278, 312567, -907541, -604971, 887562, 407701, 971924, -686719, 593759, 881968, 617254, -558774, 333768, 12645, -378729, -346035, -528060, -24097, 196486, -231411, -659532, -581567, -823756, 137448, -232641, 704787, 288668, -780158, -579753};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques316(){
        Integer[] array = {-84207, 493148, -382907, -102394, 703460, -827776, 252204, -429048, -56723, 939556, 663868, -630349, 200141, 101599, 897461, 736368, 807185, -970042, -677964, -352981, -688046, -904689, 962377, 355748, 34498, 76178, -775995, 126427, 967956, -262038, -542324, 84298, -947782, -791616, -660244, -596308, -591086, -145636, -954190, 929301, 751638, -289995, 267038, -547613, 563959, -157907, -919739, -291850, 68221, -455046, -28675, 413320, -112244, 907020, -777333, -224933, -96660, 507276, 359927, -360243, 643087, -551940, -227572, -395552, -83494, 677993, -615918, 495126, 594782, 92548, -978753, 99648, -638216, 852223, 616182, -437812, 220570, -198534, -949798, -591631, -308626, -7353, -814820, -790676, -971691, 425548, 398984, -353067, -520583, 908749, -977252, 113104, 182851, 80252, -666736, -95507, -480949, -544603, 162858, -61764};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques317(){
        Integer[] array = {-137408, -423259, 184876, -833028, -866212, 501427, 703270, -366516, -983861, -798151, -136758, -543285, -65095, -659664, 311869, 899156, 725687, 94769, -960143, 580705, -777411, -716031, 778803, -393125, -560624, -986161, -73266, 755836, 58839, 842598, -24126, 526263, -932496, 553772, -882576, 107954, -714853, 78588, -783763, 679604, -944885, 409063, -776370, 394840, -862630, -563136, -802314, -585401, -956546, 380716, -847905, 138336, 419900, -732381, 332580, -799485, -538927, 931304, -335473, 202067, 409034, 129488, 372091, -448939, 98796, -701101, -217834, 451212, -412945, -547026, 393699, 956034, 835073, 460630, 407013, 961546, -757899, -473661, -348068, -683553, -748587, 842082, 508939, -221058, 975884, 911011, 335479, 692019, -530798, -295076, 538305, -382361, -167300, -117804, -768327, 673369, 462236, -916297, -965687, 532642};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques318(){
        Integer[] array = {-925588, -347296, -915394, 579444, 370165, 306261, -405639, 422509, 220471, 706843, -302285, -93343, -147105, -64383, -624757, 395970, 56059, 689458, 103844, 971823, 433980, -982369, 527617, 578281, 110263, 580733, 293022, 125316, 54384, 330080, -825707, -251941, 794476, 406141, 241606, -168661, 382881, -72477, 235442, 290663, -856108, -686137, -656755, -134607, -215489, 355636, -157192, -140278, -982231, 974973, -948068, -360759, -498577, -428711, -803346, -834249, 987196, -844951, 257547, -694405, 884916, -648251, 37021, -464039, -419530, 324373, -359436, 675909, -555544, 583785, 752258, -423762, 492391, 53585, -778998, -333795, 781982, 70356, 221559, -533019, -114426, 778525, -157776, -82844, -762723, -930855, 448460, -692040, 837747, -56759, -417894, -901231, -277995, -759849, 68820, -332257, -471448, 73208, -47163, -198771};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques319(){
        Integer[] array = {-30968, 60788, 753808, -455486, 771390, -231832, -113131, 702066, -586931, 518309, 242013, -373206, -657591, -232885, -498922, -316315, -783165, -55522, -121644, -306402, -861318, 721428, 881245, 451908, -925079, 346594, -630633, -394342, -595767, 58414, 380917, -199017, 103869, 810359, -646658, -425484, 504254, -144609, 636505, 840148, -99925, 894799, 343956, 573504, 773329, 380373, 841239, 577768, 94381, -231151, -337726, -207398, -307264, 176461, -916785, -555695, -142417, -854919, -546461, -881316, 645345, -489636, -602591, -718132, -215642, -976291, 872090, 669343, -688965, -347805, -541742, -792290, 469469, -433139, 34098, 595072, 210141, 517001, -560575, -656687, -885383, 96781, -904483, -744087, 14118, -866478, -932535, -204657, -384112, -820967, -180442, 713762, 384157, -522485, 568959, 181917, 722926, -134634, 633220, -954832};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques320(){
        Integer[] array = {-63990, 949419, -460417, 899178, -792283, 556987, -782884, 707165, -192218, 474403, 416248, 385046, -822625, -684708, 71259, 449123, -124281, -486377, -961978, 39377, -26475, 590843, -449875, 182950, 129088, -380697, 81503, -359368, 468843, 560015, 354874, -855786, -729682, 98397, -256590, -455454, -654300, 2655, -915012, 616674, 129585, -146674, 266963, 334893, 220267, -285834, 724750, 985403, -677458, 998831, 48827, -801352, -924018, 593416, 637309, -347558, -407437, -826523, 988589, 331979, 859171, 290917, 611104, -353520, -754363, -868967, -96079, -754684, 881283, -545176, -261994, 378747, 608537, -485523, -290895, 398656, -992621, -521528, 99094, 749707, 628890, 226768, 228967, -758433, 150677, -261034, -848251, 144985, 818566, -747596, -640026, 859297, -314989, -903680, 845296, -814849, 520346, -963712, 20615, 665066};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques321(){
        Integer[] array = {360827, -738096, 524497, -662328, 787259, 577405, -144202, -842507, 615174, 164561, -806551, 911209, -552444, -349215, 623215, 167565, -884522, 303255, 905050, 498660, 398886, -321330, 332957, 556243, 185857, 582271, -520228, 231286, 405838, 147064, 358120, -582745, 895717, -683245, -698385, -980458, 402407, -96812, -545347, 175376, 713156, -24845, 189119, -469556, 286247, -387024, 27419, 324859, 24208, 851222, -602085, -925958, -902407, 577045, 880913, -220812, -307987, -368309, 499669, -815573, 457862, -953164, 638560, -586526, 838050, -653490, -550558, -273984, -161986, -385778, -235673, 786873, 38731, -719972, -999820, -253163, -962732, 358080, 553623, -722653, -768151, 228446, -745054, 742446, 691928, -351047, -211785, -436893, 349802, 580394, 661187, 176472, 263661, -156608, -875030, 910797, -276281, 853307, 400381, -664620};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques322(){
        Integer[] array = {-44417, -982528, -201492, 483343, 814952, 683717, -688965, 142600, -366970, -682948, 138347, 506117, -314382, 672585, -680195, 766409, 261980, -899811, 874006, -349172, 844701, 181172, -332893, 378946, -382983, 212664, 410057, 867376, 745987, 114946, 818184, -473500, 629748, 287660, 287146, -638693, 658301, 374419, 921172, -850323, 254072, -396384, -877517, -658400, -532699, -357177, 149078, -512574, -100193, 796241, -41863, -334078, -482604, -256458, 982103, 795759, 587047, 859260, 683049, 154157, 362833, 490963, -927894, -698410, -568139, -211765, 637405, -211000, 677345, -389337, 113726, -673954, 488341, -176443, -495861, -237137, 886690, -763429, 468655, -462269, 431221, 614114, -418240, -126018, -216507, 944877, 502853, 921276, 270827, 763247, 357698, 153055, 575393, 322088, 598803, 410500, 813989, 274157, 890245, -763539};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques323(){
        Integer[] array = {228258, 919270, -914274, -464669, -683012, -488630, 357628, -272198, -552588, 308637, -570768, -880823, -433495, 822348, -608029, 610891, 453102, -6884, 613072, -991963, 500082, -730927, 765356, -850895, -805576, -475374, -487114, -101020, -499940, 591003, -608299, -451010, 727138, -356554, 962999, 398339, -628802, 426338, 846790, 96248, -690897, -307597, 907970, -660988, -517402, -937148, 321589, 918102, 442103, -728424, -143678, -256922, 974712, 364271, 560645, 484734, 410258, -760801, 68456, -928274, 813798, -330559, 556539, 845950, 290823, 100427, 994757, -621028, -867739, -425994, 959196, 726370, 295772, -2955, -412315, 685072, 303039, -932079, -626837, -294035, -748070, -351397, 987856, -676722, 199234, -336703, 178626, 186699, 479464, -82965, 659055, 623028, -787451, 843054, 2465, -134093, -689454, 723273, -83927, 507313};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques324(){
        Integer[] array = {227180, 51227, -608793, 911004, -717840, 795875, 565694, -309297, 510100, -813377, -310605, -292743, -922988, 494130, 940808, 673692, -371682, -299837, -221278, 989020, -998542, 913973, 776939, 310574, -613036, -900641, -602844, 470990, -768414, 934296, 661300, 886591, 208109, -761962, -97862, 386613, 379451, -513608, -605226, 159324, 647555, 580683, -627284, -592089, -138886, -940292, -517806, -897144, 25386, -605152, 705846, 974243, -96653, 854160, 953759, 37254, -55042, -612871, 82934, 923063, -907055, 792894, -264041, 589892, -281797, -120278, -652170, 757348, -208557, -837636, -583338, -587542, -399033, 595413, -135337, 893524, -732188, 684746, -816905, 921096, -968713, 962226, 292348, 433073, 647994, 463173, 48242, -8790, -981606, -85180, 253307, 975213, -321904, 586050, 755462, -422344, 184334, 889126, 268786, -854439};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques325(){
        Integer[] array = {-189931, -841908, 229806, 872241, -866275, -207988, 955107, 803146, -808975, -310824, -938915, 566, -260993, 27096, -320825, -910577, 420283, 420724, 536724, -937393, -378995, 890091, -653640, 281446, 564881, 657637, -700974, -663003, -740485, -119206, 903720, -854181, 257171, -356345, -446088, 725412, -157986, -584473, -71458, -897771, -591340, -245372, -327695, -323402, 690764, 779636, 497374, -36448, -500081, -770929, 67775, -778475, -460199, 569032, -60548, 231246, -298058, -655360, -643115, -340469, 647919, -414623, 746171, -806888, 973828, 725361, 489050, 284383, 570150, 402790, -268010, 380938, -34466, -717186, -265253, 466583, -601853, -324026, 410307, -551313, 297234, 937309, 331034, 214445, -321086, -240566, 429539, 149702, -265408, 262338, 975300, 892344, 556934, -128295, 580945, 913004, 628147, -198746, 72731, -75888};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques326(){
        Integer[] array = {97936, -130155, -615487, 725326, 370612, -372747, -940573, -121386, 725479, 600184, 670633, 862545, -959101, 320604, 426913, 231798, -886227, -999092, 380668, 243178, 618706, -871546, -757320, 525695, -966421, -505338, -550069, 634345, 181406, 901778, -329746, 790461, 679868, 540455, -767044, -45393, 606316, 444755, 624713, -320652, 311667, -975809, -660781, 477482, 533701, 451118, -616475, -606255, 624072, 766722, 432971, -299689, -727926, -892152, -628252, -705467, -524958, 329100, 721069, 449282, -117930, -825468, -746700, -687864, -252578, 281346, -698468, 278513, -429779, 538422, -372590, 663078, 423533, -201988, -136538, 170460, -773101, 975225, 241128, -953970, -521358, -420234, 256210, -470104, 49877, -478821, 862822, 83815, -550285, 202716, 150648, -354199, 367544, -555019, 45466, -943962, -110879, -331991, -174258, -783833};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques327(){
        Integer[] array = {127244, 512195, 787848, 941798, 836487, -618290, 504040, 73825, -214063, 631501, -606165, 4465, -779872, -440055, 198001, -861990, 854786, 583180, -518383, 568822, 523738, -51153, 870226, -510169, -588016, 63637, -407398, 989943, -297556, -262049, -475276, -433247, -876829, 577179, 443536, 400527, -915166, -692918, -646066, -264470, -197087, 93675, 448719, 50394, 641511, 231267, -949111, 449812, -570706, -821767, -647148, 804240, 213360, -426586, 336006, 724653, 905445, -783499, -961893, -14407, -96513, 929074, -967760, -756179, -772596, -264237, 970457, -90269, -34880, 217505, -88765, 48009, -445950, 125744, 938105, -166902, 314164, -699552, -475747, 676217, -799717, 678573, -40367, -989154, 177380, 657054, -510278, 51425, -285795, 135660, -184929, 709646, 617070, -971233, 988909, -510803, -650890, -177074, 596535, 45033};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques328(){
        Integer[] array = {-670796, -418198, 27463, 144859, 557302, -685381, 775645, -982425, 777634, -520654, -997213, 772856, -73492, -583408, -777454, 688037, 315024, 635631, -662753, 311601, -87492, 581919, 962870, -979261, -322526, -190410, 940306, 357847, -88410, 107584, 845036, 523897, 104893, -472252, 228367, 820658, 122113, -812559, -138252, -277864, -528971, 78630, 802633, 862950, 432491, -421515, 730120, 142937, 721509, 862699, 504782, 416037, -355625, -630238, 591112, 456954, 33886, -891895, 681343, 92395, -678837, 860031, 595071, -231809, -896001, -309944, -187919, -691908, 462366, 894864, -607239, -124743, 431175, 146033, -933487, -16786, 533143, -896944, -681850, 584501, 334446, 821025, -222299, 507419, -531529, -606334, -693900, -592114, -356782, 821649, 898421, 306356, -475695, -375776, -533857, 654786, -92248, -269297, -874577, -383400};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques329(){
        Integer[] array = {-305781, -254538, 5386, 227736, -857803, 877341, -425636, 448221, 199054, -844227, 153372, -656081, -839542, -184572, -560951, 869473, -582150, 399161, 392572, 583122, 820952, 916609, 892273, -890772, -106217, -18907, -148633, 842483, 3302, 908541, 130940, 288023, 556260, 471865, -198721, -448059, -618165, 826344, 116972, -313562, -167464, -441718, -284478, 519980, -320435, 50525, 883580, 467056, 636089, -630863, 289151, 330533, 472813, -177276, 550607, -470569, 528883, -254401, 442760, -983754, 874669, 69508, 656366, -119874, -773810, -615525, 843136, 160672, 951572, 315218, 780736, -642689, 636965, -317194, -209435, 132228, -627553, 541453, -577629, -126144, 764650, 354814, 286698, -731760, -646474, 828502, -182515, -419203, -528055, 230203, -476300, 654004, 36237, 691511, 712104, 385865, -574094, 685553, -861975, -173695};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques330(){
        Integer[] array = {-774512, 669676, -395563, -987009, -830098, -33366, 373381, -720246, 476572, 575809, 695171, 920110, 632868, 317903, 346631, 28483, 849513, 756800, -680539, -743757, 257436, 667819, 581645, 881291, -476422, -818247, -228893, 157215, 582722, 447486, -462078, -699200, -507762, 102611, 759384, 328306, 527619, -352368, -498925, 652669, -892419, 295052, 408480, -624352, -652430, 415435, 331605, 63678, 273878, -177606, -205495, -278557, 696851, -724583, -888731, -850001, -638500, -416870, 578888, -745960, 974432, 391735, -823809, -470621, -118962, -946012, -884401, 111733, 848295, -677709, 855769, -578984, -861901, 49327, -744968, -347965, -689143, 389171, 803182, -952206, 903650, 885903, -620351, 392682, 85227, -808724, 2299, -825598, 58458, -289765, -156429, 7111, -145858, -377212, -267665, 830479, 834557, -268899, -174099, 743429};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques331(){
        Integer[] array = {-475002, -726355, 503788, 889403, -807573, 801049, -988027, -864112, -718007, 924802, 928518, -88435, -654803, 857319, 908757, 469614, 641404, 64508, -334613, 447481, -80215, -672070, 730391, 126221, -63485, 467202, 983818, -667142, -839672, 592044, -326676, 679974, 716820, -807836, 156526, -155148, -251179, -431661, -148957, -168886, 353394, 825020, -111934, 30934, 552646, 633623, 146986, 328365, -414250, -323381, -792899, 166439, -579459, -80281, 751560, -418034, -761421, 446443, -17266, -310343, -74507, 328600, 77431, -150468, 111865, -400073, 472974, 316661, 267443, -379259, 899174, -136476, 942755, -571870, 424426, -945842, -504654, -111018, 588452, 463079, 506927, 643656, -245194, -659725, -229130, -392331, 469842, 399542, 259016, -566676, 754307, 58230, 883372, -848128, -783756, 21919, 362624, -552345, 185048, 938616};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques332(){
        Integer[] array = {88200, -569430, 422361, -377856, -394212, 107506, 353899, 246259, 990441, 428556, -567098, -784077, -780370, 506319, -788877, -377326, 886596, -162190, 986229, -127710, 616449, -330827, -874883, -275237, 731050, -797018, -470162, 848187, -615081, 109457, -76631, -689095, -814100, -464893, -359229, -251908, 882480, -532316, 317073, -157491, 653321, -204974, 319184, 184563, -977563, -888091, 520752, 498027, -619889, 984282, 482368, -667938, 844988, -694172, 741369, 22687, -634459, -466644, 843052, 494466, 356148, -769357, -820833, -465207, 734736, 588198, 616087, 455461, -754103, 120177, -469381, 124902, 35227, -920639, -916745, -271163, 672880, 374880, 204969, 405747, -910362, -531702, -913249, 675848, -441182, -525547, -541126, 833915, 571910, -418088, 143853, -89281, 435901, -444833, -22275, 103192, 382088, -728747, 700594, 234999};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques333(){
        Integer[] array = {-708974, 609121, -187425, 87604, -539148, -582418, 893780, 307010, 516822, 792213, 923871, 290980, -206774, 516264, -294365, 901270, 921428, 40710, -13465, -285556, 439227, -403927, 832678, -418726, 634102, 148305, -505841, 693721, -296285, -914504, -436629, -439538, 288319, 26213, -603855, -487638, 545431, -347256, 613734, -998264, 572510, -181688, 387454, 650898, -941375, 124075, -773378, -310647, -45300, -78952, 253701, -102004, 861072, 156387, 687615, -131541, -851477, 11943, -935122, -461257, 967624, -367729, 31435, 682402, 571627, -580055, 137841, 334180, 840192, -422875, 842441, 951101, 536510, 552609, 178734, -328051, 759475, 558336, 736068, -769669, -117316, 160595, 922278, 895431, 492793, 887047, 979835, -514508, -959604, -181199, -491781, -82847, 720257, -196568, 844275, -178111, 16103, 86890, -473185, 6925};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques334(){
        Integer[] array = {351430, 263888, -142103, 838728, 379764, -573414, 243643, -315247, 461596, -528726, -450411, 751534, -887010, -659424, 226638, 9129, 973979, -342375, 617950, 908492, 888569, 28447, -559417, 264986, -439791, -779298, 579458, -628596, -887507, -734851, 831480, 407575, -569017, -505615, -732922, -368857, -768323, 689753, -688586, 102060, -401982, -8347, -316438, -201044, 272416, 69163, 499997, -676000, -139629, -631564, 685871, 389245, 567138, -642261, -673165, -636815, -89192, 776905, 948866, -714652, 684786, -73302, -390989, 137224, -82341, 61580, 429675, -895562, -768227, -779324, 470872, 164442, -377709, -546286, 376652, -123002, -482753, 915454, 188157, 798926, 175164, -554241, 981281, -43744, -576133, -57029, -115924, -746102, 749458, -236889, -991961, -369515, 857131, 105918, -404668, -894333, 31182, 482552, 841346, -350869};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques335(){
        Integer[] array = {243596, 166123, 915334, -493033, -669531, -459593, -782639, 531204, 705533, 168783, 416606, 944735, -169824, 989570, -16484, -265499, -353435, -348930, 388666, -668076, -568384, 506989, -557580, -875010, -128319, -305251, -450083, 662208, -167496, -242120, 897128, -740741, -785530, 507381, 47923, -737611, 144484, -366832, 133688, -403738, -318426, 537021, 443371, -780571, -596116, -384145, -503935, 317219, 495362, 579649, -571692, 965662, 623887, -144835, 781698, 472481, 677602, 665012, -786904, -686855, -405946, -538660, 273875, -584874, -667390, -56835, -537085, -285413, -338739, 848973, -837541, 309681, -994586, -535902, 886507, -922385, 459694, 73137, 793347, -955154, -295835, 80323, -446270, 668371, 945364, -244593, 425853, -274741, 150157, -622984, -700305, 69873, -850881, -851798, -954758, -14133, 672911, 814186, -330647, 798076};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques336(){
        Integer[] array = {-33405, -726210, 108604, 396091, 818036, 92516, -294841, -27128, -486945, -827336, 639902, -645884, -225311, 614280, 661755, -686871, 575213, 457543, -921102, -837052, -214166, 384324, 414519, 5634, -730699, -318656, -249554, 813955, -501614, -568318, 362023, -907933, -885564, -742407, -880869, 801949, 199078, 524169, 128524, -571012, 280590, -945853, 768092, -326656, 67932, 78009, 960831, 56541, -339808, -273096, -749915, -292986, 784719, -576201, -62507, 354483, 93171, -498158, 998100, 966637, 65286, 742301, -799446, 804150, 907312, 644036, 613231, 401148, -119589, -71671, 943886, 731057, -887924, -222548, -365002, 821684, -304649, -203730, 593506, -137495, -932968, -674952, 909315, 758596, -304268, -633358, 557496, 442356, -377732, -471643, -768499, 77049, 481065, 609194, 942752, 646246, -994997, -581170, -124961, -204096};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques337(){
        Integer[] array = {760579, -788499, 278087, -79941, -32028, -900578, -252644, -58, -975889, 907513, 722382, -913076, -845050, -994608, 561413, 29267, 360299, 208916, 631821, 646815, -6085, -778518, 947719, 933249, -269194, -676258, -77981, -832783, 493605, 249995, 86469, 967049, 603254, -686102, 160619, -824510, 988679, -504991, 473142, -376407, 605273, -253217, 59233, 774108, 852188, -970180, 908400, 306905, -710612, -252367, -984763, 920101, -426800, -536181, 105539, 80734, 897432, -156361, 604616, -636557, 681319, -366703, -839714, -254427, -758450, -599716, -747474, -490668, -881619, 692349, -49949, -296941, 4174, -605490, 137064, -109559, 336668, 213771, -983971, 452910, -733555, -642863, -245151, -232514, 691919, -725444, 606105, -824906, -640302, -429813, -589490, -621365, 280732, 609301, -532122, -574284, -699914, 114514, 627789, 236598};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques338(){
        Integer[] array = {-626935, 862435, -185679, 472438, -903745, 545403, 272706, 149338, 298119, 694298, -899758, 82888, 374297, -388416, -362583, -683313, -326101, 107687, 639913, 885536, -935090, 908907, 588361, -514990, -730758, 505977, -363764, 556915, 761296, -569836, 645767, 164296, 177883, 389135, -172324, 216821, 410909, -415008, -943859, 828508, 224474, -12536, 119259, 309031, 99388, -410654, -898182, 783860, 594575, 551273, -763133, -573887, 74869, 419643, -407153, -136503, -739836, -517993, -614788, 227825, 162365, 996471, -41234, -299924, 400429, -427427, 373618, -4927, -792307, -586461, -502516, 713689, 46202, -770414, 883417, -959256, 886238, -99568, -370491, 589402, -957443, -366784, 577586, -26312, 573433, 56904, 133050, 351594, -367242, -495994, -691315, -104667, 101856, 416698, -332374, 165756, -122505, 842117, 893782, -406821};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques339(){
        Integer[] array = {-197714, 733953, -736304, 425162, 778801, -127998, -644880, 599717, 872410, -922136, -268228, -713805, -315212, 518754, -5316, -775396, 39994, -25910, 539744, 736259, 822879, 408043, 826554, -662784, -352607, -418257, -807979, 509513, 913621, -615471, 103784, -900794, -356683, 999028, 521127, -283863, 879975, -884580, 165409, 134885, -894994, -748495, 901182, 942554, 296072, -475116, -163455, -815098, 788906, -459818, 466074, 173550, -162527, 447408, -949722, 844789, -25279, 909166, -66819, -621398, 525623, -384054, -803548, 429334, -575889, -463958, -286534, 254199, 430537, -364160, 787845, -123640, -245239, -911933, 584831, 341505, -958653, -569140, -878644, -184496, -827530, 512298, 977343, 393207, -169196, -148210, 414246, 351975, -330186, -504660, 518431, -430283, 83005, 549876, 301865, -882002, 185843, 230068, -63081, -986693};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques340(){
        Integer[] array = {409045, -246184, -349893, -650395, -242762, 386796, -539884, -745239, -444178, 148080, -951779, -696853, -312073, -615773, -184953, 968104, 727570, -794799, -198238, -820703, -83773, -183808, 805012, 870381, 346821, 268876, 400197, 176009, -331141, 152180, -872429, 187372, 464260, 609001, 271873, -176461, 24220, -708636, 414532, 710198, -414313, 334657, 829411, 746239, 564191, -524886, 332325, 394922, 281409, 340140, 28168, -69146, 940372, -93775, -499914, -826269, 154697, 190699, -880665, -526083, 351725, 239696, -785987, -877907, -394900, 747038, 47252, 185034, -546115, 198310, -575741, 569609, -327580, -631469, -819223, -321299, -930702, 718196, 990657, 824201, -585233, 541550, 801433, 632371, 691773, 903895, -629784, -742691, -172131, 27258, 292697, 348069, 222533, -396055, 951419, -110651, -655214, 676355, -230615, -543348};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques341(){
        Integer[] array = {-360530, -123271, -528813, 38192, -979484, 30331, -218129, 917131, -88529, 148224, 140335, -248624, 102432, 934010, -554735, 867203, 137173, -206264, -219427, -231340, 451169, 258126, -980443, 355354, 485440, -99894, -102568, -913059, -295104, -465973, -509987, 538672, 856055, 937102, 317621, -415617, 510067, 488466, -806586, -37254, -153579, -669816, -301549, 276280, -366346, -971038, -430753, 403492, -761444, -831073, 241171, 835497, 350812, -503978, 112631, -232178, 176355, -385456, -84767, 855352, -25709, 21484, 513560, -754245, 622878, -659172, -185212, 237411, -544502, -611223, -172287, 555461, -50579, -480321, -140741, -189752, -208332, 328118, 421062, 93947, 604207, -567495, -231669, 282595, 41557, 367571, -164356, -264530, -222926, -435228, 184678, -488530, 135976, 205689, -408423, 484770, 640598, 603550, 140537, 320035};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques342(){
        Integer[] array = {53656, 310903, -178428, 516415, -318883, -935703, 685028, 347685, -648401, 592528, 358051, 42398, 201411, 839761, -725753, -628983, 826816, -398473, 488544, -547900, -328948, -389613, -38738, 347885, -869376, 72047, 141266, 71819, 338670, 578124, 59022, -20936, 902831, -879871, 128351, -632470, -306246, -561080, -179387, -896886, -149230, -15454, 25973, -118696, -491094, 372026, 544635, 331489, 323304, -833514, 381282, -286021, 377068, 768813, 317112, 444081, 372189, -960482, 511266, -256933, -80237, 780967, -472294, 494886, 769980, 968042, 479503, -728893, -461054, 293001, -832256, -293977, 963158, 361032, 818829, 379659, 12698, -371538, 160253, 962290, -479515, -857706, 564081, 586339, -85630, -134271, 972867, 866789, 668402, 668035, 881322, 205193, 198869, -25716, 247286, 656621, 901618, 157547, 936724, 920003};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques343(){
        Integer[] array = {750761, 114591, -252599, 458935, 165723, 392624, -851180, -151224, -952868, -223355, 947297, 563995, -743364, -315734, -466270, -478526, 995281, -493675, -689760, -989524, 800416, 681831, -329653, 981846, -543988, 995790, -777881, 84846, -236542, 56577, -978407, 51733, -372475, -245670, 420951, 850008, 449008, -573277, -961016, 879399, 827381, 152587, -156855, 399092, -213811, 628449, 802581, 229465, 428739, -457037, 11563, -677467, -529493, -919721, 258288, 201698, 27074, -447177, -347891, -699981, -829271, 471937, -779642, -327292, -726611, 410768, -757747, 532998, -960591, -521563, -832169, -473087, -607450, -718770, 742550, 363373, 670860, 551906, -759169, 736329, -600660, -842341, 952695, 352533, -179775, -865013, 235111, -854438, 930648, -976654, 792871, 202892, 538544, -293376, 115605, 170064, -987985, -834028, 56852, -789821};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques344(){
        Integer[] array = {-61961, -192932, -65902, 289593, 429219, 88290, 361302, 178272, -922021, -735014, -173634, -370743, 469768, 500202, -969900, -587521, -606190, 894798, 287493, -863487, 654889, -136210, 652466, 12603, -100144, -561426, -815774, 589749, 871305, 975611, 363642, -581380, -335161, 449614, 426409, -618022, 234361, -950609, 155627, 246090, -275564, -336320, -230394, -181454, 439162, -415883, -759919, -793411, 8407, -56357, -483812, -165465, -961973, -159003, -193639, 710568, 383966, -391633, -164929, 714103, 301100, 200619, 528421, -247129, 270983, -182352, 499443, -149032, -935485, -188316, 847718, -318916, -555052, -458033, -395814, -318572, 809900, 192848, -679103, -440423, 612839, -942971, 210851, 711199, -646341, 293218, -124271, 437467, 220728, -363944, 744398, 628933, 968081, 814819, -571667, -250205, 208002, -696102, 345800, 315776};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques345(){
        Integer[] array = {-20223, 354237, -415367, -980221, 271852, 522237, 582665, 413322, -911672, -344179, 366797, 487063, -194442, -658153, -747448, 597238, -263322, -569718, 752682, 591670, 380972, -693344, -36491, -773853, 309715, -909940, -422108, -607847, 214476, -835066, 323104, 905484, 770825, 887215, 143463, 790543, 767421, 552738, 749246, -492001, 561384, -221348, 474758, 555763, 256775, -644627, -692631, 358011, -170377, 950066, 842476, -846674, 699283, -33597, 831504, -269399, 409377, 92216, -71807, -135815, 519858, -330956, 465181, -543698, -915885, -17962, -473870, 291760, -642692, -696757, -886061, 827839, -128681, 301391, 6553, 593311, -405783, -440956, -535031, 617820, -966195, -897507, 180938, 283913, 76611, -878582, -898941, -415649, -754326, 645051, 296020, -391227, -325079, -175221, 572071, 672416, -75212, 92252, 563938, 43480};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques346(){
        Integer[] array = {-561788, 20135, 593264, -375060, -584134, -821339, 379122, -349273, -47930, 675761, -413937, 678854, -598885, 575822, 935765, 994356, -514256, -462358, 607195, -923317, 216246, -291522, 170681, -594615, -858304, 170048, 181059, 934511, 107431, -841897, 434609, -531192, 104435, -537138, 137073, 946646, 933248, -609906, 900175, 679590, 997175, 230421, -728837, 943732, 109193, -835083, -732348, 708285, 827279, 363306, 598197, 169603, -738992, -270372, -729527, 363296, 476923, 973600, 410157, 610445, 800671, 324347, -748921, 633038, -536125, -445650, 477659, 49737, 178375, -980500, -629425, -358578, -28510, 395571, -953810, -272563, -228109, 641234, 729129, -398465, -563842, -128365, -887715, -171370, 204076, -493971, 742638, -582985, 605127, -961982, -883236, 806193, -914217, -711000, 843384, -662637, -72914, 309668, 83452, 528782};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques347(){
        Integer[] array = {-511274, -534164, -89838, 924904, -912646, 826631, 177187, 368626, 773431, -348768, 872492, 492765, 278750, 507924, 544616, -329578, -207627, -459077, 600214, 272667, -683606, -838628, 882730, 912666, -596115, 912839, 344160, 34926, -405816, -587073, -404316, 429469, 647793, -544753, 210776, -174323, 80029, -60010, 109899, -538481, 538378, -958828, -838024, -148777, -766909, -319831, -841354, 721119, 209651, 455384, -654166, -225818, -516847, -65727, -43063, -320296, -788261, -426757, 194483, -54317, -269109, 738020, -488375, -681698, -956886, 88671, 411702, 887914, 903134, -886848, -112705, 397870, -313853, 31359, 110629, -426141, 364426, -175837, -45384, -391484, -802031, -998081, -125203, -678043, -416365, -332984, -460697, -233096, 842381, -474141, -900099, 261589, -931186, -281449, -395691, 399811, 912036, 278603, 654679, -600586};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques348(){
        Integer[] array = {803770, 395993, -338178, 766577, -879251, -519038, -650736, 147413, -538191, -690798, -499428, 66203, 63079, 730086, -21662, -146130, 696512, 725371, 270697, 193119, 287931, 807478, -662761, -854968, -696611, 674916, -132179, 527499, 264869, -774125, 635212, 23533, -318807, -337107, -341292, 528033, -145355, -693283, -960363, -198582, 692256, -139796, 836199, 218059, -716369, 921896, -996877, -248099, 163458, 775707, -350455, -925589, 897540, -821124, -935281, -510403, 470742, 422029, 28002, 45518, -512361, 135128, 974711, 743723, 83003, 553670, 41545, 274309, 967580, -770260, -14726, -344950, 541254, -958336, 194823, -216343, -747205, 383099, -71795, 407797, 613323, -381230, -743689, 125370, 713692, -611105, -131893, 257652, -186476, -714936, 769862, 865950, -115066, 671113, 193462, 998688, -378144, -592002, 291642, 660185};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques349(){
        Integer[] array = {-919070, -46280, -743725, 627960, -306412, 639209, -470915, -737391, 128282, 147170, 954163, 242300, 748992, -566563, -850709, 612661, -246948, 738220, 406079, 367120, 514157, -333190, 714248, -644028, 614048, 107998, 838212, 898805, 270234, -594125, 671379, 918400, 553427, 558702, 577610, 46778, 709646, -164061, -671705, -147599, -17382, 450785, -948975, 201235, -40681, -555566, 845656, -363673, -998065, 551492, -107582, -903562, 137240, -14709, 394094, -984182, 79327, 406096, 108536, -562126, 985999, -939412, 742044, -667983, 533666, -795810, 993323, 100215, 729881, -347004, -298285, 434218, 865732, 45278, 957129, -78514, -355070, 793531, -705260, -586774, 938034, -812892, -160773, 903864, 420180, 333565, 268312, -432026, 889110, 648604, 391789, -323080, 328292, -999999, -670364, 149952, -38499, -66591, -306093, 914073};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques350(){
        Integer[] array = {-461977, -779679, -215255, 551490, 480578, 214935, -99398, 228967, 138170, -140086, -994319, -198536, -992441, -282910, 661586, 237910, 87477, -746719, 880711, 203610, 765699, -721034, -587702, -455088, 640315, 466655, -278251, -764602, 941255, -323288, -443603, 726096, -749100, -737262, 989451, 593779, -106940, 215470, -971911, 840909, -53915, 426009, -772523, -175983, -565289, 312137, 951851, 24365, 354217, -481269, 74559, -250637, 650908, 745520, -880271, -306239, 505990, 928195, 694619, -337717, -976844, 352235, 121906, 613406, 309135, 616165, -636415, -637243, 913632, -263912, -765259, 838581, -437828, 48065, -304145, 431024, 345032, -563140, 776527, -574547, 693370, -177882, 470471, 216412, 497998, 296953, -921892, -384924, 502062, 117004, 982993, 853494, -595685, -267812, -896503, -141255, -89581, 221637, -864911, -121407};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques351(){
        Integer[] array = {670087, -54838, -735669, -608539, 730260, -232669, -693414, 180051, -103649, -204984, 644750, -133037, -407696, 914894, -982975, 452768, -841419, -899376, -699041, 436990, -816950, 221334, -488268, -832028, -893605, -543152, -333915, 343340, -320606, -349825, 316677, -316387, 856672, -900185, 611288, -213082, -790574, 705507, -881475, -539551, 7978, -50878, 171978, -222141, -827695, 736941, 183236, 369902, -684103, 347922, -549937, 930833, 554779, 405968, 942565, -630140, -268943, 96691, 119904, 535165, 309127, -168946, 424580, -700180, 676867, 760002, -433547, -407024, -726004, -709295, 863714, -423335, 658688, 534312, -26072, -313169, 255240, -107634, 711800, 786715, 663252, 445098, -601546, -33953, -387081, 47672, -318474, 6198, -730394, 938104, 336203, 139977, -364988, -229711, -281426, 58071, -303011, 365241, 793779, -200367};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques352(){
        Integer[] array = {884726, -158622, 134854, -901932, 969827, 815104, 734953, 322749, 402959, -53841, -122187, 169582, 959826, -448019, 615848, 170197, -224371, -617090, -980017, 67757, -31269, -611522, -78235, -643320, -724118, -139321, -117989, -36832, 759426, -916817, -180884, 83551, 360649, -699241, -709652, -243428, 238642, 100387, 645587, -601700, -148600, 286361, -693866, -191477, -964859, 363878, 192405, -955096, -325569, 158368, -335334, 539626, -936151, -498336, 810003, -485771, -771939, 968387, 896132, 929744, 320962, -117322, 949389, 571981, 891415, 806090, -258403, 884513, 501361, 805559, -680754, 789381, -829851, 83834, -191575, -114544, 871932, -827072, 50427, -288127, -995744, -417761, 648399, 435816, -801252, 16012, 976298, -892283, 490891, 438122, -736446, -354347, -929974, 960626, -451630, 847035, -583253, -969371, 40968, 309342};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques353(){
        Integer[] array = {-679370, 452180, -144930, -159433, -879654, -378488, 374312, -286368, 51560, -570521, 707095, -215014, 165895, 489639, -324211, 791524, -953581, 272300, -930905, -974396, 1743, -746515, 389878, 831883, -372343, 268553, -632459, 886669, 805084, 795797, -179449, 923619, 866537, 713082, 271397, -947915, -728125, -203582, 875002, -494793, -226008, 208612, 235426, -122449, -623668, 754661, 790590, 754441, 859308, -597324, 788901, -564563, -566291, -114058, -689721, 533105, 834349, -782843, -655720, -798490, 896079, 945159, -223135, 949635, -900921, 637749, 77406, 314561, -17896, -396415, -249247, 422716, -599342, -484388, 470246, -385426, 9602, -122917, 496521, 463555, -748988, 282433, 490979, -701938, 574093, -208713, 907794, 176030, 124232, -299478, -486097, -429356, 322255, -770725, 875644, -206578, -539626, -603791, -477589, 269871};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques354(){
        Integer[] array = {-763962, -411482, -269572, 294463, 601907, 530124, -247486, -3073, -847915, -978774, 947396, 755075, -84068, -857703, -336664, -980231, 253775, 373288, -553594, 887778, 163116, -185523, 562214, 467570, 108861, -640192, 17423, 855788, 840817, -96218, 338783, -769928, -726871, -94192, 519276, -786734, -631444, 357484, 156592, 87423, 712835, -311335, -278188, 455115, -615702, 194352, -606187, 697082, -481035, 402270, -895146, 669186, 775589, -948099, 892676, -216495, 359059, 778206, -723375, 656801, -783920, 243875, -49405, 158805, 41705, 233706, 134709, 721661, 527412, -648325, 506233, 343943, 258613, -387862, 768816, 118005, 578600, -407117, -881995, 771295, -160867, -346691, -905029, -161572, 319100, -748362, -100043, 572782, -442918, 100026, 862430, -60959, -948859, -366150, -524621, 31880, -466134, -970950, 206176, -861328};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques355(){
        Integer[] array = {-221868, 567529, 965134, -34907, -845957, 331779, -920486, -17229, -374813, -519663, -923979, 688659, -846538, 837937, -425611, -894491, -311074, -391484, -127664, 731479, -453407, 919732, 501908, -904924, -924065, 231457, 122109, 810832, 761767, -190170, -741731, -410667, 22809, 555125, -208841, -170631, 703150, 372329, -963674, 319727, 423383, -535787, -34245, -71823, -469507, 852636, -889004, 553860, -425628, 977839, -645335, 349512, 422402, 311847, -312552, 222335, 236125, -578998, -626095, -596286, -602184, 508661, 578851, 362802, -637415, -356266, -297176, 287252, 232185, -195732, 245214, 704871, 173304, 925778, -906175, 267808, -670393, -131088, 120199, -190621, -640153, 134790, 8893, -27979, -156777, 649716, -334110, -429914, -852397, 612088, -244384, -70906, -981116, 518274, 156945, 165566, -333813, 568386, 6457, 340528};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques356(){
        Integer[] array = {-337265, -234562, 802522, -872047, -469546, 735297, 514374, 636547, -351635, -532608, 320208, 894186, 42505, -386920, -782463, 490318, 916689, 669919, -724947, 694948, 166177, 728969, -587558, 993131, 900729, -118995, -990776, 472068, 279426, 954151, 688810, -606969, -737170, -724106, -971391, 181707, 537058, 997752, 353386, -885904, 477638, -374926, 710736, -791751, 675972, 428463, 984025, 717255, -120920, 670460, 772943, 114407, 978493, 723993, -74659, 358424, 829069, 819762, -734382, 490534, 382869, 472084, -496891, 154273, 362003, 2415, 265143, 445077, -522019, -342017, -702269, -936290, -603686, -931978, -417404, 272082, -369735, 663694, 702964, 89043, 339886, 967433, -90973, -996807, 719124, 344466, -928224, 790461, 993856, 282229, -48133, -882045, 809024, 700120, -554754, -375370, -562349, 269298, 251472, 258796};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques357(){
        Integer[] array = {-571142, -652762, 688664, -719846, -616223, 121027, -218310, -605871, -652439, -865332, -652892, 724867, -14550, -574240, -882459, 946955, -423711, -540509, -380782, 918916, 136630, -778561, 884659, 713041, -256602, -811049, 451610, 370280, -63396, -732994, 234740, 37854, -211780, 729776, -41153, -424424, 440668, -553583, 131906, 709008, -102245, 363310, -605186, 931303, -371404, -94546, -791514, 598871, 474154, 313132, -634053, 355337, 274435, -889923, 153224, 555529, -437655, 569064, 762276, -881942, 372209, 525429, 94123, 444576, -463940, 779570, -612913, -883465, 222479, -58991, 744762, -183714, 211200, -35710, 765703, 98696, -968799, 754172, 226777, -734745, 676925, -998272, 521522, 30761, -256047, 234878, -820060, -271591, 657747, -254695, -862167, -685658, 11560, 908606, -898665, 568864, -845314, -670394, 370445, -264491};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques358(){
        Integer[] array = {-807187, 294570, -460996, 968303, -583233, 843122, 26440, -861729, 277617, 38663, 413643, -934180, 789160, -255867, -15113, -885328, 784225, -805636, 173858, 29462, -426490, 553758, 827195, -385149, 633466, 180658, -954825, 725273, 157070, 365243, 99573, -357567, -735291, -489557, -904441, -463131, -887460, -307609, -401622, -528043, -751706, 694411, -724543, 364344, -545463, 790583, 957205, 31706, 534437, 753423, -107217, 283702, -549726, 48190, -642905, -899740, -498777, -37226, -348197, 5159, -30259, 815335, 782755, -686261, 953072, -242026, -316977, 213123, 596807, 911754, 689261, -861810, -480682, 490890, 96161, 998244, 146553, -999025, -442757, -368108, 493012, 348533, 143932, 55543, 690216, 182397, -677760, -205317, 595613, -931437, -251984, -708513, -325097, 396423, 620700, -710373, -190215, 481631, -693624, 228558};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques359(){
        Integer[] array = {85860, -994445, 536640, 920118, 625756, -769519, -520257, 600576, 332970, -795639, -612645, -894928, -794307, 366764, 299249, 77821, 921603, 485914, 84587, -367124, 701126, 10008, -119046, -28876, 994580, 36253, -165710, 133166, -497905, -291064, -887783, -780, -628346, 552081, 908712, 356284, -118151, 857268, -738518, -357282, 87213, 721529, -422703, 123221, 412944, 418724, 457147, -968928, 684168, -647948, 198718, 749886, 198596, -853648, 84517, 28566, 878342, 702518, 138317, -597796, 471366, 294025, -576647, 801917, -888640, 258823, 105913, 925103, -654868, -578751, -814950, -599308, 264306, -232319, 833767, 55020, -455824, -226470, -884440, -417990, 653708, 247359, 652620, -168760, 198806, 277635, 341441, 431297, -804348, 573612, 97195, 103574, 693748, 849244, 865871, 321250, 436362, -996465, -432322, 925126};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques360(){
        Integer[] array = {466545, 166317, 604168, 470547, 566668, 828593, -145621, -324054, -120802, -118362, -549398, 49087, 991182, 874413, 700363, -672756, 433549, -530230, 489829, -976988, 73817, -402379, -724705, 31936, 642138, -106384, -13961, 494594, 2569, 137919, -940544, -107445, -449373, -567018, -921768, -809217, -12876, -182311, 895537, 351661, -62534, -620491, 564915, 28749, 9603, -699843, -522614, 153951, 777919, -946213, 237378, 353774, -223470, 198364, -710604, 403485, 52835, 363007, -602729, -117914, -666024, 78305, 182439, -970322, 714234, 939678, -766128, -372455, 464276, 225608, 829236, 816014, 568056, 548201, -705793, -445812, 773985, 502747, 815771, 144297, 656813, -440983, 735177, -178632, 33826, 716588, -111752, -384285, 181327, -36944, -601849, 447864, -621091, -85548, -309274, 748077, -439533, 854351, -852962, -86039};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques361(){
        Integer[] array = {-659832, -623806, 654214, 586932, 169627, -929270, 439798, 846902, -484514, 634529, 848361, -570498, 697602, -349645, 712882, -413145, -264173, 279032, -63525, 864761, -846484, -495905, 911618, 829772, 629916, -457783, -573123, 104368, 214001, -275546, -304919, -13505, 995660, 615627, 361403, -947983, 179212, 832868, -489854, 734052, 677576, -35038, 528867, 923168, 958522, 667555, -189908, 705833, 30807, -394832, 868814, -678109, -395253, -672916, 473099, 638780, 92164, -654524, -743029, 285623, -953428, -727000, 596523, 730400, 566550, -494513, 461340, 128352, -483758, 770734, -589513, -969679, -346571, -537112, 311982, 998278, 573, 693179, -23423, 197756, 466165, 942222, -742751, 623337, 378088, 196226, -792159, -807626, -988889, -818972, -181439, -651399, 240283, 293381, 893802, -139886, -297747, -184646, 114071, -235984};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques362(){
        Integer[] array = {-185442, -99807, 722331, -941084, -297467, -715522, 431436, 49765, -4672, 661083, -293399, 858842, -792289, -256638, -888024, -998259, -620332, -74799, -839644, -368610, -727881, 873156, 155875, -19813, 280909, 49534, -356186, 289632, 684635, -155229, 460763, 89592, 660739, -737475, -137332, -224928, 248885, -511498, -58887, -800450, 680228, 859136, 729464, -296082, 84711, -881975, 685950, 511159, 438636, 761207, 259601, -335963, -649857, -573424, -428129, -803252, 884656, 873913, 608191, 266723, -394851, 652309, 222556, 41486, -629488, -139692, 348349, -219576, -885452, -314960, -327708, 656665, 394501, -409064, 379515, -985897, 102937, 37638, -229399, -461371, -539254, -865354, 538496, -702701, 668395, -146032, -9019, -29615, 297886, -594421, 43976, -225035, 316555, 459812, -212297, 994858, -701066, -926525, 566475, -742051};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques363(){
        Integer[] array = {-191097, -494680, 209535, 256596, 200521, -315709, 562299, 489529, 233439, -881226, -651377, 827042, -495784, 414591, -13931, 311072, -297465, 512354, -202164, 68874, -623585, 460341, -638852, -312018, -697696, -242270, 322993, -620512, 988207, -723642, 517183, -603859, -639078, -107026, 85788, -68844, 19087, -465174, -183477, 383513, -90015, -396738, 528351, -15024, -592665, -46776, -90136, -552639, -277369, -409992, 3575, -672673, 128925, -824146, 882956, 639361, 49056, 446237, -843700, 345765, -79975, -646667, 832729, 704290, 789410, -214534, 158410, 984887, 354222, 680199, -747095, 714520, -151070, 795660, 374121, -446705, 662114, 86560, 57905, 770947, -485182, -981894, -701209, 599617, 826608, -857256, -262247, -585247, 82308, -716957, 583600, -962902, 227419, 989397, -549177, 600364, -180847, 175149, -208386, 867868};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques364(){
        Integer[] array = {926232, -530365, 818150, -899462, 393590, 821837, -449604, 219067, 603105, 813197, 852847, -228308, -783831, 269526, 587260, -839177, 890945, -277509, 998333, 333064, 514626, 336966, -184955, 577478, -396921, -827959, 782896, 297348, 209125, -716584, -401094, 993340, -262910, 798000, 692752, 631919, -283502, 804727, -587186, -371514, -143250, 198828, 184214, -617781, -265171, -973907, 791997, -555006, -983920, 554548, 895119, 244604, 353838, 722053, -102999, -534750, -535588, -812968, -723330, -817823, 368004, -804390, -149903, -3419, 395543, 570492, -655585, 406228, 977085, 53357, -632993, 884075, -252041, -826592, 688926, -607375, 598596, 246229, -530974, -94039, -913206, 385178, -765714, -114381, -453584, 402058, 860567, -69663, -822646, -33280, -295280, 176185, 645697, 177079, -706284, -623161, 661500, -525338, 816639, 724864};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques365(){
        Integer[] array = {584725, 301416, 207781, -145127, 463820, -148734, -785173, -633925, 78954, 572346, -628058, 477608, 987931, -317924, 201001, -793023, 806923, -22672, 683280, 55657, 713444, 208781, 949946, -449671, -528553, -608681, -315166, 879376, -473235, 299853, -917593, -313205, -159552, 630839, -942596, 521231, 759325, -531693, 54357, 945231, -637351, 790119, -929983, -582885, -682511, 151943, -603217, -642546, 912034, 86245, -760606, -189606, -801572, -620166, 725823, -145661, -430042, -704052, 881721, -913826, -654086, -210508, 446762, -442771, -647525, 755112, -367716, -877483, 407599, -761858, 228016, -230444, -937947, 989629, 554974, 861014, 299923, 344501, -596242, 749922, -354992, 826414, -988852, -336324, -686046, 297233, -912748, 448789, -229014, -362358, 521454, 789809, -516734, 122693, -718003, 395061, -487111, -58166, 117835, -289458};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques366(){
        Integer[] array = {186044, -895371, -712250, 822000, 999416, -77157, -992298, -682548, -167220, -126903, -211927, 169761, -631503, -41391, -155757, 257028, 272789, -904673, -16539, -482639, 820322, 241384, -354212, -81033, -945207, -418912, -69897, 230189, 519116, -355517, 986293, -721973, -54142, 577311, 936849, -581733, -623840, 905783, 180200, 361937, -840236, -519603, -469588, -967095, 884691, -595138, 543023, -63052, -354186, 394478, 704028, -150203, 198191, -187804, -602661, 399857, -196423, -673069, 347156, -523277, -650348, -162158, 408983, 332524, -193873, -271264, 698067, -15079, 462761, 372885, 440272, 14290, -9422, -126563, -475805, 295608, 656982, -2863, 933191, -57025, -157825, 255898, 895290, 940637, 654985, 738351, -926165, 693827, -606104, -468319, -931710, -916827, 276129, -267187, -226410, -573879, 526458, 192079, -428122, 583869};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques367(){
        Integer[] array = {-612423, -219853, -858763, -141390, 624751, -414087, 103031, 759057, -106131, -128636, -746885, 183251, -133863, -661674, -166731, -40231, -736360, -730768, 173087, 977775, -149448, 242238, -728834, 205045, 610946, -611390, -556293, -488444, -680893, -302982, 617906, -919021, 221006, 398112, -357798, -633589, 407992, -934219, 529040, -373133, -383740, -884012, 253031, 190521, 430315, -916129, 385381, 282654, -754882, -434607, -784013, 464518, 792420, 906258, -503198, -638200, 815965, 817367, -407874, 702556, -495903, -421863, 381144, -389973, 644949, 762973, -621258, 720595, 884086, 911928, -132037, -505022, -810444, -290869, 468635, 811388, -515450, -41088, 174232, 590752, -199614, 986840, 890280, -838349, 553905, -868776, -88459, -163213, 921607, -437422, 976583, -498394, -949297, -592523, -859154, 372607, -900679, -709359, 792056, -641578};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques368(){
        Integer[] array = {260998, 893660, 447182, 475994, -367922, -777310, 431530, -124410, -231657, 973612, -650134, 749450, -197441, -692587, 469930, 987214, -393746, 677183, 107414, 486012, -740104, -225433, 990397, -247655, 870790, -231346, 292100, 948202, -855743, -882694, -389688, 18155, -529164, 68337, -723549, 209237, -713897, 569384, -507418, -144663, 761300, 90759, -216167, 791041, -176509, 510475, 493374, 396391, -466727, -855674, -567805, 958561, -385255, -573856, -988488, -63599, 858115, -379582, 907328, 446380, -739554, -125321, 72739, 669652, 602724, 958118, -33519, 315538, -467676, -237962, 104650, -640530, 645272, 95971, -235025, 622933, 272110, -530102, 965144, -987215, 145913, -594, -751382, -689685, 590316, -575769, 693227, 417954, -219829, -105453, 898910, -723163, 217103, 767415, -144608, 760800, 445438, -423635, 802434, -507491};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques369(){
        Integer[] array = {538029, 547529, -952691, 990515, -297551, -628527, 264030, 669231, -755744, -436355, 781126, -855117, -356144, 955978, 310315, 182414, 974193, 112659, -892207, 135633, 479600, 45384, 559548, -437387, -32453, 95745, 542652, -302314, -801364, -549604, -458717, -669776, 142793, 499150, 471641, 656092, 990381, 437438, -15018, -4884, 997265, 959431, -499965, -647754, -980967, 917787, -755756, 388319, -892357, 939005, -753560, -670917, 316305, -353853, -671596, -217553, -710164, -274741, 108292, 475548, -908304, -467212, -415048, 920903, -401547, 7895, -210750, -385715, 855156, 441832, -528239, 744946, -675978, -504551, -877597, -126231, -769296, 32352, 346372, -933382, -913994, 177902, 622696, 621104, 451002, 835702, -648548, 575406, 919477, -107114, 300511, -857524, 149475, -420663, 48416, 199094, 749907, -696872, 176513, -413870};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques370(){
        Integer[] array = {-657173, 132769, 288044, -403497, -738187, -190596, -475765, 564018, -807432, -626444, 794492, -857192, 45830, 545984, -29973, -556691, -109536, 355758, -957288, -704281, 826693, -933381, -167716, 48293, -715703, 969128, 719174, 214507, 535969, -456561, 97081, -358319, 211559, -245621, 386727, -502250, -401755, 279852, -864286, 301459, -303209, -965726, 12864, -996017, -29057, -776648, -763650, -958059, -820024, 881939, -96520, 880783, -811566, -50231, -902838, -559706, 317996, -587093, -64954, -583151, 177045, -66805, -462932, -57995, -929619, 499002, 269265, 851504, 967759, 14273, 578016, -926823, -789372, 562087, 790948, 326096, 611862, 101041, -267294, 775884, -924363, -988605, -300724, -527648, -594510, -353803, -748615, -649905, -703879, 785091, 797503, 185090, -393675, -133030, -287692, -810463, -136088, -835734, -330893, -843861};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques371(){
        Integer[] array = {-327956, -482253, 615454, 833775, 586762, 414165, -483610, 356355, 621469, 448622, -296016, 846446, -240143, -510676, 917278, 566018, -97976, -738991, -638420, -738640, 116989, -216773, 486780, -796147, 552017, -159938, -967965, -192186, 279635, 552524, 733095, 647271, 962213, 604452, -379895, 848719, -692296, 61925, 975980, -277848, 80828, 685286, -308684, -976177, -897179, 940831, 179082, -220414, -424615, 24805, -183202, -850925, 216083, 371818, -511, 548533, 43033, -773068, 767369, 22943, 744773, -752440, 347528, 770771, 116081, 834642, 204069, -446490, 510899, -8938, 254185, -159501, 104335, -6884, -216315, 146394, -442663, -584254, -356765, -951522, -637145, 428561, -369432, -652729, -931808, -459656, 44766, -106671, -512180, 172167, -375312, -434490, 411026, 502144, -459002, 610198, 433972, 200127, 151002, -525086};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques372(){
        Integer[] array = {-793942, 75093, -929711, 720481, 295928, 21522, -656804, -920968, -872987, 588240, -314496, 56262, -722461, -508830, -979052, -431389, 670447, 390433, 881465, 485023, -625045, 400349, -864896, 275084, -507390, -586037, 470217, 65539, 13441, 397334, 426258, 532608, 99314, 52288, -205171, 101353, 2389, 956506, -66275, 576951, 598261, 197402, -148567, -980088, 333630, 509748, 146961, 142836, 849627, -387739, -6847, 839078, -69516, 745014, -24710, 839399, -907702, -864593, -25755, 967728, 680836, -24869, -796344, -819854, -87372, 202621, -22907, -942172, -529995, 430159, 335790, -471140, -388235, 877542, -2646, 264744, 783556, 8950, 192915, -621033, -962022, 16238, -600118, 486883, -15085, 587907, 946304, 913876, -586994, -122198, -458938, 431464, -255470, 925608, -149124, 137776, 566191, 197677, -773039, 340329};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques373(){
        Integer[] array = {-440436, -586857, 780187, -929498, 45065, 312595, 931493, 651631, -272329, -446214, 169849, -93010, -679692, 496792, 110697, -977076, 746250, 236442, -398949, 870649, 524446, 741062, -656986, 151695, -607515, 598988, -349423, 851303, 926432, 828990, -608448, 314835, 94431, -347441, -780986, 834059, -308840, 801799, -567633, 448032, 838717, -309012, -464899, 874063, -865557, 148653, 729443, -795638, -268258, 195030, -360177, 315289, -828236, 888245, 566394, 129546, 969709, 588557, 604673, 298754, 366373, -720606, 117390, -708665, 570692, -175730, 444402, 941930, 651563, 482529, -514770, -71786, 479614, -210423, -181941, -965703, -333524, -351835, -25111, 409693, 575113, -641958, 194377, 310059, -552265, 377306, 182799, 629188, 60124, 597361, -546344, 694627, 380295, -17735, 161203, -928092, 889948, 975299, 184639, -607216};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques374(){
        Integer[] array = {-804855, 576074, 26856, -587172, -505626, 948489, -854636, -178930, 860573, -349269, 526419, -479488, -831885, 575166, 274336, -963401, -267344, 345260, 771112, 155127, 636250, 172676, -90925, -68951, 288733, -22957, 822009, 969449, -945598, -21355, 902837, 949664, 902371, -361261, 118819, 959390, -383338, -109328, 132544, 706870, 5875, 932834, 755184, 114950, -563925, 862796, 559198, 268694, 912291, 247751, -721919, -545308, -618896, -575830, 741389, -426414, -832556, -793401, 599119, -641125, -187779, 719165, 345462, -62050, -62487, -431268, 985903, 153571, -262180, -664366, -180085, 903224, -460960, -9965, 141995, 574817, 459423, -710232, 878109, 724935, 142501, -135239, -734995, 689340, -678792, 789889, 974688, 597051, 754310, 63972, 745978, -91183, 926682, 957424, 194774, -757485, 495596, 600504, 610329, -178514};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques375(){
        Integer[] array = {185584, 86067, 754774, -403053, 282102, -684985, 319679, 33712, -389202, 869788, -162719, 766592, 363928, 205521, -215549, -808546, 857126, 925980, -372844, -300841, -250555, -468383, -153098, -82249, -491682, -776765, -852614, -771514, -996486, 998475, 416014, -975653, -530552, 670201, 894344, -179846, 197662, 303797, -643979, -543897, -488468, -591692, 324869, -878733, 210193, -751424, -894939, -98030, 447540, 432130, 597140, 266794, 829339, 437509, -601474, -713393, 119519, 961981, 608286, 930093, 499588, -565948, -701849, -15677, -426476, 189868, -461727, 589635, 122380, 403591, 629578, 737597, 522453, 437667, -972521, 710624, -528933, 650671, -280251, 74, -278034, -569861, -656174, -574270, -759413, 822523, -971142, -956876, 823485, -863435, 566172, -641300, -370994, -499329, 162269, 771182, -478032, 323385, 682731, -977017};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques376(){
        Integer[] array = {-378310, 472347, 766260, -94591, 394930, -657158, -571962, -696015, -630267, -58, 917289, 16521, 287164, 595973, 636357, 897058, -384491, -332605, -626923, 397222, -822926, -367116, -549656, -627306, -248390, 221057, -359729, 27204, -275040, -620096, -233734, -135647, 653229, -320535, 199881, 319976, 79956, 530564, 888994, 784108, 108753, -226975, -390875, -480375, -202113, 531522, -422120, -752143, 704314, -397800, -333749, 904176, 732222, 18296, -280345, -484010, 269511, 853539, 259071, 963153, -747447, -567973, -622197, 634327, -149003, 786040, 559961, 609491, 260540, 148737, 773174, -588934, -568137, -699511, -738110, -230322, 270755, -263623, -916452, 453392, 285381, 532079, -198915, -445460, -818719, 516669, -189385, 91481, -845185, -588240, 34590, -93651, -979185, 206258, -53365, -573650, -7810, 156140, 927756, -154673};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques377(){
        Integer[] array = {509931, 655789, 92435, 68056, 925732, 564123, 962982, -65564, -8112, 588388, -204662, 418806, 474138, -241746, 581123, -496361, -559407, 190481, -554297, 834829, 567687, -975506, -530859, -951582, -286108, 694796, 266513, -877283, -491500, -594544, -342496, 725703, 499877, -323793, 420219, 906867, 154191, -317145, 732119, -384201, -329869, 717385, -279246, -812817, 913219, 328408, -849448, -298086, 62893, -569214, 943028, -167986, -475193, 892519, 941445, -9987, 229225, -464675, -145793, 168560, 809021, 970717, 155768, -998208, -571883, 311693, -417583, 77601, 675343, 553812, 592605, 520346, -542560, 524022, 335457, 122241, 232097, 115579, -592492, 436175, 614640, -422996, -686681, 299968, 395568, -974207, -213800, 950506, 635045, -261106, 673006, -563793, -908965, -321354, 560965, -317849, -952467, 350387, -411395, 146273};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques378(){
        Integer[] array = {196644, -545614, -258809, 332542, 877594, -217796, -624396, -394686, -179719, 955677, -293104, -386201, -466204, 625515, -38444, 348972, 454268, 4011, -888815, 257239, -176757, -776468, -388017, -77407, -67059, -226025, 678695, 442511, 789993, 213338, -102554, 861772, -879252, 651821, 828850, -910948, 375646, 289369, -277536, -171110, 395572, -36102, -589558, -423213, 574037, -225146, -851252, -679936, 592539, -82287, 81344, -913284, -865109, 949911, -826602, -425048, 796282, 200974, 702209, -327016, -491321, 250743, 120500, -770054, -507715, 388726, 130223, -656254, -463785, 224850, -756768, -416948, -840406, -600506, 672849, 4104, -456783, -497429, -725078, 700663, 646761, -778777, -415121, 138613, -356766, -231372, 835012, -71808, -539882, -380778, 844435, -414339, -64442, 109702, -781872, 813460, -724136, -743378, 936555, -846871};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques379(){
        Integer[] array = {965126, -37787, -294242, -979005, -807664, 846333, 247702, 269739, -96051, 215959, -461005, 328405, 275631, 675399, 752460, 174183, -397335, -504229, -793309, 859109, 481942, -435189, 664428, -663480, 102307, 847680, 228956, -154307, -938554, -178065, 227244, 415002, -732966, -902949, 557171, 293355, -227816, -780620, -183373, 779737, -308369, -459143, 57408, 837703, -59980, 12845, 214973, 591006, 603050, -914622, 547284, 988751, 285784, -84748, 699732, -464736, 132685, 91739, 105970, -794511, -973470, 138110, 212310, -767239, 622289, -375903, 118832, -360363, 843089, 378583, -619479, -87240, 300555, -220751, -707887, 23293, -143995, 683636, 271762, 815491, -785633, 900183, 59807, 713804, 302823, -231432, 689942, 630152, -41494, 705061, -719009, 822433, 547439, 810045, -21283, 153013, -198324, 769816, -36104, -631878};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques380(){
        Integer[] array = {-96601, -425511, -393026, 772089, 797794, -33811, -196222, 152679, -105965, -609882, -504239, 751679, -551412, 506921, -795869, -657318, 490053, -413597, -253168, -276095, 602373, -750814, 360289, 560361, 824355, 818028, 795447, -394444, -225122, -88616, 614709, 540860, 313486, -380965, 464467, 415018, -26312, -162976, -701713, -266207, -599164, 834578, 697464, 721763, -452008, 690129, 371167, -58914, -661458, -387556, 473597, -71895, -532418, -449971, -488992, 90569, -289380, 970762, 10699, 119776, 805839, -584196, 260451, 397458, 11574, -312459, -764029, 916476, -103495, -286402, -997198, 924015, -267234, -707221, -302558, -580806, -674198, -86836, 61599, -322979, 101220, -216241, 780197, -718733, -306054, 468085, 746159, 867779, 574745, -220168, -725443, -779868, -372968, -704067, 380735, 116207, 788420, -245542, -894955, 349968};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques381(){
        Integer[] array = {263186, -478458, -354852, 90525, 155176, -997617, -357406, -508013, 434478, 301824, 155169, 193912, -404070, 686437, 51520, -417855, -381241, -530163, -41979, 4680, -892960, 944278, -431242, -937785, -61446, -969856, 901666, 130480, -604521, 269413, -464933, -657580, -783336, -761225, 924282, -472991, 613912, -913457, 857292, 819331, -541576, -273204, 152655, 108293, -378097, 145982, -94673, -755953, -761972, -346468, -373420, -2871, 394607, 888136, 414587, 198584, 826976, -890962, -512238, -341721, -792601, -962374, 551431, 728117, 528783, 382314, 58778, 47486, 187405, 833741, 843464, -420830, -461033, 258192, -385098, -158220, -659520, 69317, -433429, 754670, -703304, 565022, 739546, -388491, -677600, -292227, 308288, -326622, -584562, 492303, 616255, -75347, -671453, -793008, 257093, -992953, -763921, -790581, -670451, 446836};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques382(){
        Integer[] array = {419244, -116491, -572034, 137822, -673064, -158065, -224873, 854095, 442433, -184939, 526001, -953921, -410586, -271201, 862043, 438964, 527062, -959412, -90427, 817599, -795998, -396789, 549837, -832239, -996581, 252332, -625972, -307983, -193064, 615298, 302603, 918686, -249411, 792587, 30188, -45917, 340270, 699886, 192319, -464801, -420599, 570628, 29034, -563094, 691658, -484780, 515582, 134597, 703017, 820731, 955616, 700086, 762223, -71232, 190604, -447316, -895219, 682217, 469704, 11450, 185509, -44864, 562286, 270338, 519396, 90977, 691811, -93720, -439582, -874867, -545592, -382373, 339884, 332446, 629190, -786072, 710226, -465999, 389334, -334892, 466392, 68047, -300857, 164075, 905563, 195433, -82972, 861995, -484714, -25893, 423545, 425488, -397707, -384249, 820964, 526872, 621735, 248812, 686612, 488061};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques383(){
        Integer[] array = {-928160, 371497, -652075, -42319, 876829, -723045, -181742, 279015, 59784, -569358, -995547, -84142, -701842, -303636, -253294, -429715, -131249, 85807, -714750, 607378, -342784, -324555, 360145, -24254, 288568, 588480, -647602, -875043, -585354, -86600, 844595, -898007, -364709, -807195, -417606, 930677, 11868, -40779, -439473, -870204, 677875, -444547, -619201, -670374, -892437, -237224, -220113, -120095, -831205, 969952, -24051, -92938, 5369, -800076, 735623, -335165, 855908, -135921, -159475, 738283, 426375, 291994, 856165, 444721, 86072, 242111, 444808, -828233, 577074, -681596, 78171, -271041, 78795, 427842, 405009, 729590, -529735, -117777, 543734, -210395, -56141, 412132, -183623, 168812, 994834, -103662, 565329, -180758, 803667, -111979, 927195, 776906, 23668, -471498, -728075, 798469, 541145, 483147, 742637, 145314};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques384(){
        Integer[] array = {943379, 976527, 204968, -178240, 4683, -564416, 605042, -149042, -926487, 85338, 92825, 108919, 279050, -817311, -878742, 38505, -382800, -386704, -182143, -102750, 72345, -352522, -121052, 316348, -748973, 440937, -273931, 253028, 524420, 911442, -143443, 487535, -766472, 647137, -246045, 612462, 455952, -598866, -184184, 529986, 624549, -641610, 641382, 426311, 757588, 181180, 989823, -549401, 241420, -39268, -784565, 936335, 367597, 826653, 28960, -725600, -439703, -460429, -792445, 682396, 726769, 604171, -171007, -848729, 161106, 601342, 138456, 82318, -981564, -552876, 724289, -957067, -935919, -647061, -875626, 488720, 380434, -14844, -148396, -928870, 944475, -724801, 991333, 965433, -211777, 269172, 976660, 286888, -411652, 447100, 32839, -545641, -526511, 106882, -283487, -489371, 754009, 399036, 881389, -79715};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques385(){
        Integer[] array = {-791022, -751056, 683382, -25704, 357875, 903372, -157041, 580598, -223295, 753138, -19200, 76502, 214012, -16596, 681494, 127467, -997144, -165719, 215742, -120198, 91322, -679669, 402267, -854772, 446862, -917600, 592949, 575401, 301444, 210617, -740017, 253865, -578053, 549299, 54518, -527689, 5752, -992504, 986838, -11182, 134717, 968825, -297566, -857897, -954220, 648161, -235888, -342646, -586631, 623650, 983657, -700835, -558427, -329872, -354274, 45549, 355654, 10781, -316925, 159154, -77324, -889938, -225770, -49663, -481544, -43322, 497515, 686522, 283573, -104720, -773268, -435557, -916898, 512552, -195533, 201492, 607395, 886545, 329395, 107165, -392094, 375520, 934278, 809054, -387234, -342901, -263106, -449408, -449952, -230453, -85968, -165145, 883905, -834862, -576892, 438403, -987725, 595318, 359154, 875570};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques386(){
        Integer[] array = {654334, -71489, 984120, 675861, 429344, 58708, 421945, 375138, 789772, -910456, -676394, -296851, 756483, 401729, -685077, -459837, -551565, 249084, 675855, 727030, 831913, -573059, -932131, 264009, -296899, -529343, 825544, 241280, -299478, -784114, -363202, 729696, 385036, 573528, 239460, -467842, -354750, -130668, -544202, -529254, -846332, 994552, 868262, 715356, 139756, -531981, -308503, -678069, -478122, -770650, -966828, -83504, 445295, -609020, -490854, -698627, 402078, 836289, 768842, -496770, -571682, -824175, 11532, -550044, -781336, 284903, -483177, 678782, 582246, 271271, 914616, -773307, -842810, -995584, 85453, 155180, -918964, -327629, 721328, 434485, -281024, 407039, -798041, 631647, 750146, -36064, 584055, 208078, -90330, 395476, 169274, 252648, 442410, -940474, -985028, 169523, -310246, -648475, 749475, 966758};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques387(){
        Integer[] array = {-436252, -534457, -177762, 524891, -710484, 875280, 187407, 510521, -162279, 91011, 932204, 480973, -22975, 580948, 716881, -346628, 202559, -442698, -107253, -333795, 699324, -136031, 506393, -906891, 360154, -726089, -459240, 845087, -845736, -748435, -320651, -870760, 909968, -862867, -44681, 899755, 576233, -692177, 936120, -145808, -393833, -88168, 892972, -128726, -140814, -903912, 677713, -381863, 587242, 907183, 762424, 633076, 530397, 979802, 179743, -588099, -497422, -408087, -809793, -343395, -278892, -64746, -271940, 557620, 746662, 346531, 724915, -241396, 400846, -632897, -483377, 691336, -893500, -240735, 460427, 536096, 548243, -804235, 907145, 556025, 561382, -839497, -776170, -689660, -761595, -478392, 478074, -870745, 441707, 513923, -718907, -159228, 917248, 243004, 520915, 906492, 80751, 406700, 947278, 352814};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques388(){
        Integer[] array = {-359477, -795684, 785035, 814187, 507420, -728643, 850915, -970781, -868482, -930142, -368883, -147603, 759550, 344573, -123955, -977569, 727774, 772537, -388115, -429975, 358083, 915638, 623226, 588166, 566942, 579194, -330572, 47749, 644400, -100641, 430990, -64048, -313852, 182746, 932585, -666803, -418946, -832440, 302439, -35006, 296924, 903607, -841197, -208445, -541621, 739407, 790222, -962688, -463031, 80644, -797171, 977888, 829877, -83915, 614021, -717157, 389374, 89295, 127135, 292226, -326705, 932599, 833125, 777359, 268170, -6623, -798754, 406409, -263423, 199033, -802688, 399408, 440966, 653727, 330746, -379430, -73183, -245988, 591439, -772762, -789918, 811801, -778792, 699985, 541550, -641207, 378047, -240670, 518414, -131166, 510979, 273075, 190940, 349846, -953999, 542743, 110031, -649019, -57624, -461987};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques389(){
        Integer[] array = {718697, -589298, 106736, 875242, 747479, -111147, -913465, 792164, 314627, 894241, 939140, -475889, 526251, -598163, -826227, -928391, -60208, 584392, 366658, 782227, 997365, -684560, 534654, -171047, -966080, 437977, 970744, -376281, -958111, -973546, -429879, 434701, 51569, -677134, 407353, -46738, 302453, -29033, 561154, 926537, 833721, 240375, 739394, 870474, -12625, 95455, -719786, 662554, 553174, -889218, -58693, 411401, -927022, -697763, -844580, -845855, -736018, -646229, -630013, 228360, 820413, 15116, 918840, -758653, 458135, 753354, 586233, -929333, 686208, 732640, 710514, 490315, -103078, 511833, -700547, -388303, 165329, 962879, -515865, -550800, -911254, -210826, 552890, -397116, -721360, 442739, -84340, -687428, -940209, -988609, 526892, 179562, 531506, 302707, 635657, 227626, 501769, 174981, 301317, -727083};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques390(){
        Integer[] array = {393112, 935129, 87654, -449812, -170226, 508535, -516083, -385900, -218441, 221659, -295672, -282583, 752953, -733474, -285411, 732308, 945507, -342097, -165687, -373400, 806509, 830534, -87372, 83908, 354949, 673186, 177803, 127295, -510992, -897716, -34233, 368376, -660371, -445024, -798293, 664470, -623309, -242203, -356324, 804809, -792944, 51206, 605981, 628793, -337497, -443836, 701708, -703140, 421079, -971860, -939870, -657851, 465358, 715299, -44161, -392372, -934158, -662096, -452161, -128042, -706200, 881546, 468600, 651208, -153573, 742372, 144695, 976209, -170549, -889139, -108420, 139201, 902625, 138658, -713123, -640624, -941544, 959418, 478937, -531800, 749316, 801129, -617259, 144000, -696830, -971458, 862043, -737018, -507700, 333021, -452335, 510691, -143694, -174993, -358069, 351975, 404994, -893474, 154456, -401711};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques391(){
        Integer[] array = {-924952, 456601, 857758, -928881, -746963, 738074, 44015, -221386, -985245, 437652, -376810, 479458, 863844, 544831, -448800, 681100, -299977, -537037, 709255, -667953, -707221, 74471, 481523, -102569, -117943, -882880, 781311, 378867, 724284, -372117, 164889, -886125, 412763, -688033, 964504, -457769, 484215, -795235, -541558, 299021, -385101, -984947, -712651, -750772, 670465, -398075, 230493, 39653, -618629, 417825, 696503, -176422, -216600, -51892, -896922, -47648, -4155, 641181, 447578, -895698, -187518, 481932, -127831, -82686, 794109, 877344, -58532, 391645, 379615, 524491, 976701, -991485, -848047, -672062, 309514, -274834, -921881, -652174, -725231, 613111, -298431, -216053, 395811, 207856, 865652, -881202, -436279, 992181, -178963, 871605, 417525, 454867, -619671, 457166, 543313, -504937, 530520, 858859, 880386, 389119};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques392(){
        Integer[] array = {779206, -639808, 934754, 176518, 466000, 205015, -610812, 460145, 803368, -313433, 353555, -660274, -817969, 731026, 773147, -470565, -952069, 655556, 41384, 463030, -312898, 76967, 937978, 695678, 523470, -132842, 38408, 935181, 704999, -997458, -218005, -676194, 788666, -962839, -452043, 736804, -887637, -430869, 517064, 221547, -620342, -97060, -949513, 719675, -603327, -423685, -831104, -22382, 94849, 195760, 837673, -503716, 401191, 26957, 787487, 691039, -414892, 599200, 424967, -77193, 955149, -940954, -165217, -469695, -59733, 269885, 126400, -429410, 846158, -216540, -412746, 395606, 657601, 639901, 117705, 681514, -248119, -885228, 48712, -244178, -366391, -807647, 662137, -454710, 587297, -78622, -247411, 338924, 58361, -806724, -445809, 19892, -275923, 624046, -794564, -953141, -814107, -267832, 964669, -993869};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques393(){
        Integer[] array = {-844726, 371840, -669296, 392481, 510060, 380823, -714695, -417419, -454179, -200132, -380709, -873150, -494814, -65525, -901137, -175256, 993605, -625033, 699969, 895784, 988768, 830728, -345463, 231181, -601767, 303662, 478579, 177356, 265258, 723750, 207672, 725452, -883778, 551770, -737547, 992218, -453533, 189675, 867201, -296080, 714674, -568498, 418104, 747766, -555772, -401185, -853951, 443550, -443364, 64552, 329442, -234615, -926313, -282933, 910316, 427202, 787324, 822362, -595905, -969375, 431667, -588389, 598521, 397718, 804400, -433804, 946763, -441404, -885011, 687662, -466680, -913453, -338990, 121476, -925241, 933425, 585252, 1345, -573382, -145825, -949151, 934022, 709730, -573429, -36042, 722682, -201978, 770168, -684803, -577835, -518218, 383132, 836974, 313840, 666592, 109334, -830884, -737042, -37582, 771940};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques394(){
        Integer[] array = {-618911, -506747, -618983, 933733, -897995, -185120, 140568, 133370, 135212, 403957, -4607, 983046, 791781, -644964, 492030, 401615, 259191, 876244, 131227, 607512, -531325, -993267, 144096, 258786, 973364, -296236, -636070, -110029, -681581, 423655, -876515, 578704, 997528, 875097, 357041, 9774, -134401, -831599, 988577, 992442, -369816, 290680, 27376, -831457, -633970, -509324, 752866, 172412, -2844, -513718, 856798, 422494, -866175, -921894, -91990, 830509, -845752, 819770, 846632, -571665, 600139, -252410, 208470, 872136, 695528, 280905, 947239, 241625, -142073, -496726, 928214, 148684, -953990, 130266, -190965, -143447, -604905, 250989, -877468, -173811, 666212, 518525, -828821, -501934, -503433, 301680, 743554, 327696, -459497, 441160, -114451, -802312, -368751, 609771, -727071, 340764, 933006, 938389, -368694, -505359};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques395(){
        Integer[] array = {-425335, 953794, 85194, -535163, -222518, 812208, -168731, -709781, -538347, 14058, 134157, -814387, -824820, 821450, 195388, 960366, -220919, -926308, 329889, 660252, 327910, -211452, 98943, -904363, 401654, 587953, -383173, -515888, 468611, -756854, -273166, -66527, 474099, 425577, 929887, 461082, -435417, -11904, 810683, -886697, -412914, 760984, -725720, -843543, -181303, -190669, -387150, -48637, -638337, -748863, -387236, -467758, -620427, 151432, 120379, -78293, -301618, 562761, 775595, 847679, 29185, -950103, -111351, -906250, 192689, 649969, 345593, -414711, -451947, 207147, -649256, -257061, 11721, -182427, -290061, -438762, 295295, -896399, 949014, -907289, 105883, 798943, -738540, -869279, -219098, -677922, -488583, -910828, -547417, 611302, 741316, 932955, -548448, 457725, -335021, -497763, 602432, -934770, 701618, -871312};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques396(){
        Integer[] array = {-964733, 487766, -88362, 320429, 618019, -684418, 239315, -916403, -68161, -106840, -115147, -228855, -162119, 342703, 138094, 938620, 714669, 219631, -439615, -902528, -432814, 477084, 898058, -856273, -982014, -140825, 940593, 312612, -343574, 980089, -899640, 291928, 726138, 692718, 146482, -4975, 345786, -609012, 312360, 774190, -414326, -248398, -530109, 786859, 649740, -26623, -877314, 989373, 403588, 309501, -50468, 247858, -128625, -65700, 907574, -891596, -300345, -347062, 617961, 799291, 792898, 741450, -50393, -515546, 886662, -468281, 275143, -962453, -654753, -629833, -859232, 707163, 767241, -875075, 219682, 824973, 79637, -143657, -941530, -338983, 241534, 558381, -977424, -895799, 383166, -423904, 548396, 558897, 713710, 127852, 982270, -332260, 167323, 896207, 490440, -980946, 524230, 505460, 769901, -308349};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques397(){
        Integer[] array = {277125, 620149, 176647, 510360, -26489, -711932, -972602, 559270, 735757, -856521, 163531, 523039, 804819, -660999, -372437, 880038, 673851, 792056, 704768, -689451, 44606, -58781, 75266, -85037, 113130, 761460, 13817, 684594, 72186, -435954, 438428, -113224, 760442, -40000, -318297, 152433, 882014, -991516, 348294, 317585, -75895, 904706, -635622, -103355, 151341, -475612, -952147, 653822, 693804, 959456, -659432, -812946, 110035, 959228, -782207, 329867, -214192, 478401, -286978, -206049, 353981, -766423, 738959, -586528, 881421, -503785, 639020, -572875, 828659, 678693, -264363, 934030, -963848, -624191, 701052, -127842, 308932, 112583, 468588, -657417, 633066, 54267, 701025, 775703, -856498, -669414, -397031, -135733, 205391, -784828, 557285, 150921, 983575, -508118, 288340, -739125, 405488, 425776, -682788, 280760};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques398(){
        Integer[] array = {-747695, 663383, -348544, 475981, 751031, -498536, 491879, -617512, 165928, 29344, 298231, 250474, 970798, -603475, -449551, 734131, 769000, 992008, 471069, -283169, 107986, 409468, -675570, 883931, 848810, -399575, 477223, 505750, 711044, 288944, 407355, 960351, 770257, 669825, 542949, 343513, -205185, -595747, -741831, -447074, -359600, 571369, -185809, -251905, -24447, -377107, 437693, 836569, -786579, -281810, 456744, 127251, -564374, -484610, -169064, 5659, 895798, -249732, -264155, -578509, -139432, 285614, -340401, -955226, 515918, 910247, -633640, -242238, -990209, -194630, 719124, -978513, 202575, 858239, 739293, 612937, -148926, 301974, -688099, 124364, 641818, -165319, -893530, -378721, 723716, -98671, -773155, -514527, -589910, -592705, -249020, 72165, -188654, -556393, -632111, -998679, -468571, -361885, -109034, -130362};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques399(){
        Integer[] array = {-912103, -234608, -632496, 857192, 501205, 749056, -692924, 266147, 500745, 565923, 640023, 998682, 290093, 435115, -961519, -934806, -412304, -174648, 936453, 874252, 627937, 646188, -175460, -297228, 686398, 940043, 744896, 154663, -75985, 764260, -155277, -759012, -507657, -370134, -701864, -860348, -923847, 226086, -497314, 755685, 235766, -130122, -103581, -272631, -606842, 733071, -913071, -18334, -845734, -914810, 365683, 883634, -863498, -555882, -190248, 901968, -425980, -370258, -791566, -202668, 909222, -778406, 485042, -326287, 610489, 958327, 590361, -465330, -974840, 305497, -69105, 863138, 787348, -145302, 955633, 328689, 500635, -885639, -43191, 983597, 297264, -253858, -422009, -217934, -168217, -155973, 708451, -774248, -670285, -730361, 890114, -632684, 486136, -896122, -15788, -652689, 952676, -479207, -438111, -80422};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques400(){
        Integer[] array = {414556, -409412, 248269, 475791, 781984, 172451, 543283, 984319, -763313, 50929, -846691, 313798, 425144, -635957, 367619, 79885, -864411, 233387, 402766, -576247, 134612, 663429, 263948, 169720, -512668, -691738, -648239, -454752, -664154, -261236, -750040, -554164, 962001, -678969, 972242, -693367, 799708, -508344, 310545, 437203, 493748, 490208, -750759, 213102, -142585, -454515, -107721, 969884, 53233, 372565, -31725, 33232, 619119, 157736, -964215, -861374, 290555, 629012, 98706, -60692, -220165, 422887, 533366, -816205, 863752, -622108, -279113, -999302, 889767, 302847, 933809, -224565, -59146, -864200, -770653, -908465, -738034, -655041, -792764, -365737, -986569, 732159, -942118, 411676, -941465, -558534, -762432, 391669, 781545, 145200, 779270, 603565, 362176, 659623, 810666, -856731, -179087, 479570, 511161, 197846};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques401(){
        Integer[] array = {412904, -261402, -495970, 137507, 116215, -132526, 123127, -710272, -775855, -321532, 96199, 206519, 960649, -681701, -77956, 627644, -47811, -213232, 600220, -78472, -519019, 963248, -147953, 879757, 607626, 810137, 985721, -634936, -287340, 50458, -87676, 194939, -549341, 140828, -611276, -920034, 740066, -900841, -844898, -867547, -702392, -80788, -824326, -183967, -657220, 984627, -141650, 444724, 348528, -245098, 472187, -162602, 955546, 846477, 117064, -734179, -583598, -71217, -120132, -60827, -426124, 40613, -371186, -585782, 935448, 377544, -602799, 446663, -364252, -91354, 674167, -652564, 978308, 181341, -854333, -876173, -334198, 357349, -583237, 549662, 361462, 175616, -833442, -435797, -991441, 116707, -683942, 323950, -729939, 281386, -621470, -886959, -977808, -50518, -326940, -119545, -309378, -883407, -649176, 667939};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques402(){
        Integer[] array = {-384102, -823894, 330151, -770610, 859415, 219992, -284174, -782737, -257772, 955478, 944359, 433039, -479833, -636641, 344916, 704454, 329285, -943534, -42494, 965146, -315937, -522950, 335846, -392541, -868623, 788005, -389020, -998759, 181725, 318351, 720437, -455462, -350953, 531645, 549809, -130524, 840370, -629460, 493328, -960109, -933686, 552164, 468047, 224477, 565971, 713586, 150273, -344017, -688157, 958489, 257835, -644369, 250225, 410578, 517485, 351760, -849465, -485627, -338380, -327677, 882415, -599979, -563283, -268011, 428011, -169322, -638651, 618426, 300749, 531571, -903453, 797664, 957349, 676830, 893170, -645094, -503430, 446101, -951538, -425108, 459207, -934019, -416783, -687239, 232395, 374102, 71416, -925007, -165168, 876604, 475642, -367842, -266966, -79167, -20270, -617393, 859164, 238009, 863100, -378020};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques403(){
        Integer[] array = {-639247, -131797, -868164, 541449, -134750, 45175, -735323, -16939, 897093, 913854, -28694, -203800, -426562, -64919, -503179, -980700, 810364, 166072, -33121, -213677, 288137, -791561, -971653, -857324, -400977, -527285, 17899, -657839, 201279, 992876, 972821, 65560, 789768, -915545, 331178, -818426, -726874, 260330, -74432, 454852, 385594, 564394, 721640, -860857, -4698, 88922, 480177, 146708, 923483, -423311, 796660, 717365, 705401, -199864, 871368, -25861, -926067, 707777, -830288, 793879, -636534, -629011, -362543, -469345, -219445, 505450, -744382, -757639, -318309, -552780, 361574, -133885, 371528, -438382, -836713, -479055, 147861, 654603, 304106, 419488, 373942, 772745, -722074, -19627, 129218, -929093, -651211, -60840, -245234, -468527, -43222, -46798, 853725, -564046, -415630, 507565, -882876, 979288, 814388, -282934};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques404(){
        Integer[] array = {971737, -88851, 60809, -409960, 131544, 97798, -8736, -232631, 496002, -557746, -991135, -872885, -533265, 765458, 493449, -442041, 941687, 92081, 970443, 552778, 282910, -88899, -514537, 163275, 660496, -522012, 311774, -558000, 846274, 955007, 581447, 777568, 47404, -134081, -997769, 735641, -352501, 376345, 430306, -667187, -213127, -663670, -502831, -758988, 771933, -847470, -481558, -854145, -176909, 10747, 460352, -414349, -896997, -925978, -290460, 183281, -7306, -544118, 770981, -554376, 445017, -320940, -783043, -861024, -381948, -326269, 536192, -636755, 664894, 160013, 235601, -163235, 820538, 26642, -784017, 514342, -967259, 528094, 896331, 8208, 96453, 827865, 310483, -902328, -497392, 330702, -917795, 707263, -949458, 652505, -15979, 9758, -191267, -481580, 341450, 821866, -982881, -532190, -677457, 13644};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques405(){
        Integer[] array = {690253, 899679, 56931, 124211, -441797, -311430, 435700, -819253, -411988, -896825, 546226, -591178, -332785, 641132, -558451, -697858, -111142, -801751, -461273, 347985, 851230, -581562, -304000, -685221, 243752, -424210, -546408, 447376, -318511, 329731, -96011, -431094, -934801, -782444, 458111, 961264, 359468, 120761, -832453, -741813, 957293, -248035, 952335, 131622, -154750, 731512, 907878, 456532, -149912, 649690, 154288, -821769, -873488, -392203, 723150, 767994, -846018, -134232, 416991, 747501, 659199, -6924, 759816, -553809, 311684, -199652, -156221, -363741, -83961, -603065, -553690, 241068, -294417, -458937, 991650, 656171, -75862, -549008, -971163, 534502, -1695, 124243, -361175, -784913, -822901, 584103, 345528, -292925, -649419, 561689, -263199, 923656, -23449, -425083, 717350, -662526, 691989, -86778, 226392, -483819};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques406(){
        Integer[] array = {-550321, 554964, 132838, -219994, -538815, -545875, 942770, 503124, -281780, -815883, 96441, 430061, -391284, 630961, 809223, 374226, 890388, 755759, -578764, -45131, -85785, 166692, 16517, -956875, 637440, -981018, 556509, -38956, 343173, -488340, -487701, -216566, 667235, -827770, -955857, 872312, -723289, -384585, -32203, 101995, -317846, 151218, -924754, -977722, -269389, -96826, 191326, -783128, -30886, -695575, 117008, -499514, 581921, -790496, 573527, 418538, 83221, 531110, 242473, 849254, -821700, -324616, -938032, 294263, -137405, -35056, -160892, 743264, 503289, 186486, 579089, 987619, -383710, 982686, 130586, 151030, -495243, -587102, 352942, 579931, -896332, 339993, -788492, 420195, -147454, 118837, -297094, -363658, 214427, 309786, 934021, 325281, 282145, 956034, -592340, 412240, -755515, 680116, 951177, -61557};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques407(){
        Integer[] array = {194790, 313823, 516203, 124575, 352998, 644850, 966472, -337662, -263973, -445417, 255208, -438395, -177709, -731523, -803512, 501490, -980136, 194945, -138369, -118552, 6614, -461994, -925104, 594419, -755810, 40133, -74182, -301247, -361530, -477265, 494531, -638198, -624292, -761293, -315972, 253570, -949639, 141066, -460055, -663690, 462364, -796911, 737729, 706643, -645962, -468371, -624592, 586181, 216212, 256058, 282836, -182022, -266428, 603445, 163288, -509957, 19453, -744955, -624674, 52125, -146036, -983781, 867908, 612469, 584890, -340194, -859094, -25149, 700262, -537199, -719210, -584504, -848760, -671957, 818143, 249663, -887571, 474962, 874926, 74939, 14099, 567385, 578375, 328834, 899103, -239871, -634915, -390918, 578359, -989884, 402014, -535463, 841762, -307375, 5939, -144188, -33227, -796696, -577661, 615546};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques408(){
        Integer[] array = {-485336, -532454, -237912, -196620, -513250, -751510, 236941, 95286, -752319, 737040, -813612, 730624, -127977, 316066, -122010, -804853, 815303, -656075, 722092, -88589, -685036, 956393, 174571, 132611, 394616, -580721, 665233, 471658, 48777, 263357, -958047, -903716, 477580, -81033, 721137, 460123, -384724, -430481, -305521, -521481, 723354, 788229, 842014, -960216, 483660, 408603, 261160, -694024, 369124, -307716, -936316, 959488, -470619, -128817, -406136, -101543, 11762, 161874, 763774, 603958, 576273, 713382, -392131, -598860, -405723, -264724, 257473, -282094, 567158, -32438, 942755, 518284, 302159, -939848, -535519, 730905, -392876, -363806, 529633, 150543, 758051, -633182, -517012, -525484, 223737, -75698, 911153, 115702, -111854, 717441, -956587, -201373, -361834, -298362, 166624, 365430, -559294, 91178, -230671, 135290};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques409(){
        Integer[] array = {-921757, 41360, -346170, 585978, 239097, -976, -761402, -474576, 245082, 693741, -160621, 284345, -155524, 948986, -318224, -82863, 865238, -633224, 55268, -35536, -810209, 761176, -302288, -493360, 144098, 745724, 679077, 193979, -89568, -893289, -542730, 395711, -636701, -283649, -239144, -84364, -777461, -591113, 804868, -239192, -77063, 8820, -247383, -347878, 834674, -184096, -159568, 874541, -42780, -904935, -382311, 318377, 805171, 304506, 451227, -424280, -787709, 962101, -568297, 413560, -463250, -172782, 517544, -223436, -780551, 86939, 189114, -349549, 327914, -515986, -876903, 516084, -886739, -34146, 457473, 477622, -56608, 884991, -858153, 836391, -239162, 919770, -390480, 410550, 771088, 807014, 304166, 401058, 848736, -493696, 109228, -260894, -25957, -942428, 188035, -959321, -58374, 612720, -879514, 281849};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques410(){
        Integer[] array = {-184797, 451204, -184632, -567848, 402186, 515075, -992143, 484418, 214446, -50668, -267147, -719464, 609487, -657446, 806317, -278056, 382090, -784386, -868308, -159710, -794059, -892062, 601364, -944690, 554685, -303938, -49378, 371853, -319325, -831325, 609295, -506607, 917879, -301504, 825659, 329644, -285114, -160060, -521841, 447979, 184284, 944852, -636600, 177414, -459596, 156206, 486267, -132566, 172871, 176996, 515224, -378358, -460265, -824130, 977049, -122600, -819928, -60080, 491288, -13814, -292643, -130223, 894542, -101230, 949184, -591650, 436492, -658893, -778150, -634978, 92264, -406965, -818234, 79617, -224541, -299854, 124958, 841904, 87532, 733791, -782814, -521782, 313252, 382340, 696889, 615339, 693413, 663942, -910005, -399240, 397448, -703030, -619713, -762423, 349318, -346147, -689970, 666313, 705955, -940877};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques411(){
        Integer[] array = {-893306, 132935, 881821, 579884, -944464, 664215, -12390, -551185, -661128, 110560, 894756, 963692, 404908, -934557, -379653, 971463, 555298, -710242, 941125, 368339, 83230, 783412, 366453, -170096, -724940, -210199, -255434, -422942, -296431, -761247, -360682, 381333, 174132, -119971, -156389, -270322, 209560, 642309, 778917, 425506, 225632, -411519, -132317, 25267, -593923, 481025, -674759, 297255, 349624, 459491, -514576, 570856, -183007, 805439, -605008, -81836, -993785, -972785, 657500, -448535, -582399, 812324, -346882, 852916, -559482, 121550, -256115, -853274, 334728, 93994, -462381, -70285, 528141, 109497, 671744, -803255, -181853, -139682, 175783, 483114, 512818, -212869, -730165, -33930, -835240, 776528, 120384, 428331, -697429, 795219, -969864, -625058, 769442, 761534, -696457, -121755, -911594, -692112, -945673, -635576};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques412(){
        Integer[] array = {-171812, -789798, 665673, 895044, -554963, -622805, 844036, -930078, -481768, -863789, 99054, -174084, -106960, -510403, 800280, 724532, 443489, -169770, -843761, 664309, -158795, -387527, -739387, 332243, 457539, 57929, -774769, -121737, 454146, -87256, 304003, -991313, 965741, -638675, -183541, 625923, 844274, -858854, 815460, -968708, -545274, -251136, -639645, 896861, 62913, 956670, -103691, -15973, 644771, -645301, 715514, -698763, -314499, -304730, 785000, -994944, -357732, 445021, -813564, -866010, 748303, -604638, -467899, 471319, -78114, 473440, 447095, -283410, -334733, -99898, 234788, -7660, 876414, 452072, -830368, -834150, -599253, -753027, -130140, 145389, -886094, -561064, -608727, 892135, 682462, 714579, 888120, -964795, -108000, -79843, 845671, -188410, 650787, -563272, -203198, -668645, -977447, 40937, 303853, -344112};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques413(){
        Integer[] array = {744383, 884150, -562479, 350007, 625578, 779299, -707661, 859430, 713868, -771487, -328899, 855004, 429521, -395739, 945236, -267720, 225718, -460135, 884342, 220727, 912820, -702418, -214429, -999499, 991229, 357522, 977027, 388761, 889491, -752881, 49542, 768333, -692550, 923259, -933820, 42353, -800483, 627216, 992552, 628815, -393337, -346665, 650615, -517497, 623994, -99017, -96914, -980227, -547382, -664318, -366522, -766944, 888396, -735304, -839799, 384707, -367488, 689413, 61046, 974851, -588027, -1629, 338649, 794874, -710412, 999949, -171822, -326343, 719347, -632786, 160748, 994797, -280864, -127773, 385450, 20259, 59377, -904922, -133972, 756140, 155523, 220423, -442737, 894679, -757520, -985736, -217171, 41888, -344195, -365164, 987566, 953422, -570512, -608927, 460666, -23556, 334645, 401817, -482801, -245639};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques414(){
        Integer[] array = {-491023, -660479, 288542, -146756, -416991, -211413, -480909, 813119, -662396, -37845, 617994, -489170, 603093, -213188, 663323, -370660, 584369, -368335, 819191, 54530, -438380, 372711, -285522, -833963, 3579, -866900, 816518, 769189, -183157, -664285, -494710, 229428, -381221, -630154, 94210, 36707, 37898, -933085, -278410, -879810, 816637, 163483, 278557, -430630, -12331, -657432, 952619, 183777, -874189, 197868, -729060, -434031, 908804, -532046, 84988, -308037, 332098, -943129, -748302, 408739, -737707, 222303, -569645, -832990, 904146, 232034, 291699, 449392, -890986, -805173, -517037, -546445, -707510, 339560, -258498, 827551, -252357, 998182, -233469, 362485, 221179, 21711, 94576, -385288, -996704, -373231, -859595, 159867, 351929, 991003, -841934, 253656, 917905, -50403, -470091, 90846, 605561, -256393, -335736, -503133};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques415(){
        Integer[] array = {904305, -407283, -719379, 831180, 406476, -846625, -476372, 405677, 799232, -477539, 44243, -294354, 361884, 490803, 621731, -695438, -793748, 237789, 495555, -307100, 27013, 286911, -498773, -83888, 545611, -742477, -333368, 384156, 586926, 541923, -301569, 660381, 879380, 130499, -964085, 956738, -867464, 907834, -752214, -707875, -103713, -159086, 116201, -455540, 204090, 557446, -446825, 381058, 390573, 909902, -523252, 663620, -155429, 183115, 541258, 813096, -437873, 908854, 577320, -75470, 14995, -673164, 201448, 695377, 388967, -128950, 431478, -102148, 939123, 535954, 226708, 697182, 374546, -72348, 591244, 662499, 794903, 651696, 741795, -475776, 475289, -871294, 893228, -371876, 409914, 832488, -708671, 794595, -721807, 314192, -608981, 763135, 412606, -318331, 190336, -444787, 557652, -628379, 582156, -850075};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques416(){
        Integer[] array = {-863556, 311105, 251641, -709202, 821886, 438023, 220627, -341328, 542224, 479853, 35598, 890471, 144387, -85948, -199342, -495336, -814171, 438015, -453799, -904757, 262962, -673243, 63606, 539828, -700762, 517663, 285489, 688751, 894134, 907778, -647043, -482905, -333537, 702969, 970871, 294651, 914876, -269376, -582383, -668225, 96860, 965080, -469532, 878252, -462851, -54131, -201041, 695511, 457092, 930440, 676101, -821558, 154689, 338977, -657393, 440004, -448177, 968064, -177825, 28907, -222113, 894903, 777047, -667415, -196921, -392658, 12093, 882132, 6033, -315325, 292151, -442731, -435035, -834985, -472756, 967038, 567667, -865141, -908959, -303431, -52893, 27301, -336046, 657402, 626632, 592304, 467458, -37157, -205017, 253542, -495612, -540853, 915893, 423100, 263558, -694958, -364458, 908041, -691299, 978360};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques417(){
        Integer[] array = {287365, 234510, 416812, -3056, -26322, 503549, -838809, -315663, -636310, 826113, 673353, 972837, -49312, -760325, -45876, -289346, -56797, 201430, 74299, -31115, 368043, 441621, -576675, 909569, -658490, -984111, -150133, -357225, -130884, 285527, 379504, -746864, 343009, 600515, -626117, -528288, -885456, -132308, -95791, 418835, 843829, 800736, -59469, 869212, 944254, 845887, 518808, -977528, 315520, 811117, -446935, 768775, -301307, 829720, 786036, 62622, -49039, 64545, 541214, 439017, 229220, 392857, 636828, -858129, -540834, 217081, -691164, -155682, -529455, -252730, -826527, 355160, -553612, -219730, -913019, -519091, 383435, 951220, -390134, -738745, 313603, 767806, -812804, -604850, -834561, 83649, 687708, 48027, -876548, 733178, 602657, -975817, -373837, 262737, 93539, 503407, 541293, -427848, -770975, -714744};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques418(){
        Integer[] array = {82958, -291010, 813479, 352511, -117303, 948023, -640154, 971521, -321119, -853764, 467487, 822825, 679618, -867242, -459832, 514105, -358990, -548242, 208941, 605949, -208972, 733304, -230653, 946951, 367772, -448966, -371034, 956325, -509913, 583959, -984294, 863811, 16908, 650287, -744194, 725422, 348637, -753361, -555839, -504319, -640201, -858039, 96741, -204829, 299200, -104814, -170351, -102274, 960035, -759075, -658347, -703083, 780847, -920675, -756000, 788830, 67207, 842259, 255830, -155136, 279320, -912479, -71041, -907383, -107109, 683326, 414578, -36577, 102362, -2284, -742263, 181047, 309787, 8433, -116587, -953594, 974936, -522653, -437704, 445554, 84527, 405279, 410231, -970381, 553483, -829009, -73059, 161031, -385171, 590258, 156495, -226847, 607964, -635760, -940109, -434324, 280582, -617591, -626729, 750074};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques419(){
        Integer[] array = {531687, -237409, -281831, 270567, 656417, -64776, -714265, 950141, 192415, -260907, -516813, 421178, 382045, 153833, 534572, 453636, -373629, 994040, 217138, 79595, -639764, -763808, 343948, 622304, 35268, -936117, 603583, -5928, -377301, 644191, 963780, -929394, -331969, 17014, -19327, -939880, -197993, 230560, 802863, -874997, -306668, 504225, 914368, 351141, -817866, 868622, 82982, -923542, -251206, 194748, 637056, -774543, 619039, -258269, 61460, 668148, -792173, -173094, -864189, 278813, 638028, -984072, 292316, -500820, -295016, -118565, 483780, -83053, -731004, -346975, 351891, -498458, -126422, 806813, 843044, 748666, 536186, 319494, -525520, 766017, 841091, -30567, 842847, -318364, 759042, 488470, -422661, 28334, 696, -605765, 379053, -87487, 8094, -314151, 863665, -145077, 995623, 354308, -46508, 403260};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques420(){
        Integer[] array = {23583, -369247, -798602, -72914, 588536, 60144, -896343, 2801, -140350, -271208, -647346, 394792, -656487, -541326, 33994, 947100, -854102, 96494, 408364, 952567, 271916, 577076, 432907, 893550, 133516, -631418, -467820, -236629, 144612, -318785, -859123, 385416, -3502, -402296, -962699, 157651, 684916, -447724, -13525, -343911, 109561, 621043, -598886, 48061, -408116, -721820, -754785, -642705, 751480, -375515, 512457, -75366, 815676, 252993, -504707, -503026, 126499, -179142, -578767, 529235, -60966, 634684, 407985, -937852, -231936, -980023, -608606, 800428, 963321, 508963, 615953, -62021, 292693, -186287, 919891, -519676, -524225, -799915, -255575, 247738, 280019, -544664, -929744, 211230, -940793, -330402, -157612, -95990, -192056, 131250, -779778, 129725, -454597, 816871, -783167, 497811, -438287, 216730, -743644, 645818};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques421(){
        Integer[] array = {-984388, -260009, 931191, 321955, 44396, -726850, -731395, 524556, -338463, -864006, -331290, -295205, -538954, 93262, -495660, 515181, 769347, 813080, 643585, -698977, 277772, 112588, -312125, 919271, 49052, 286759, -447447, 462423, 851542, 293937, 319443, 161512, -340489, -429995, 124836, -738039, -368510, -830230, -833026, -845901, -437576, -421967, -110139, -511905, -932740, -134578, 236162, 338726, -762694, -601742, 755953, -408030, -160988, -957868, -604378, 30633, -931666, -337828, -231635, 741591, 441143, 166162, -125669, 456470, -558397, 862823, 132633, -934461, -880487, 84513, 782342, 141536, -781237, -80545, 343872, -300001, 573128, -462198, 185662, -414160, -947220, 70912, 786692, 697059, 145891, -23807, -722680, -682814, 62106, -49587, 109434, 428266, -939670, -537671, -694116, 370179, 424599, 649574, -864183, -145584};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques422(){
        Integer[] array = {-884675, 558361, 21904, -765721, 741859, -280066, -879108, -685222, 722060, -556999, -297877, -982242, 569207, 416649, -599033, -123245, -689936, 187571, 269038, 214142, 261009, 648900, -440724, 506312, -983689, -543694, 781595, 756475, -694178, -728434, 579850, 550134, -856945, 677733, 261050, 967021, 44875, 627191, -539772, 492378, -553287, 227466, 469837, 356644, -21047, 86028, -896289, 106451, 219686, 307692, -705831, -858337, -114224, 191321, -559671, -36598, -508832, -898450, 896664, -367119, -929523, -876825, 18812, 732151, 384005, -455622, 168589, 495508, -556259, -958080, 612428, -355657, -631547, 772422, 449579, 831928, -820382, -95416, 494617, 419144, 776117, -597395, -422529, 682943, -197460, 983483, 639924, 313676, 560981, 153524, 995382, 685340, -290923, 164358, -813404, 75462, 152929, -81729, 414005, 333848};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques423(){
        Integer[] array = {988059, -41953, 797969, 497625, -158776, -60387, -898556, -695263, -3215, 99864, -320458, -240470, 116891, 584779, -343816, -519829, 490879, 730451, 708441, -3407, -249086, 52297, -760888, -305993, 79735, 323570, -57700, -393889, -431407, -914454, 922124, -432696, -14265, -371838, -353726, -256610, 746623, 197940, 6265, -118205, 754958, -682000, 896988, -881678, -481171, -292501, -213366, 509346, -359091, -493456, -148313, 8071, -555107, -117667, 589766, 45952, -57838, -980055, -800035, -516826, -143063, -475509, -995531, 211847, 572468, -741881, 188449, 76014, 332531, -731675, -943348, 764060, 376554, -11041, -892833, -78650, -651922, 854791, 287965, 43435, -520456, 784763, -327063, -889298, 310568, 128, -468082, -2025, -885188, -579565, 740056, -739847, 703771, -898326, -901479, -829104, -815078, -858454, 430090, -38993};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques424(){
        Integer[] array = {-767158, -207346, 261482, -903465, -737177, -534235, 517540, 845061, -240411, 357781, 819517, 926353, -46250, 25197, -622269, 230916, -188021, 188551, 28728, -14141, 482868, 41097, 321805, -159825, 66236, 211616, 791771, 20413, 211866, -679858, -413370, 965855, -165835, 864404, 840225, -228840, -914583, 678476, -267419, 128822, -144423, 101401, 614700, 209872, -384190, 85764, -458729, -874393, -706742, 191815, 37635, 168998, 995862, -871971, 374775, -899955, -289107, -723511, -661997, -520592, 169475, 800367, -717474, -712488, 155251, 626207, -53164, 595305, -93313, -376726, -201997, 27956, -41161, -828649, 384540, 469429, -36577, 767399, 891776, -10267, 271593, -11747, 919562, 511332, -471426, 36878, -130650, -254978, 469932, -149700, 200614, -437486, -73882, 557464, 462021, -845413, 382338, 844029, -526556, 149133};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques425(){
        Integer[] array = {635135, 356610, -201702, 496503, 595555, 707015, 592329, 453853, 7883, 870251, -271979, 951674, -848418, 373930, -554760, -509428, -34618, 790256, 644319, 989993, -748765, 71630, 702415, -946661, -359707, -645262, 940702, -891430, 313535, 601003, -386798, 593997, -394240, 304098, -940464, 619744, -510120, -941873, -479721, 863508, -525003, -589576, -873089, -614943, -529037, 456889, 410123, 920018, 595770, 338533, 114701, 988668, -735954, 423977, 328378, -61424, -443187, 491903, -245618, 405937, -985096, -425000, 401228, -979102, -223037, 868293, 554164, -125433, 581083, -25707, 927956, -101285, 645104, -896704, 112330, -162218, 784906, 821524, -246171, 534234, 567314, -978916, -870293, 52925, 627426, 784497, 7724, 706311, 521082, 933687, -994723, -617844, -886025, 850493, 248552, 738181, -709327, 557938, -655046, 892355};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques426(){
        Integer[] array = {-440097, -103216, 311855, -792237, 865802, 355282, 97761, -218390, 984112, 830635, 32958, -366581, 887153, -31977, 374376, -612042, -182465, 816723, 45209, -521216, 563202, -541872, 844287, 562558, 79795, 257279, 855611, -371246, -838404, -238766, -15177, -798866, 970315, 717590, 90155, -925325, -742884, 401270, -671045, -58618, 179108, 943077, 181945, -83237, 400169, 465563, -391573, 186236, 575689, -943056, -382197, 860317, 694096, -874921, 473074, -185002, -296777, -708328, -740739, 973567, -851200, -488226, 13569, -692715, -690232, 68959, 544220, 672328, 850105, 557483, -215478, 359978, 287422, -491236, 24881, 562792, -265576, -981043, -20804, 12085, -415102, 894638, -933187, 442957, 604188, -254055, -408507, 351948, -37325, 734456, 687949, 862828, -261970, 216080, 840693, 281827, 7513, 167322, 915216, 850470};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques427(){
        Integer[] array = {348203, -775553, -985957, 226610, -852393, -610420, -987372, 454140, -552197, -239820, -408695, -683556, 875927, 468806, 779203, -259055, -870195, -769771, 352807, 258816, 919255, -35898, -921763, -329883, 566007, 691276, -653073, -865924, -32746, 555385, 187941, -901169, -752476, 510023, 147650, -291049, 121424, -931436, 359218, -712710, 469901, -230442, -480505, 631133, 899834, -765521, -218379, 933994, -460634, -809090, 633265, 734855, -312320, 52239, -157820, -662099, -807680, 339405, 27981, -637266, -419401, -344140, -721249, 619252, -10603, -289647, 364006, 816787, -949481, -521213, -937674, 440158, 915928, -108974, 157152, 658717, 893323, 169408, 370731, 451051, -802214, -157054, 168597, 287781, -491169, 336635, -745110, -26622, -417978, -15745, 432240, 117928, 165148, 288067, -396141, 136058, -169195, 700960, 32900, 817379};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques428(){
        Integer[] array = {776846, -63174, 440330, -674346, 426556, 351049, 443240, -281287, 303926, 866572, -934902, 947906, 9730, 617736, -747886, 690837, 767722, -16084, -47529, 838570, 498501, -43850, 159387, 816281, 635929, 827880, 979923, -583354, 342110, 707257, -457370, -586055, -862104, -680354, 578293, -190192, 24973, 13534, 554955, 10799, 305877, 756026, 59930, 866292, -302703, 410732, -368385, 694094, 988161, -783186, -633579, 442287, 805395, -362557, -145924, -165351, -132385, -601092, 660564, 682393, 664363, 365755, -64591, 484306, -859051, -479363, -615618, 365799, -662197, -115124, -540575, 455670, 506647, -46045, 581156, 998658, -567993, 756199, -780402, 347259, -92412, 42729, -34409, -207911, -618798, 224731, 517743, -106894, -860392, -835195, -591901, 96721, -195463, -149216, -858561, 104694, -655800, -672248, 524395, -343069};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques429(){
        Integer[] array = {190905, -34776, 449336, -506775, -364116, 914194, -706856, 488681, 797513, 970175, 95607, 294299, 359315, 258527, 635954, -307563, -595986, 749824, 775632, -882014, -316803, -191004, 716690, -691109, 309272, -716120, 605358, -573990, 678536, -696111, -992349, 353229, -993829, -352878, 442584, -637201, -982693, -711908, -822992, 954936, 551555, 751131, 754022, 866481, -82031, -660394, 108905, -29866, -495594, -250735, -419367, 745068, 97947, 497758, 473484, 257269, 299425, 177844, -139992, 196548, -12671, 651692, -701835, 201570, -380107, -685897, 414229, -834043, -770790, -981041, -473162, 511819, -752403, 430671, 824874, -886402, -794547, 473685, 426373, -636344, -986271, 315749, 765488, 491637, -908904, -374799, -709583, -992623, -654314, 664861, -672613, -565232, 109581, -748019, 936260, -620723, -467290, -587247, -340718, 179156};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques430(){
        Integer[] array = {-426205, 374150, -585882, 732643, -445387, 625282, -426458, -644358, -726307, -456473, 509505, 636754, -960149, 766651, -490797, 65454, -59054, -389551, -341731, -404244, -375383, -501429, 357585, 673976, -888858, -222164, -43776, -833046, -700926, -28835, 282597, 237172, -935667, 792341, 733307, -869353, -894888, -783145, -817846, -19896, 914549, 523181, -714375, -618717, -793773, 578849, 265620, -271570, 618019, 645927, -930952, 965315, 717557, 870846, -248059, -797825, -265593, -973649, 528856, 6189, 734526, -976567, 296619, 403877, -32118, -252648, -973595, 922504, 307719, -745049, 955121, 869610, 684476, 848046, 884952, -391010, 560662, 787243, 650173, -517528, -268643, 532996, 127853, -578047, -195731, 372285, -833519, -849393, 506574, -461203, -783192, -707196, 26728, 558626, -43015, 64221, 667473, -711905, -708699, -735584};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques431(){
        Integer[] array = {912400, 450904, -978384, 508804, 587671, -762207, 494558, 244534, -915967, -789236, 896501, -502100, 581022, 630680, -872003, -336921, -989846, -621313, 863395, 958980, -656106, -298307, -38157, -435220, 997309, -94198, -97594, -120181, 882195, 539953, -759909, -318443, 441193, -324039, 383519, 292492, -293107, 463823, -825821, 762972, 610205, -988437, -297600, 60887, -172430, 278140, -765056, -176044, -889646, -762221, -771747, -42748, 561268, -158026, 427709, -70501, 97284, -807815, -26895, 345409, 634507, 762651, 446693, 279703, 466984, 112968, 65956, -360547, 290233, 174636, 630676, 588248, -258152, -849785, 705184, -947182, -215133, -952931, 744909, -658230, -766328, 46281, -67753, 861728, 56370, 894663, -528191, 773965, 732201, 690935, -308764, -92766, -117443, -420188, -754109, 968396, -389755, 299076, -83192, -158642};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques432(){
        Integer[] array = {-220694, -12379, 790607, -56190, -419703, -186986, 253201, -603859, 761790, -751419, -983772, 774576, -246709, 758648, 318279, 110786, -93859, -354418, 547806, -925408, -579238, -515659, 473390, -527253, -173991, 991525, -493218, -523875, -449326, -63849, 147603, 816305, -203182, 555451, 135095, -170100, 284519, 217502, -76997, -801705, -104491, 264762, 830271, 472559, -628998, -618200, 374445, 960366, -90803, -411652, 793414, -410313, -395349, -747244, 860585, 208132, -355280, 375266, -420861, -453208, 132584, 493915, 970935, 747362, 658119, -550467, 242253, 297305, 719195, 397656, 97171, 823957, -795623, -10722, -355068, 808094, 990155, 536258, -935972, 916074, -127789, -11887, 140094, 737272, 531877, 486415, -542072, -405685, 646835, -238914, 833551, -297885, 670920, -490382, -116815, -28895, 493165, -850506, -860186, 184376};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques433(){
        Integer[] array = {372381, -528186, -48373, -836467, -194691, -60484, 549874, 569428, -982821, -590693, -921238, 147386, 207000, -854954, 80066, 24139, -16548, -831322, 249416, -933779, -218283, 657109, 860121, -855126, -415933, 223905, -924027, 557482, 864871, 672427, 671973, -938667, -615510, -26567, -995182, -547077, 736362, -744207, -526169, 993158, 976256, -621625, -584131, -385434, 263791, 163125, -628273, 576427, 950996, 190643, -511438, -393916, 537624, 331148, 590844, -875491, -327863, -71664, -735337, -39136, -110751, -617504, 787409, 77390, -893303, 773906, 734588, 531521, -610130, -34802, -533308, -115861, -424151, -57614, 291330, 919539, -29098, 608518, -369908, 567820, -476306, 155961, -620408, -806490, -538453, 127446, -102887, -447153, -507227, -244881, -29072, 344280, 573946, -231732, 923924, -69005, -788445, -480505, -358697, 359318};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques434(){
        Integer[] array = {335566, 633145, -608807, -275462, -180629, 99577, 223478, -475664, 435219, 916843, 470496, -593992, 845466, 339556, 173512, 12, -302097, 61441, 784998, 632895, -853988, 90172, -942847, -398722, 622683, 828896, 257319, -938487, -172141, 168505, 816363, 816372, -894973, 550623, 880871, 1857, -577035, -42560, 180920, -105198, 621304, 341390, -324146, 743348, 662592, 655339, -574935, -575782, -691690, 411261, 286894, -994592, 474272, -189878, 500787, 229698, 561099, -987550, 625227, 395740, -725681, 867260, -15080, -680297, -894825, 232419, 42526, -157003, 645170, 3240, 490092, 880295, -550523, -109464, 783056, -813399, 169061, -601663, 792054, 145481, -600219, -814145, -828689, -60372, 257156, -344805, 372580, -551320, -100981, 731037, 562369, -595110, -932415, -369071, 81570, -549651, 514772, 225686, 999468, 289251};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques435(){
        Integer[] array = {370347, -417621, -3845, -627143, 290107, -290386, 810402, -155044, 907841, -785285, 501182, 422736, -932981, 508548, -644924, -605731, -806605, 440652, -782222, -354363, -572913, 627826, 762412, -503937, -329237, -22284, 818545, 412229, -868053, 667048, -412128, 620926, -289667, 36644, 985087, 61412, 947237, -823200, 732583, -425531, 109070, 69871, -96278, -514752, -616198, 70032, 17567, -493651, 556609, -103589, 608477, -740653, 676715, -479739, -943921, 327745, -28197, -398636, 394835, 495936, 755919, 5795, -358932, 955608, -595580, 642459, 58944, 255791, -890499, -696217, -684833, 243889, 669690, 364086, 301465, -627834, 711331, -102388, 437441, 638138, 658502, 410556, 377101, -928848, 966235, -634307, 989545, -710786, -278062, -74587, 524804, 410019, 690746, 37125, 187425, -677202, -817026, 101977, 483205, 287838};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques436(){
        Integer[] array = {16578, -644890, 591498, -886417, -725700, -906133, 545946, -996799, 317631, 585525, 15696, -288480, -260088, -554804, -265593, 876544, 411987, -980997, 261292, -610867, -390071, 5532, 475040, 818053, -550893, 288710, 510351, -815498, 502231, -937646, -439089, 674722, 949199, 42049, -252260, 183818, -148029, -963187, -619760, -589115, 707645, -267885, 133091, 548028, -384286, 416038, 929839, 513355, 628868, -654120, -207271, 919555, -629764, 484729, -631017, 498219, -496687, -102450, -662971, 45205, 569262, 488739, 933760, -451406, 801259, 674260, 840891, 353484, 429061, -480394, 254904, 625156, -649308, -776106, -87928, -394025, -486036, 910958, 821720, -737072, 639744, -843943, 636504, 20091, 654494, -192780, 692652, -748919, 536320, -514034, 398175, 608368, 502970, -58474, 12787, 143624, 811401, -62017, 732700, 792269};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques437(){
        Integer[] array = {165192, -178756, -831145, 589730, -186075, 463501, -42376, 545768, 469820, -383228, 34883, 486611, 428630, -874649, -319847, 808229, 466195, 347427, -15706, 231710, -871619, -940123, 981727, -651157, 602920, 121948, 529132, 232833, -408312, 80289, 458829, -652736, 435433, 563665, -520609, -591697, 428951, -386109, -281726, -939204, -778569, -908614, -561885, 923404, 752379, 929655, -935465, 398218, 983498, 595252, 778652, -204140, -236528, 518085, -516690, -636576, 125072, 329388, -608090, -8829, -781371, 14687, -873996, -345394, 55229, -911843, -755822, -333715, -491198, 479285, 515692, -682210, 404354, 586420, 108053, 196850, 890999, -667627, -755416, 196010, -362006, -399001, 875222, 567423, 779661, -953936, 647564, 921417, 213008, 794146, 948669, 123620, -548478, 596173, 46928, 314401, 139298, 308121, 341888, -15228};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques438(){
        Integer[] array = {-726332, -148014, -51661, 111254, -410100, -806299, 62797, -108847, 191181, 51388, -103535, -61348, -946062, -35300, -464887, -472882, 444088, 267620, -227334, -470175, 889388, 245609, -23364, -202461, 364732, 47942, 510068, 437961, 293579, 709836, -249617, 880856, -749436, 846371, 328691, -528189, -484808, -556016, -903769, 290823, -485373, 844849, 472188, -875022, -61087, -927138, 145211, -174312, -980964, 325776, 521703, 701674, -935015, 186052, 553697, 285036, 341430, 781712, 498251, 459035, -860249, 691224, -663674, 643480, 816068, -819630, 406110, 121930, -38412, 879759, -775618, -580811, -717475, -200874, -428200, -211853, -642377, 92394, -247981, 14384, -195736, 712117, 687178, 716129, 110536, 953210, -259735, -813280, 553097, -722375, 466875, 451822, 561767, 93483, -232209, 854141, -188665, -671522, -899798, -541331};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques439(){
        Integer[] array = {-777623, -199807, -359766, 872951, 490127, 276091, -233900, -974969, -544182, -407832, 942039, -942548, -223461, -253367, 693814, 719233, -807047, -799778, 740205, -500358, -728783, -585055, -365762, 898330, -563081, 328199, -331949, -516713, 355270, 688970, 793021, 667540, -792305, 685203, -558645, -342936, -756889, 146033, 875707, -687864, -665519, 549211, 237154, 142612, 710703, 969166, 171669, -674762, -315558, 804095, 290505, 903197, -100445, 283261, 977422, -477928, -112487, -361387, -345800, -886309, 149198, 122357, -127744, -261973, -643588, 928818, 701246, -138474, -544592, 886045, -268088, 638827, -289952, -573806, -516779, -691510, -774428, 320160, -553852, -221195, -29837, 603879, -645941, -968368, 218331, -543421, -493077, -416433, 363635, 320085, 768370, -371539, -720107, -807262, -569001, -59798, 443962, 779411, -177489, 897521};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques440(){
        Integer[] array = {-40659, -26509, -250130, 876634, 128489, 204449, -348058, -403354, 746394, -564407, 430328, -611340, -956128, -591522, 382771, 13555, 642330, -789755, -189713, 757118, -388295, 816349, -601694, 610947, 517459, -984107, -236314, 94766, 594399, 878547, 16322, 983331, 608963, 325471, -973249, 213366, -456931, -428991, -759717, -333617, -710318, 540927, -873996, 159955, 501787, -442775, 71626, -999576, 383473, 980458, -202795, -262973, 94285, 376469, -559426, -916170, 731547, -800926, 838630, 120443, 114078, 457761, -671352, -182650, -357496, -286550, 392023, 485746, -258639, 108683, -594338, 59679, 4522, -105722, 128751, -998824, 163938, -862547, -497190, -258201, 13963, -377110, 25823, 852991, -684902, -274234, -420478, 263295, -148899, -562738, 789369, -522354, 870307, -471746, 728725, -105813, 855247, -539370, 365058, 984874};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques441(){
        Integer[] array = {-706822, -401127, 47951, -172170, -403992, -511386, -355556, -939010, 932663, 292708, 352963, -612321, 51977, 116091, -263078, 926701, 443503, -880308, 401902, -655686, -624243, 573947, 473590, -459343, -171077, 159828, 40746, 632887, -604573, 90334, 405918, -808456, -809442, 620907, -891536, -172836, 176849, 768738, -460697, 190214, 117630, 303199, -862847, -367286, -870322, 662109, 541526, 714918, -11317, 674398, 765767, -753907, 2681, 577111, 298135, 289387, 952100, -823697, -52757, 727530, 262083, 770308, -326094, -422631, 88044, -955764, 251596, 859594, 703386, 397522, -603995, -34156, 929368, 137680, 483817, -605424, -506871, 188384, 237154, 504203, -751823, 83372, -106615, -376667, 440466, 528890, 480404, -798262, -527657, -347910, 759200, 48872, -125577, -578288, 838656, -622758, -822465, -562394, 183082, 702832};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques442(){
        Integer[] array = {176068, -428408, -851384, 953345, -615529, 165153, 484236, -157444, -703094, 786136, -981634, -558572, -663717, 888648, -569317, 633309, 436720, -894633, -806160, 773863, -66767, 48210, -971761, 571187, 689732, -757156, -28059, 479520, -808883, 636888, -210497, 250594, 954533, -184918, 913088, 208140, -21655, 105018, -943366, -986967, 847401, 882039, -997301, 317139, 983509, 875850, -892487, 524764, 767766, -518405, 312435, 895037, -54925, -711010, 755319, 812198, -749305, 475842, -182164, 23224, -716050, -60783, 292408, -875246, 506420, -194784, 165282, -372031, -888816, -283791, -672872, -238738, 2041, -845326, 883094, -844919, 905442, 394121, -34171, 541504, -207493, 756336, 445712, -635536, 322323, 103317, -26920, -982699, -129579, -754126, 912324, -208114, 502945, 788094, 532752, -281310, 787997, -892845, -585456, 301642};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques443(){
        Integer[] array = {273459, -616791, 250575, 828350, 261415, 979941, -524545, -613823, -753451, -357805, -552339, 616442, 919413, -781505, -199493, 90298, -906637, -880848, 992509, 986903, 100384, -468679, -728907, -867389, -451503, 434250, -304786, 107494, -180081, -462692, 651820, -407314, 562325, -47322, 593103, 586251, -207002, 168118, -191282, -37871, 552879, -893570, -195174, 569083, -849929, 934562, 325463, 121839, -828195, -618591, 468955, -587895, 209185, 949002, -229105, 25428, 230375, -513598, 178448, -970809, -549887, -463917, 238837, 399338, -767205, 197213, -397904, -508851, 935501, 388024, 121039, 526014, 593998, 601618, -323113, -319293, 554526, 81287, 419581, -367364, -760876, -179722, 142212, -936825, -359962, 914476, -674699, -99608, -447439, 81880, 693247, -504692, -792815, -499117, -915024, 978620, 128091, 399, -698479, -307788};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques444(){
        Integer[] array = {-565659, 301635, 657223, -471185, -527257, 82462, 290769, 683283, 1766, -786448, -295172, 332730, -1403, -711288, 984307, 578158, -891618, -589006, -976231, -654224, 892606, 969226, 145194, 213534, -193061, -424813, -636921, -976834, 536356, -861288, 474315, 616899, 268574, 886382, -911811, -723142, 456078, 334974, -822412, 844270, 280033, 913003, -561195, -30755, -478251, -436269, 383248, -760148, -19299, -169933, 637028, -190652, 354527, -898297, 752669, -999296, -185926, -59449, -419106, 456481, -820612, -565646, 934233, -715187, 738155, -571534, -532258, -28430, -641728, -254268, -359942, 411526, -996701, -96888, -234662, -75445, -696687, 465977, -264031, 347231, 864222, 620306, -115119, 206865, 867260, -816014, -681341, -598959, -947230, -958488, -435117, -502698, 144718, 551803, 867369, 788194, -377559, 589871, 263787, -696586};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques445(){
        Integer[] array = {282495, -306481, -109400, 957226, 773543, 869036, 704098, 980638, 949124, -863178, 987017, 556256, -657818, -734887, 776846, 35631, -852838, -196386, -475807, -696691, 367567, -376810, 495767, -289967, 852234, -173700, 590840, -690873, 96800, 142920, -113835, 385457, -608188, -929365, 846995, 580905, -488871, -764471, 530605, -878508, -269664, 667541, -928763, 664299, 119848, 34654, -769592, -295089, 445854, -439108, 429327, -729475, 524558, 641218, -813655, -392820, 688077, -140419, 453864, -43289, 695158, -21743, 560427, -279913, -969920, 641741, -52735, 18297, 158164, -163825, -214943, -152516, -202292, -596399, -915075, -482114, -408190, -730094, -161816, 12952, -726477, 360042, -370173, -394063, 464733, 746410, -214171, -723727, 191470, 609512, -930163, 699891, -128061, -451984, -383155, -400490, -193895, 854243, -730431, -525833};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques446(){
        Integer[] array = {951695, -86859, -25817, -308640, -989947, -242487, 69765, 23699, -597794, 667259, 364290, 2232, -288126, -169936, 575399, -236623, 126854, -813833, 921418, -223185, 178208, 437984, -258938, -254428, -450346, 429465, -933004, 243918, 41877, -590055, -768855, -27877, 234381, 373119, 121182, 970091, 117830, -244521, 138357, -390129, 613963, 887919, -119091, 384531, 395583, -16655, 648010, 365240, 723336, -487155, 759093, 397986, -268461, -928678, 538007, 104672, 949794, 184011, -429762, -940169, -118289, 199583, -824555, -360919, 865608, -895684, -210009, -536331, -504182, 203017, 226951, 608117, -268472, -713639, -458670, 613877, 696359, -631447, 946891, 446413, 60173, 150759, -276759, -965049, -821197, -144922, -905969, 126880, 611291, 722055, 835944, 941578, -449019, -497001, -258641, 417056, 220572, -930164, 204053, 922919};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques447(){
        Integer[] array = {-850548, 384522, -543618, -165652, -454450, -186902, -581099, -672766, 479609, -29658, 867639, -282062, 663179, 335058, -117072, -80670, -215193, 95132, 650189, -786600, 676243, -660718, -775307, -558460, 306765, 101981, -429213, 223503, 291168, -917260, 330103, 496751, 550276, -384854, -412358, -603140, -372498, 50526, -473165, 470510, -361940, -441132, 772510, -276246, -204780, 298041, -239525, -135735, -844728, -718227, -206734, -40411, 70249, -424314, -197906, -424048, -620358, -244407, -756787, 500142, -256904, -330340, -967065, -287780, -258593, -246716, -852519, -842692, 171110, -630041, -383291, -14857, -18041, 684084, -1378, 449671, 434917, 156358, -466273, -93634, -254098, -961984, 275150, 568495, 179827, 34135, -172194, 466647, -27835, -856618, 322715, -320572, 559821, 731290, 185068, 59009, -378736, -788679, 701919, 509502};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques448(){
        Integer[] array = {-936760, 769720, 385571, -397241, 602897, 999184, 505571, -130092, 937511, -67073, 835633, 380541, -510921, 188664, -488436, 821008, 623808, -903542, -922231, 401696, -814221, 58047, 678517, 695359, 816612, -873866, 986918, 198797, 842822, -476181, -937965, -816073, 743150, -559020, 157776, -890962, 545188, -797131, -997054, -833401, 482042, 713862, 57212, -906729, 267017, 671746, -348157, 867532, -341966, -270051, -816659, 350973, -979977, 601287, 943978, -909524, 735971, 471166, -810202, 804636, -489080, -830538, -88723, 437197, -430759, -55414, 888590, 125199, 228591, -202535, 494013, 384723, 145684, 981283, -428306, 374252, -406706, -508088, -637056, 583745, 816005, -276628, 168802, -519793, -528023, 970769, -229298, 290508, 657561, 783976, -317914, -291511, -936485, -793368, 856928, -241767, -667429, -840528, 549267, -536183};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques449(){
        Integer[] array = {-350542, -124485, -159944, 849530, -15336, -539064, 128032, -527124, 902519, -99621, -154837, 789280, 744164, 277461, 772109, 653865, -811017, 24818, 653349, -396436, -676024, 268853, -121934, 541542, 548138, 591483, 115734, -964476, 583175, 852654, 71313, -405983, -870349, -896828, -820048, -452200, -298663, 507221, 287698, -549986, 285500, 842041, 177912, -979549, 257043, -297884, -361343, 483760, 724456, 65980, -22130, -550539, -752381, 218149, -253370, -916150, 399140, -326633, -148684, 151654, 579949, -961476, 111778, -279534, 150036, 956709, 420065, -603916, -899851, 269813, 977659, 18091, -610113, -472978, 371609, 199478, 813259, -729209, 776792, -681732, 410143, 572615, 922564, -710687, 742524, 628825, -289935, -686304, 481176, 948250, -312300, 430677, 85306, 321624, 863234, -776387, 975880, 29833, 707845, 834583};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques450(){
        Integer[] array = {-781916, -623907, -448159, -680953, 452309, -755590, -898137, -266866, 528648, -836563, -557742, 923297, 4633, -318860, 976771, -295813, -358650, -529770, -870000, -746951, -959458, -950161, -702661, -233438, 44408, -656259, -169700, 99173, 704264, -226360, -171538, -248011, -670962, 961199, -547364, -249881, -50556, -471825, -543306, -640438, 582342, -814706, -215794, 242161, 480919, -608064, 368204, 755226, -434970, 473825, 574156, 221926, 708034, -434033, -144957, 469393, 744359, -752446, -575392, 379879, 417647, 963001, -469963, -790898, -61649, 412618, -999542, 445696, 355202, 775512, -712448, 679777, -746787, 526016, 922347, -871317, -395210, 775768, -782914, 863461, -679098, 447000, 320965, 340583, -879318, 642052, 913063, 149057, 248675, -749105, -155405, 801082, 280746, 800048, -974165, 743342, 955355, -818851, -307799, -63558};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques451(){
        Integer[] array = {-990781, -601635, 736598, 956969, 897076, -14243, 149664, 163916, -335325, 764649, 893127, -611979, 649320, 844927, 275805, -832454, -896963, -49927, -264825, -68596, 873753, 842846, 602113, -195047, 259512, -392177, 840249, -595420, -480009, 349113, 451747, 834884, -371240, -353836, 908435, 1648, -967175, 36943, -849311, 467901, -484451, 659869, -148774, 155730, -225882, -848983, 533480, -41913, 696109, -407547, 279083, 973130, -178974, 982759, 831327, -667970, -287513, 692691, -159210, -683099, -967851, 105501, 367539, 530016, 630740, -108654, -896681, 663184, -987779, -624798, 135867, 782666, -453827, -159940, -669297, -317452, -722311, 114930, -670692, -58685, -462558, -40241, 573756, -16780, -96458, 392537, -473943, -66613, -243562, 162318, -447459, -402843, 944757, 835545, 875136, -100350, -105604, 787574, -667853, -518908};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques452(){
        Integer[] array = {656436, -222821, -795680, -972118, 701522, -11995, 112611, -320747, -788513, 62789, -553894, 412473, -983156, 382491, 381433, -936951, -636957, -297440, -308611, 355247, -668208, -40475, 253912, 822124, 779557, -73819, 728737, 312220, 338622, 834032, 123798, -514914, 658864, 690014, -680520, 412190, -146457, -985642, 382211, -566869, -231286, -324405, 73123, 844124, -58980, -37813, 694141, -399620, 666601, 512856, 135139, 379489, -303029, 199701, -530358, 189235, 325381, 857874, -834463, -362084, -606941, -375652, -947471, 296581, 799624, -108028, 156877, 617143, 852412, 595643, 192379, 166602, -138846, -180833, 959819, -427161, -79379, -404111, 944190, 898403, 821038, -336597, -630968, 814400, -557464, 956858, -288901, 948611, -546804, -357153, -139919, 969311, 587875, 224874, 857066, -592114, 30366, 733585, -12991, 765125};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques453(){
        Integer[] array = {-405237, -682530, -765447, -953166, 550210, -850193, -728795, -588288, 435592, -253915, -243359, 55305, -968, -334673, -829665, 214966, -565375, 785206, -628255, 160410, -402538, -787712, -904159, 468517, -67537, 826557, -375555, -559481, 120805, -754796, -202581, -110263, -806660, 974636, -188704, -694119, -793398, -598081, 861254, -548182, -824437, -113416, -329140, 907520, -382859, -568087, -141272, -603016, 503487, -712778, 761193, 440937, 278654, -866513, 808431, 55767, -334495, -165204, 866850, -16370, -877843, 833459, -472394, 160419, 952155, -719984, 402572, 843898, -666054, 540519, 277535, -696147, 176467, -330700, 851935, 645126, -940342, 301329, 646377, 890735, -948348, 145099, 358121, -453857, -548327, -384714, 118893, -360386, -584957, -426644, 658570, -151614, 15933, 188248, -386432, -65699, -220410, -166253, 983624, -975886};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques454(){
        Integer[] array = {-476767, 10041, 165982, 858300, 749092, -548905, 50088, -403101, -101424, -234174, 137634, -505539, 954279, 406893, -864075, -908049, 204647, -983475, 106165, 780348, -864592, 612118, -263817, -354768, -22721, -193866, -341541, -6050, 901025, 889006, -499032, 562142, -804191, 498810, 980729, 913798, -538468, 648624, 78371, -418699, 70838, 208046, -966717, 486133, 42167, 667063, -951106, -984725, -29844, -930210, -418933, -240197, -199116, -122153, -423297, -932105, -210015, 194185, 39946, -27965, -714754, -735404, -468728, 379563, 420736, -516038, -790747, 268386, 805930, 105995, -974206, -71529, -15448, -890448, -833894, -205367, -968235, -709905, -105038, -57709, 618902, 474578, -458552, -75840, 758946, 166477, 999680, -355473, 312242, -32217, -681317, 540829, -918062, -830423, 708586, 182878, -516981, 666485, -120545, 605519};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques455(){
        Integer[] array = {-219029, 512689, 166210, -200021, 144692, -128485, -715387, -683974, -319518, -283727, 498066, 378978, 530410, 627244, 974815, 698270, -521120, 328849, -53613, -253974, -798902, 340672, 699585, -909734, 134292, -842212, -238828, -145726, -209806, 152475, 527759, 996638, 458155, -268833, -10344, 472939, 864227, 794517, -643112, -324015, -999877, 523836, 139621, 641531, -144532, -246302, 115810, 580045, -229139, 58734, 466998, 511610, -906281, -353919, 916916, 523103, -455090, -388442, -566166, 268618, 457906, -418737, -678648, 411187, 512687, -873299, -174447, -786759, 833861, 452304, 515731, -231855, -918028, 421113, -766149, -23821, 584468, -705306, -377382, 530328, -847737, 711389, -794506, -429232, 522377, 345986, -616359, 679723, -657710, -164407, -43298, 235405, 335716, -257464, -815505, -1052, -668674, 735827, 399333, 650316};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques456(){
        Integer[] array = {-498205, -255075, 257389, 595508, -66517, 750222, 823545, 664812, 411695, 767585, -692424, 63806, 156980, 174640, 715912, 525603, -285204, -871338, -244244, -354386, 928707, -930262, 652563, 740975, -543255, 523997, 812268, -627575, 276133, -695456, 72460, 942406, 969537, -450727, 837065, 635930, -593331, 121725, -771777, -413714, 143364, -40922, 939543, 657675, -814371, 406998, 171250, -921114, 239845, 379094, 867395, 122309, -734633, -577417, -803155, 143043, 257547, -66871, 632754, 364910, -796111, 463655, 672070, -362389, 8061, 416172, -639151, -351, 253333, 47891, -711407, -681094, 906876, 443313, 296678, -915278, -205856, 808555, -959235, -682642, -40154, -1348, 758951, -860801, 488841, -641196, 337863, 123856, 232107, 610371, -656863, 661268, 392283, 584218, 416170, -703048, 561938, 989252, 151104, 548992};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques457(){
        Integer[] array = {320528, 612393, 178370, -489528, -801403, 921216, 425188, -530366, 502324, -995943, -799001, 625878, 159391, -665799, -356415, -207737, -711522, -347156, 319099, -795412, 398004, -358776, -236896, -288530, -587354, 155678, -17102, 34612, 862597, 475703, 7824, 242982, 553162, 788350, 382267, -380068, -864314, -125042, 588844, 414831, 835885, 566883, -496102, -669196, 939295, 968203, 408539, -89380, -90162, 24266, -525822, 648710, -921687, -964123, 457901, 785563, 592528, -145129, 314595, 937987, 50674, -402813, -982506, -807887, 609588, 977604, 769818, 760177, 452723, 853059, 659102, -551284, 473393, 229631, -726777, 233205, 248770, 376489, 777289, -565522, 889839, -584860, -959030, 526472, -935251, -710230, 275453, -336653, -137702, 847413, -795025, -756342, -60240, 301579, 374346, 232610, 617350, -609763, -805838, 568301};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques458(){
        Integer[] array = {164774, -123376, -531844, -793320, 120337, 239331, 283461, 523329, 1924, -471280, -667634, -966518, 692661, -545472, 433178, -70060, -39427, 956199, -989799, -23891, 109613, 568096, -258777, 445562, -757404, 900915, 479510, 416258, 507252, 2770, -598351, -354493, -537403, 298179, 944891, -222388, 325837, -743028, -671646, 713233, -772997, -237576, -705604, -378924, 595589, -455756, 89040, -413221, -251180, 441922, -934116, 865729, 406475, 764575, 739793, 155056, -366128, -587931, 586719, 602514, 356405, -198989, 292168, -437426, 401754, 697458, -591101, -682336, -88475, 819117, 307061, 105839, -769850, -380732, -884589, 650336, 385017, 185180, 996864, -276356, -884887, 276933, 364394, 504547, -962167, 312226, 655126, 736294, 847105, -348294, -238433, 637361, -904306, 595398, -692306, -765745, 146899, -38297, 572752, -53679};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques459(){
        Integer[] array = {311110, -87010, -742754, 153634, 391422, -256756, -445193, -958871, 793909, -462039, -195795, 631527, 784662, -496520, -538994, 513219, -749157, -518060, 620744, 585998, 220418, -997215, -381350, 284989, -474970, 889936, 279918, 57083, -543076, 202982, -692268, 785361, -122748, -248773, -959612, 352338, 833979, -141324, -230378, 621743, 777866, -480933, 521724, 654513, 779681, -184925, -676010, -161016, 452520, -606920, -438372, -406353, 341255, 992049, -321412, -728380, 349410, 770449, 569427, -762120, 343551, -479829, -447160, -65280, 344659, 403453, 970302, -41722, -395264, 354351, -736632, -455593, -671141, 110144, 564458, 18213, 18929, -125413, 901347, -829377, -789370, -858713, -986246, -778268, -651047, 930061, 533129, 730690, -586254, -968506, 731961, -525123, -136859, -452089, 605441, 305863, -719890, 143131, 835872, 345043};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques460(){
        Integer[] array = {730341, -304700, 875040, -314444, 308952, 570841, 444138, 825010, 836946, 438484, 584763, -20566, 200733, -483143, -930880, 456481, 195976, 941742, -858909, -28004, -20859, 546955, 951074, -487401, 640693, -577753, -667121, 54913, -312586, 406958, -903862, -46414, -816337, -43388, 626732, -191726, 146697, 846890, -132460, -867725, 492436, 519181, -957835, 221878, 286847, -832148, 669327, 45308, 634686, 557803, 523439, 846432, 431571, 117042, 90503, 84489, -715631, -970854, 244348, 657155, 894859, 33505, -232151, -277422, 555341, 564256, -839409, 595281, -116356, 545316, -746452, 36522, 565624, 826458, -465666, -392824, -872409, -102860, 808229, -449235, 233181, -481538, -314045, -945845, -829780, -415911, 557161, 140530, -871882, 608494, -732449, 921127, -916763, -486425, 164325, 977259, 952510, 806977, 48879, 519424};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques461(){
        Integer[] array = {-135241, -652165, -231674, -932792, 430869, 806844, 242219, -888467, -33512, 679805, -292940, 327851, -943624, -241861, -962100, 941278, 477856, 316257, -872380, 798201, -50557, 783755, 143379, 790879, 732751, -662165, 638201, -777287, 309503, 646590, 45447, -633559, 923229, 697988, 862520, -638495, 353478, 186679, -807479, 675173, -513314, 267358, -861323, -754824, 382317, -806522, -682670, 571895, 229704, 169072, 134279, 772950, 774565, 888825, 571169, 736069, -388486, -8304, 194627, 453648, -52046, -213169, 445293, 111193, -448972, 70725, -151338, 287250, 746550, -495253, 25281, -281627, -635605, -559895, -700207, -81580, -656376, -266738, -197102, 797032, -438618, 632640, 194134, 931957, -351843, 180191, -448834, -754769, 381928, 90323, -276638, -213576, 898893, 845563, 292370, -270281, -486695, 608309, 398975, -212865};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques462(){
        Integer[] array = {-220745, -594610, 160044, -224748, 531514, -352777, 986917, -371752, -701028, -40350, -873655, 599508, 649215, -67363, -355524, 464073, -797048, 573358, -150776, 804670, -874658, -659877, -53460, -554771, 250382, 532254, -338494, -577820, -241596, 109118, 879417, 202972, -353698, 580884, -782810, 240226, 306684, 841756, -318133, 460866, 659834, 123086, 530066, -51406, -937439, -432185, 85335, -13059, -31958, 415844, -790687, -773882, 790362, 942950, -821070, -174135, 85378, 502564, 343809, -170824, -121390, -453178, 991681, -641824, 454960, -64023, 641055, 275489, 267668, 343577, -71925, 369440, 907362, -159071, -271964, -666066, 649235, 747653, 674739, -426040, 837046, -973540, -271150, -148979, -883841, -538730, 101234, 95890, 771875, -820669, -342530, -608745, -809059, -612648, 301100, -957074, 945287, 688925, -474338, 536245};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques463(){
        Integer[] array = {-528191, 558599, 770888, -446597, -699079, 768237, 732158, -341116, 96353, 259872, 731713, 204093, 781531, 326148, -772064, -319740, 775695, -862953, 803655, -946737, -406282, -130627, -900235, 540179, 229267, 34461, 893425, -261030, 97499, -502001, -22798, -116073, 792606, -302440, 900839, 518590, 418695, -32232, -590357, 695440, 353019, -765859, -615795, 648815, 355583, 459551, -843185, -691817, 494486, 894061, -846129, 538529, 768745, 800325, -640187, 485610, -148966, -978167, 527003, -979161, -979176, 366514, 614025, -930302, -68718, -322684, 34552, 393405, 579754, -939332, -195754, 114519, 105653, 782089, -451677, -646852, -181149, 294634, 828478, -253331, 490387, -200935, 503373, -354699, 154134, -124410, 87761, -497105, -1562, 389057, -763999, -610322, -635528, -608534, 502754, -97180, -763279, 931712, 256467, 668720};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques464(){
        Integer[] array = {-339779, 284018, -738785, -857357, 477305, 173913, 614418, -631365, -679020, -916453, -935338, -823023, 893231, 499277, 617272, 685348, 938389, 383782, -184137, -516756, 224765, 276796, -826017, -265691, 250440, -397597, -906494, 300405, 199053, -149033, -291472, 53589, -242678, 355980, -510645, -288117, 515995, 216491, 493696, 603098, 772250, 737823, -401374, 500884, -773589, 146126, 816240, 902887, 156592, -137014, 101482, 156794, 292446, -121940, 265866, -691605, 577803, -284047, 21589, 737361, 913159, -361425, -814639, 207540, -212645, 694451, -954302, 348708, 845409, 37544, -295424, 840872, 407181, -500756, -643867, 727565, -868248, -320063, 678446, 304164, 109769, 255655, -721931, 852165, -544779, -192823, 903305, -448515, -699717, 363338, -363835, 784057, -86453, 983642, -732595, 726196, 317058, 180364, -469826, 72077};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques465(){
        Integer[] array = {-945304, -232136, 539180, -656584, -31782, 879707, -108870, -506020, -560518, 356473, -612380, 927673, -434333, -196303, 790121, -868692, -928838, -992224, 680758, 458477, -574017, 818461, -419141, 904561, -293500, 547891, 359779, 159869, -179680, -120938, 947612, -894936, 87594, -690513, 630921, -16999, -420855, -428738, -889680, 661173, -966778, 986007, 252024, 203916, 884867, -625194, 152122, -239662, -836425, -2941, -701346, 692272, 364562, -202921, -24892, 94683, -304536, -381129, -10422, -295794, -588842, -940109, 74735, -845980, -604878, 692951, 861146, -53978, 884024, -338900, 786795, -976234, -309419, -491803, -42222, -72715, -720988, 356330, -770338, 168228, 914735, -478565, -495846, -722448, -157476, -769798, 421617, 36193, -888872, 844620, -587481, -459567, -47987, -418769, -582748, -577460, -854762, -536680, -901033, 78275};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques466(){
        Integer[] array = {-71956, 909928, 810043, -603794, -886232, -774708, -877446, -173827, -470538, 657830, 626749, -783261, -794615, 359604, -369377, -87709, 324259, 960744, 693904, 987917, -440683, -262112, 22890, 370459, 186087, 371050, -122408, -412070, -769693, -339159, 782969, -907503, 153296, 44330, 444051, 206964, -873038, 121059, 81196, -742028, 451557, 387072, 600224, -22866, -951477, -959299, 268520, 555485, 190006, -232246, 146440, -429463, -644573, -721174, 935005, 706690, 939064, 976901, 902639, -865661, -846656, -502616, 159696, -715227, 744233, 311143, -774163, -384957, -852273, -6146, -128919, -936228, 654691, -20708, -319547, 278334, 98475, -801137, 801015, 955642, 970229, -607345, 813915, 682932, 774182, 965451, -571927, 130019, 212978, -256104, 108042, -173087, 353198, 5757, 763965, -829819, 266874, -226995, -925043, -889162};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques467(){
        Integer[] array = {536848, -692564, 211840, 246371, 322625, 852164, 720417, 785117, -385374, 541582, 161574, 422960, 671046, 950496, 313607, -180194, -26212, -528928, -89658, 314848, 431539, -463412, 487675, 344432, -71263, -918395, -302680, 930622, 578341, 653516, 850544, -271457, -543870, -845100, -728110, -369664, 146442, 471228, 455492, 882189, 987681, -383657, 135888, -550982, 584366, 885040, -798536, 988310, 107426, 507514, -405642, 165761, 446550, -920861, 133602, -21610, -977122, 491378, -994632, 944797, -671441, 633016, 8437, -585014, 62539, 869322, 781342, 929442, 864908, -262150, 290740, -774468, 766321, -46398, 800723, -931994, 188618, -115116, -874724, -930007, 670923, -338709, 578344, -697758, 449646, -995938, -26064, -787718, -417472, 504808, 339251, -698584, 372958, -92021, -746427, -561680, -519730, -606242, 224342, -12804};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques468(){
        Integer[] array = {567857, 453325, 245459, 718596, -544859, 777977, 387798, -960867, -270417, 997778, -666532, -371226, -832288, -911548, 907583, 714149, -876537, -992671, -745742, 959841, 600740, 539306, -144508, 971722, -810277, 375912, 704923, 753708, 802432, 897973, -607105, 618681, -949906, -118692, 809431, 823936, 52781, 357987, -682955, -879134, -554310, 82948, -802352, -278381, -362082, -183363, -286717, 39248, 887837, -53898, -803584, -555458, -89008, -18511, 644388, 356670, -740531, 547532, 121283, -832062, -242534, -230388, 32512, -664059, -569231, 14332, 397739, -126027, -710388, 957540, 422089, 49955, -970596, -725717, 25820, 104748, 390813, -842380, 789054, 441453, 104724, -265165, -362597, -215990, 24183, -136636, -432365, -128478, -934271, 683047, 925491, -572339, -507227, 240508, -149477, -995846, 895429, -13303, -352843, -732590};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques469(){
        Integer[] array = {-838656, 107931, -402125, 78265, 628727, -215502, -941930, -78277, -77307, -206012, 586495, -635470, 964530, -642417, -174412, -344537, 326944, 97999, -681273, 947232, 28523, 671797, 152978, 86021, 959824, 485822, 65538, -890133, 350392, 674266, 377823, -377871, 688999, 878276, -320790, 543980, 142309, 95005, 565613, 418523, 434504, 532646, -351511, -730631, -769793, -65868, 248461, 324631, -31927, 338410, 519415, 592017, -183033, 906353, 996285, 490874, -909210, -189684, 818774, -321173, -878553, -29224, -218439, -613098, 913856, -123589, -218829, -610823, -602924, -960472, -459808, -991413, 769573, -688644, 96603, -24780, -726847, 617313, 159141, 433536, 112082, -950511, 473375, -369277, -931167, 862181, 204613, 895995, 415074, -749676, -44322, 309575, 64693, -60335, -688724, 749239, 905969, -980381, -338245, 98254};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques470(){
        Integer[] array = {857838, -620250, -655347, 618281, -543518, -971472, 642809, -369843, 530325, 582837, -9147, -485369, -385440, -737029, 441029, -523580, -98566, 739172, -29284, -356827, -745043, 182191, 543786, -749733, 721717, -54456, -417645, -130169, 784171, -403007, 588688, 524472, 533442, 408600, 286625, 381862, -793339, -895654, 886508, 815471, -350769, -939393, 421881, -962554, 545538, 808090, -10425, -733873, -953110, -652267, 811111, -378922, 664260, 145423, 754572, -412699, -30832, 209164, 219885, -602939, -156028, 282228, -899657, -261888, 681729, -318882, 913498, 594410, -11733, 158728, 483875, 304456, -213093, -614230, 373326, -833276, -544931, -64502, -423300, 562409, -223038, 427403, 346655, 540579, -379652, 60528, -469465, -554341, 262050, -920985, -596502, -790984, -384348, 495609, 309917, -132550, 781812, -28348, 558286, -258663};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques471(){
        Integer[] array = {-487942, -422952, 60975, -751624, -779162, 438686, 139186, -576362, 613429, -481650, 271040, -265358, 203624, 192421, -968467, -588743, -503367, 971739, 318082, 762605, -982956, 822467, 265507, 68904, -228793, -883916, -411146, 347878, -429156, -463118, -353649, 121253, -953424, 432716, 363319, 499090, -419097, 479220, 130536, 490781, 872229, -825673, -514148, 18210, -857096, 663041, -736362, -918257, -268581, 235538, 519761, 990974, 548150, -38486, 342403, 677783, 428053, -205418, -648721, 925183, 120249, -241656, 793170, -461080, 377931, -370071, 355157, -190117, -310875, -567935, -360547, -447408, 949532, 702972, 621276, 496377, 738251, -467268, -421579, 213900, 615773, -34524, -692779, -105685, 624841, -982539, 591447, -517208, -574113, -522447, -611809, -83124, -563209, 305601, -404920, 119469, -128674, 801696, -989533, 165524};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques472(){
        Integer[] array = {-261887, -663100, 666838, 41016, -364323, 361684, 949565, -10643, 931056, 980606, -922564, -846578, 250989, -639995, -850981, 613017, 401297, -337444, -895018, 981986, -275791, -960288, 625558, -535010, -118551, 648852, -561292, -546414, -311632, -118663, 340809, 258705, 638641, -425558, -822842, 713112, 583567, -122071, -39731, 875106, 919159, 337086, -448822, 546233, 265775, 588649, -473335, 312029, 623967, 412348, 164581, -420819, 573654, -432035, -76898, 408842, -791264, -469950, 190139, -547087, 422689, 809281, 336887, 323818, -268826, 897777, 350244, 638624, -861134, -259949, 58622, 374914, -62325, -18722, -124269, -392007, -314441, -367173, 711925, -883033, 82714, -770616, 379053, -190726, 418792, -429046, -112559, -701007, 360034, 172968, -889579, -404183, -666480, -128584, -84411, -133128, -260729, 627483, -161742, -790936};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques473(){
        Integer[] array = {947625, -899552, -289485, 121405, 154479, 129470, -543761, -7470, 759173, -505304, -682325, 912414, 185688, -579137, -567763, 373541, -925084, -89683, -902542, -296967, -840589, 880951, -236928, -336027, -304629, -755661, -940929, 791606, 68088, -393725, 811778, 402463, 629548, -834281, -713216, 963912, -855168, -624750, -548513, 747387, 755579, 518856, 722770, 407658, -718014, 731030, -324389, 789678, -534491, -565706, -423592, -449166, -914407, 358191, 798399, 346166, -770257, -516862, -782339, 383045, -660458, 300240, -48019, -898698, -109550, 756105, 759266, 184574, 487755, -662545, -695283, 655983, 729639, 829227, -325847, -347093, -30330, 292231, -573683, 954552, 90113, 93811, -286106, 701297, 813856, -810918, 591497, 904040, -586306, -675110, -834528, -237437, -306129, 562433, 41289, 505206, 534740, -731599, 849086, 556367};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques474(){
        Integer[] array = {692946, -462825, -834518, -335666, 845159, 692886, 451007, -284443, -734323, -388859, 248966, 954345, -75595, 530203, 24076, -197314, 58376, 665581, -904599, 751100, 45400, -552314, -522366, 552754, -434696, -668376, 217901, 317961, -915746, -633926, -366123, -480011, 500342, -657416, -702301, 602918, -480743, -597045, -891945, -83176, -192234, -495375, 305328, -4071, 971797, 345264, 772541, 740595, 453963, -773800, 693949, -24107, 359989, 973954, 781389, 27175, -867387, -698158, -73637, 854790, -322625, 264350, 860497, 672927, -367218, -659509, 668560, -596758, -123969, -72931, 858938, -615786, 862858, 683976, -289158, -913499, 8169, 45473, -351869, 785327, -317141, -53301, -478637, -384351, -336057, -793178, -632216, -519404, 767001, -145489, 850005, 132027, 790946, -792382, 327826, -312695, -108298, -793563, 151908, -16058};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques475(){
        Integer[] array = {-901095, 484217, -112808, -227308, 588265, 634549, -237210, -48127, 368342, 90473, 250233, 991226, -897859, -426355, 458235, -221688, 640152, 31753, 430038, 786605, 405279, 814341, -920822, 461806, -802489, 116900, 246564, -403253, 547529, -526086, -177639, 748106, -747594, -164733, 105506, -380556, -194739, -800909, 32797, -908809, -949680, 279533, 876102, 737761, -981113, -758906, -936454, 571761, 599663, -648209, 890478, 490480, 409075, 664509, 228966, 803494, 415452, 949386, -253340, -37024, 980099, -785581, 586784, -557612, 982610, -390975, -335283, 438354, -208599, 362012, 176326, 307457, -822570, -465562, -822089, 279506, 782970, 916098, 130805, -914514, 77446, 63727, -597162, -635060, -104893, 179466, -971128, 511757, 740694, -532335, -139231, 630801, -9068, -964373, 557749, 712291, -108440, -429452, 320013, -576222};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques476(){
        Integer[] array = {723815, -446297, 420691, -698108, -501171, -348735, -17436, 379955, -102167, 492008, -561858, -237943, -342961, -526515, 796686, 982095, 85530, 521771, -929121, 472545, 278990, 853985, 404428, -35301, 291226, -115222, -692155, 655242, -804963, 306418, 199968, 446250, 138958, 781042, -820071, 387073, -639170, -801727, 100197, 70252, -331864, 202251, 372368, -848072, 562246, -313658, -770426, -325459, 629079, -306699, -867906, 839782, -719862, 27199, 832802, -405968, 893930, 243465, -677321, -565240, -640849, 203919, 129413, -500668, 779397, 462078, -265599, -268715, 462256, 584794, -225638, 565474, 251609, 738005, 712887, 316268, 971715, 483027, -23662, -279230, -795671, 943411, 325962, 533932, -412035, -428111, 537849, -916414, 942212, -593820, -645795, -328964, 250303, 632396, 756142, 86814, 546500, -889613, 506180, -759587};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques477(){
        Integer[] array = {798044, -402085, -260518, -572875, 467627, -672237, -546714, 153407, -10570, 735186, 878066, -507519, -154023, -19115, -683447, 588714, -726153, -372004, -445400, -946607, 862398, -496096, 234120, -318288, 457979, 313666, -383486, 303502, -847354, 277667, 857260, -945264, 837639, 150615, 934383, -196918, 265940, -491052, -916548, -978586, -229463, -471169, -11002, -317628, 833149, 676248, 856160, 167494, -860745, 701839, -378669, -339231, 88228, -582558, -933753, 566922, 32925, 755003, 129635, -750084, -783904, -339218, -834227, 700739, 895622, -875912, 330798, -339541, 454421, -374915, 454396, 363851, 678946, -240456, -886696, 870500, -336977, 461647, -778363, 694998, -78369, -790390, -383581, -153345, 868569, -763356, 506450, 96105, -450520, -323478, 597647, -723041, 475723, -948193, -263166, 617984, -723302, -276730, 856094, 10471};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques478(){
        Integer[] array = {626193, -117308, 937056, 449385, 635061, -148396, -981380, -637534, -276171, -940273, 956610, -336006, -287203, -717818, -569191, 64410, -525091, -663719, -107117, -373993, 176155, -546719, 702892, -968485, 271220, -645517, 360274, 8679, 459804, -532445, -238328, -921782, 579512, -415359, 843628, 310239, 649073, 255716, -548647, -38128, -871923, 508598, 189638, -759065, 220161, 765104, -103956, -294153, 949525, -997850, -5044, 918107, 264891, -902233, -249599, 779436, 732165, -608122, 38443, -102197, -124399, 404745, -475686, 511566, -739586, 312265, 754025, -472458, -409353, 354576, 90041, -250715, -652645, -226732, 560731, -464307, 54146, 282950, -139942, 454152, -199455, 860666, -749056, 329332, 338973, -386752, -749890, -593466, 326493, -443023, 921331, 768515, 501120, 658364, 236924, -91028, -204105, -74307, -253230, 949241};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques479(){
        Integer[] array = {-363658, 646018, -383750, -393866, -471623, 312687, -801833, -259185, 620794, 958089, -36692, -372900, 339075, -520566, -730307, -828286, 480002, -760087, 949403, -389085, 306075, -798060, 764421, 580888, 22769, 456513, 297027, 872282, -908579, -641128, -536751, -521834, 592036, 813186, 114203, -838951, 863657, 71427, -142027, 319078, -883522, -749019, 55794, 812844, 281315, 266868, -597575, 939894, 892140, -837452, -635845, -238188, 37549, -822376, -891261, 479882, 350973, -542329, -581138, 389858, -180923, -692470, 249332, -358666, -648023, 961403, 531979, 368907, 304548, -864113, 538052, 774937, 97147, 139794, -19838, 755453, 388412, -82107, 324237, -579645, -456384, -965396, 482772, 732501, -321825, -289625, -931003, -700268, -664086, 699535, -509524, -298627, -598216, 6836, -760411, 139415, 117381, 371013, 813297, -577542};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques480(){
        Integer[] array = {275504, 366543, 51226, 172542, 765450, -228797, -361095, -367068, -614362, 628416, -564826, 194885, 504248, 562915, 304467, 647303, -737410, 627005, 200229, 312204, -345091, 429775, 24163, 159104, 952811, 95688, -24991, -179370, 60895, -932125, 529884, 999160, -746086, -910558, 730179, 508386, -893668, -648306, -324408, -687251, -256208, 863231, -519854, 607819, -588440, -894886, -599005, -675883, -328187, 214903, 456194, -440888, -53036, -489601, 620380, -667988, -447451, -706922, -325754, -943923, 629132, 236589, 110336, -686548, 394197, 868410, 723219, -954850, 561497, 880953, 52083, -3011, -432650, -407159, 133376, -209225, -376376, -23159, -714977, 25889, -795707, -480809, -162484, 869501, -947274, -726029, -424468, -577943, -333901, -127416, -552831, -533979, 913707, -679618, -122616, -315659, 922907, -37668, -775972, -565673};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques481(){
        Integer[] array = {-862041, 318546, 295327, 202192, -587954, -556852, 864583, -498616, 377759, 877176, 576611, -776377, -52284, -859262, 115975, -805917, -81001, 968195, 812585, 677064, 436592, 346104, -768353, -215530, -279995, -57399, 996208, -572409, -267737, 407788, 110068, -195693, -293118, -477907, 760641, 245244, 645225, -290756, 309069, 745801, 844821, 497540, 459187, 122988, 812784, 863559, -33360, 928758, -40534, -872110, 530281, -248416, 413800, 718867, 564560, 514438, 511865, 397562, -766575, -904804, -936936, 5235, 208604, 746222, -158696, -475220, 810308, -257246, -166431, 103852, 823075, 758744, 994046, -778459, -931616, -675323, -739859, -584207, 740375, 83539, 259772, 344026, -323306, -588323, -794298, 807233, -406778, 148732, 739400, 29119, -829315, 580903, 866729, -807600, -642799, 295058, 104070, -998300, 226330, -750913};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques482(){
        Integer[] array = {742080, 732376, 309909, -50570, -968169, -196822, -576120, 858560, -536516, -181905, 500118, 395311, 21418, 718558, 571342, 74577, 674877, -156230, 672332, 164295, 359067, -453973, -713755, -463736, -508374, 805883, 460942, 934803, 757238, 795748, -774642, 969413, 516727, -174631, 398275, -282985, 205900, -924165, -971267, -759383, 94390, 453659, -145663, 283720, 509758, -400323, 395586, -174244, -916915, 320764, 747256, -546741, -488581, 179845, 554291, 264721, -323353, 240523, 503069, 61614, 753784, 124557, 14836, -953608, -283134, -658622, -613790, -527679, -790128, -57997, 432326, 133370, -989900, -188616, -746239, -109284, 552043, 641199, -809023, -27477, 339597, -137172, -466013, 808498, -732622, 880026, -922533, -17299, 416156, -117562, 161429, 319036, -683876, 444387, 162153, -558354, 392063, -332934, 775540, 483155};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques483(){
        Integer[] array = {-493982, 344781, 160885, 622222, -989067, 303301, 881482, 75982, -793139, -593991, -578438, -509178, 667099, -213730, -594034, 875839, 249913, 120438, 179178, -833325, -987992, -771694, -325742, 250486, 455071, 879819, -56542, 912629, 299825, -857717, 626639, -221090, 70516, -445647, 753348, -576039, -174539, -901075, 981344, -141488, -519977, 919469, -972614, -422992, -443599, -31149, 535683, -298117, 432648, 765063, -631692, 890597, -407975, 153707, 702971, -382168, 393420, -486230, -28631, -598709, 797285, 622784, -504752, 975041, 655618, -940837, 777846, 651480, 123279, -3012, -734669, -640748, 446120, -921925, -584555, -183850, 783514, -157382, 19109, 561689, 618399, 892741, -81508, 765316, -58916, 954114, -809790, 886553, -821408, 344837, -757731, -971691, 623974, -948486, 201143, 660387, 120509, -332912, -671797, -98080};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques484(){
        Integer[] array = {107363, -273400, -974966, -986914, 360998, -837534, -360339, 992711, -109756, 407275, -638457, 857898, -554741, 963782, 183835, 612117, 645433, -173058, 969793, 995604, 247660, -389540, 327313, 109220, -653291, -704384, 821791, 185190, -195575, 414208, -690242, -300508, -431733, 147373, -439114, -50172, 763433, 795609, 764846, -590476, 137205, -456611, -433443, -792185, -728133, 297099, -194494, -14143, 961642, 898257, 793912, 142825, -139558, 489839, -967146, -456306, -111215, -528607, 474081, 918907, -137473, 108830, 676201, 435048, 188029, 249034, 129940, -909788, -893236, -819354, 772286, 191575, -648187, 596334, 628991, 239582, 478049, 756146, -486278, -275179, 876794, -993820, 793224, -220047, -50836, -919199, 383851, 121705, -379635, -909575, 395849, 366298, -294702, 197017, 985550, 831283, -438823, 793905, 111000, -674722};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques485(){
        Integer[] array = {-592374, -624989, -928478, 679125, 260459, -500100, -992812, -945693, 447903, -954509, -78700, 79813, -319923, -479514, 133060, 290490, -724418, -419930, -923984, -209951, 401405, 308379, -204526, 963199, -705314, 284379, 624624, -43981, 155418, -535264, -735127, 735018, 763584, -69458, 348454, -566113, 179629, 239517, 203812, -248191, -10757, 339092, 157872, -2868, -228572, -690067, 114652, 651570, -436934, -255750, 649510, -982548, 532044, -446126, -865729, 712039, -404042, 107534, 313686, -82383, 673868, -820497, -716972, -722728, 635163, 959113, 820471, -305511, -703117, -473556, -972740, -172476, -217515, -930041, 418468, 873149, 962299, -780259, 696358, 307043, 423239, 391634, 884577, -977557, 155371, 433460, -262438, 424845, -734517, -625748, 654200, -609079, -163418, 475407, 524131, -370056, 784647, 884332, -602638, 200644};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques486(){
        Integer[] array = {-318673, -751270, -970636, 35302, 142580, 807297, -325183, -659053, -740819, -228766, 94861, -558602, 807162, -67638, 233198, -448562, 306952, -733231, -66277, -693935, 605382, -800780, -121666, -862646, 162071, -99524, 641314, 571112, 21455, 167861, -848976, -279535, -878302, -731044, -471887, 550522, -231932, 459206, 828976, 649102, 587936, -939345, 501239, 84904, -865146, 863882, -54464, 535097, -3125, -184283, -445192, -124152, 596446, 834638, -827478, -734312, 841009, -259396, -545160, 274975, -785741, -935475, -740939, 485387, 424316, -255181, 133658, -898070, -926814, -204314, -721012, -955938, 521451, -29676, 39570, 525974, -152848, 657104, -17521, -18268, 710262, -396049, -725302, -522331, -754118, 705701, 49261, 536985, 864514, 936254, 870547, 773057, -570430, -755971, 909086, 578500, -965747, -763816, -959427, -54152};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques487(){
        Integer[] array = {-243030, 3016, 284280, -511577, -130112, 131838, -912066, -806719, 593669, -656560, 939368, 489940, 10646, -885470, -507156, 976582, 46671, 714854, -21109, 305313, 585639, 453861, -581884, -14939, 113511, -607134, -552187, 495810, 855591, 40526, -287054, -824167, 955725, -103954, -977481, -232505, 739686, -40711, -437353, 670365, 662642, 723901, 216020, 306549, 680130, -428679, -918432, 834681, -806037, -486945, 607647, -378264, 168907, 804744, 188957, -507381, -936282, 601651, 581627, -727360, -386379, 661281, 97383, 368150, 332411, 676162, 446589, -57538, -68057, 885536, 408283, 686339, 364588, 830129, -396885, 268837, -932511, -292918, 263226, 438799, -645303, 701828, 910972, -393122, -290355, 513580, 324851, 643716, -629768, 173975, 371617, 669006, 845728, 892692, 41225, 874730, -564096, -290053, -762167, 410259};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques488(){
        Integer[] array = {-23755, 361580, -945387, -46663, 687251, -558121, 895258, -710135, 417887, -272476, -406218, -131696, 255080, 608942, -761658, 139197, 76274, 375230, 303580, -915927, -147652, 63372, -413060, 241156, 813403, -891825, -125807, 671710, -838479, 365110, 752884, -939517, -996634, 490955, -993930, -785079, 841620, -904450, -753386, -266745, 881132, -53991, 433112, 314927, 123387, -406336, 832377, -587696, -39995, -804683, -788728, -343562, 508699, -324972, 90358, 727883, -927082, -985551, 800698, -146317, -197402, -210478, -469435, 974027, -631199, 464972, 320474, 853054, -136362, 685213, -957148, -941786, -214851, -398525, 280496, 210339, -173636, -754961, 40820, -884544, 326832, -205045, 127000, -180992, -157564, -547848, -875553, -329316, 243881, -799672, -192088, 119347, 311872, -127588, 504079, 945371, -659963, 700135, 447678, -685692};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques489(){
        Integer[] array = {-202587, -750284, 628502, 107224, -775090, -624081, -158796, 972954, -502973, 929073, 458477, -437802, -600168, -22200, 979586, -540236, 788337, -971278, -651439, 230896, 413947, 365048, -230485, 365529, 306284, -924877, -503006, 259747, 312157, -866552, 364936, 647281, -771435, -495008, 762142, 49284, 432812, 931959, -794915, -450043, -372286, -548888, -476455, 32721, -806649, -553491, -833919, 690288, -802329, 328200, 318241, -491767, 80492, -545003, 870633, -181085, 390579, 331988, 857652, 908569, -119133, -716597, -553209, 759685, 758586, -293667, 114466, 694007, 616346, -663979, 257063, -207132, -28285, -467081, 267845, 906823, 168322, -920331, 669988, -229401, 625153, -248780, 828182, -200532, 781437, 921748, -78892, -771776, -425923, 924892, 112156, 383361, -151562, -103894, -614108, -88675, -349274, 13158, -279152, 755528};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques490(){
        Integer[] array = {22188, 372512, 958779, 578999, -454848, 788093, 462426, 227279, 256002, 123535, -752890, -85753, -498073, 852650, -579979, -17128, -89326, 808310, 374922, 69753, -363922, 419933, -87350, 752287, 63668, -784301, 385031, -43089, -570559, -880317, 277281, 225632, 12149, -552332, -763302, 916509, 722661, -76723, -251216, 237581, 768117, -966292, -288192, -617570, 463298, 233678, -491536, 565714, 205893, 881381, -330756, -590353, 554435, -429047, 105725, -105551, -930933, 992563, 872764, 960685, -683304, -714863, 229884, 881116, 508361, 928443, -476104, -325549, -239079, 117179, 718270, 871554, -691922, 610198, -762020, 313503, 907854, 413872, -412754, 383656, 503637, 569234, -497305, 30134, 766891, 106273, -22136, -654188, 265384, -877831, -145604, -179987, -655595, 682558, 33683, -300111, -480872, 13754, 408919, 87041};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques491(){
        Integer[] array = {854961, -584630, -612622, 821615, -640246, 294389, -432762, -570137, -30108, -471130, -350958, 977745, -27632, -590620, 430926, 97646, 755800, -855597, -486194, -378805, -825839, 904675, -957409, -511067, -48097, 499701, 709075, 759442, -367576, -822773, 152929, -287151, 136878, 436698, 805979, 553246, 102785, 600934, -370075, -97645, -646713, -979743, 250396, -499545, -543913, -286152, -44627, 809063, -427824, -342001, 732772, 976650, 815179, 793367, -825036, -88916, 853069, 262142, -5071, 289531, 275599, 812430, 318410, 507527, -600172, 581536, 426601, -156911, -748532, -86272, 723744, 718708, 749324, 173277, 2023, -261185, 166274, 513389, 643400, 704137, 284186, 47062, -443618, -904742, 602605, 862081, 505240, -629543, 491092, -541257, 748539, -15533, -737760, 692931, 491808, 813850, 337545, -635319, 286390, -226669};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques492(){
        Integer[] array = {374190, -98715, -119556, 216352, -649863, -424268, 849221, -865821, -377972, 463110, 185026, 389707, -868285, -127280, 417259, -682396, 625943, 30549, 496164, -40466, -840667, 391788, 4508, 128867, 526572, -54456, 941074, 359708, -964558, -542472, -188728, -985282, 868496, 496321, -18395, 496580, 276741, -479979, 763086, 366608, -804324, 506256, 268920, -326233, -393240, 255786, 120957, 437097, 159924, -521083, -843949, -885201, -671847, 404046, -543108, -819535, -312975, -105669, 791963, 384905, 292448, 286606, -527448, 588211, 542415, -178555, 919662, 724085, 404714, -654767, -751465, -213098, -29931, -871941, -929476, 45544, 581924, -841420, 305521, -773109, -310618, 427508, -266759, 73489, -930917, 745824, -275238, -858329, -455437, -204425, -173421, 790761, 159591, 246216, -765037, -621231, 81393, 746161, 979198, -371533};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques493(){
        Integer[] array = {-165032, 602085, -897381, -61202, 263863, 285772, 290303, 748298, 10960, 388474, -844228, -846089, 908177, -678257, -939816, 215166, 371370, 514402, 150200, -233383, -599845, 648017, -640911, -552436, 932566, -716522, 81865, -789128, -453012, -983946, 222150, -771994, 470000, -711585, -231743, -559593, 800039, -768394, -336880, 297037, -593329, 896807, 700361, -815185, -407385, 920635, -267173, -191289, 10416, 77811, 520151, 318071, -520724, 794166, 766914, 485509, 541380, 783951, -134322, -81985, 958370, -789361, -365443, -276094, -409575, 79150, -891673, 756568, 578880, 478229, -220234, -288865, 426746, 770228, -781474, 639969, 437533, 171761, 5370, 932845, 117639, 829488, 831927, 159093, 150254, 845155, -292035, 92069, -675422, -572279, 414576, -467991, 986034, 143391, -213319, 6803, -315073, 351344, -44507, -46196};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques494(){
        Integer[] array = {867261, -117855, 688016, 707108, -127294, 864437, 530488, -614797, 250920, -180147, -175417, -78576, -891975, -419127, -537712, -994427, -856253, -991655, 59990, -201213, 990986, -254493, 317871, -48458, 255024, -690289, -376655, 506660, -764331, -519938, -721343, -842753, 185546, -620419, 808886, 702230, -635447, 25188, 70946, -371064, -815079, 464675, -584753, 284847, -813600, 372594, -648531, -925650, -344932, 9703, 525207, -519173, 324354, 114261, -522559, 739790, -900518, -481677, 46755, 465198, -228593, -861909, -443973, -533133, 662645, -872175, 780850, 766988, -442334, -626652, -963651, 260477, -440274, -181062, 933039, 131158, -70388, -917748, -941546, -409127, 760995, 750438, 513819, 474366, -859476, -925275, -800101, -629829, 312009, 98913, -355235, 29630, 301832, -948651, 41464, -630916, -346905, -398496, 33620, 595244};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques495(){
        Integer[] array = {740411, 61863, 475062, -696914, -994176, 957390, -241125, -154171, -936012, -562756, 388360, 611051, 868550, 479040, 661405, 581328, 701268, 660800, -763004, 468827, -742556, 674334, 893533, -922949, -916805, 964532, -86959, 81658, 38494, -739400, 27593, 109477, 902667, 104584, -988063, 343971, -224775, -192659, 123410, 919281, 170118, 445224, 399625, 532312, -281440, 769488, 430605, -387121, 65073, 465139, 79096, 372526, -633866, -586726, 218612, -792412, 800806, -835615, -125317, 460109, 884587, 41551, -946795, -584885, -507514, 913513, -57419, 416425, 226659, -55125, 424406, 555472, -550482, 663755, -460692, -623454, -124547, 622262, -929753, 509379, 843309, 994538, 346631, -796297, 999980, 400802, 635021, -875810, 841977, 305293, -186421, 82933, 788555, 86237, 650709, 74233, -229707, -556134, -376576, 197270};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques496(){
        Integer[] array = {286391, -682618, -650955, -479521, 848206, 768693, -830353, 474430, 541047, -929300, 950057, -661919, 511457, -979879, -466826, -141108, 45343, 748929, -527629, 609089, -481672, -169127, -456444, 633962, -848920, -626192, 34796, 442987, -25061, 877385, -551265, -892681, -250087, 678413, 21849, 227081, 41997, 56132, 217482, 245131, -258163, -356039, -898324, -444726, -587754, -516723, -905155, -715731, -219287, 938476, 605993, 720845, -299500, -995765, -219938, -706391, 757098, -827192, 169017, 615469, 530710, -808961, -924924, 989624, -609701, 781140, 774216, 407201, -84001, -484026, -965019, -154312, -822565, -735613, 847404, 929806, 226571, 698189, -679824, -802634, -181419, -566, -393260, 351790, 13287, -77752, -351517, -381860, -890168, 884049, 598939, 906970, -762028, 303305, -380876, 792572, -107674, -856046, 48232, 78875};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques497(){
        Integer[] array = {-207529, 984127, -516791, -25483, -454321, -691746, 487055, -843550, -549581, 121264, -364149, -670020, -552888, -750051, -512268, -323022, 469530, 225950, 551339, -882825, -637889, -385593, 512976, -651010, -57997, -438654, 263872, 885734, -139339, -749178, 408420, 948703, 48474, -469413, -346331, 361128, -232110, -44071, 752110, -69834, 845923, -619364, 555892, 563357, -6069, 896882, -829168, 371584, -92964, 988181, 636131, 227095, -327942, -164280, -955245, 59384, 785824, 410046, -106637, 215613, -297708, -460884, -481152, 234932, -814191, -638547, -596305, 8371, 131414, -498627, 926216, -601623, -829124, -914996, 944654, 619393, 44982, 98604, -840417, -884845, 775952, -700864, -782148, -264403, 453936, -973483, 77189, 707243, -563944, 44134, -81632, 330034, -283793, -768101, 210893, 903656, -752184, -716864, 397243, 467737};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques498(){
        Integer[] array = {197159, 923615, 622289, 900908, 219470, 546417, 411160, -387014, -987531, -115642, 111158, 219716, -849361, 321841, -240315, -420584, 499482, 684109, -738523, -163124, -987841, -257463, 735752, 215813, 555276, 577926, -911673, -633906, 903956, -140369, -276533, 33619, -700778, 942202, -474718, -855684, -499843, -815602, 518230, 524022, -673152, 621556, -549411, 134075, 52061, 956859, 48844, 799492, -225204, -34674, -782206, -90331, -316012, -568398, -189632, 547101, -660822, -905734, -692510, -406181, 189070, 998535, -487566, -462742, -248929, 763760, 211859, -644746, 135715, -165276, 697138, -71708, -189047, -357776, -756581, 719521, -239578, -145396, -807140, -684354, -103122, 391899, -47612, 950992, -715101, 622493, 722830, -521608, 464869, -980236, -18025, -666192, 556706, -563675, 382821, -869935, 753240, 179244, -116599, 988800};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques499(){
        Integer[] array = {757068, 314661, -523406, 604422, -672880, -526552, -717211, 32565, 266790, 148890, -487981, -683006, 450732, -109273, -390794, 665130, 190672, 791103, -519623, -745507, -306100, 557385, -953737, 573065, -736194, -238438, 544172, 299062, 313622, 139783, -79083, -38602, -654819, 800148, 130581, 240510, 840803, 258882, -661807, 448383, 863758, 647607, 67001, -522015, 544323, 983180, 924771, -753642, -274249, 243783, -784806, 585084, 763768, 271632, 435769, 189277, 56081, -829554, -804666, -850160, -224447, 198071, -356591, 927758, -433871, 96385, 28100, 540026, 862035, -708901, 151865, 43036, -518059, 50696, -148715, -798420, 333799, -671545, -116690, -374351, -742637, -712673, 681594, 221911, 882056, 456594, 250052, 628197, 936958, -339727, 445468, 64118, -848811, 440777, 174306, 561584, 401634, -578143, -532751, -10865};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques500(){
        Integer[] array = {845118, 493861, -884026, -595640, -461949, 729707, -410742, -216434, -497049, -571062, -449558, 397865, 79925, -550797, -956635, -505214, -427037, 571702, -609044, -364739, -791911, -831493, -192062, -587773, -789523, 763375, 577791, -497244, 920940, 307898, 95804, 917314, -998833, 652770, 958619, -65347, 203748, -548079, 275051, 465114, -294752, 850649, 593311, 911114, -367594, 329452, 742991, 844186, 769920, -535289, -933478, 967291, -177298, -378624, -556998, 380759, -700942, 740570, -564578, 657239, -407513, 491602, -147567, 750756, -356100, 607105, -669864, 645204, -115254, 99507, -771126, -860512, -163346, -466434, 219986, -196095, -587210, 335429, -208963, 628925, 489226, -944737, -159251, 455643, 775475, -952684, 795524, 165104, 871069, -698020, -724439, -507356, -325452, -96556, -925790, 18928, -17867, 862993, 300040, 188713};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques501(){
        Integer[] array = {-401553, -485158, -898889, 444976, 611608, 88870, -617376, -392949, 263911, 597997, -969384, -630454, -272417, 968033, -689617, 239695, 93801, -580044, 522803, -318122, -280580, -237427, -557108, 4917, 312332, -925980, -821629, -45230, 202009, -242918, -538020, 601586, 904936, 624000, 95507, 742584, -540581, -921238, -127087, -834484, 490143, -894184, -496323, -693065, 192741, 319798, -213454, 309448, -529973, -755883, -846949, -361852, 775534, -830674, -222449, 613208, -249680, 592557, 977886, 587007, -945962, -962545, 628324, 192978, -795140, 20513, 688611, 468422, -166501, 849158, 3120, 860682, 142125, -76714, -372529, 99832, 147056, 534189, -632290, -39014, -742074, -783034, -627237, 274045, -234278, 670521, 371126, 945247, -662199, 346319, 955413, 50447, -185539, 474462, 952125, 538847, -478660, 359851, 186168, -344447};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques502(){
        Integer[] array = {779241, 971703, -879892, 889120, 842038, 598409, -230591, -955773, -519673, -992165, -73940, -390484, 461846, -803828, 517222, -707911, -20094, -36057, 472966, 752114, 534657, 237169, 438262, -940095, -745140, -173268, -418843, -287390, -399922, 442214, 802187, -732581, -653587, 810938, 606506, 475271, 556507, 545309, -18589, -798615, -986099, 285955, -55909, 732964, 143998, -765837, 323431, -662410, 80425, -172855, -219207, -708360, 984646, -573839, 877278, -795304, 941805, 815849, -694603, -487106, -580233, -983815, 788403, -437824, 310046, -823852, -496404, -709652, 378477, -578373, -261858, -249776, 292396, 723382, 343666, -225597, -502072, -130994, -508611, 122656, -58827, 227129, -735177, 57101, 156787, -575735, -803799, -704401, 928665, 825048, -467257, -820088, 457906, -891933, -458118, 301881, -357469, 847320, 349499, 7293};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques503(){
        Integer[] array = {-476445, -260717, -789729, 703661, 911448, 647821, -199474, 770377, 515986, 166115, 627412, 727130, -183654, 605593, 695703, 602126, 947084, -420059, -154094, -844750, -845656, -242135, 56253, -345852, 339902, 253316, 611101, -823602, 35337, 190155, -431677, -290546, 196955, 665440, 353110, -726299, 742211, 867777, 500340, -560204, -684015, -14790, -354066, -94102, 33459, 14619, 276476, 173359, 188121, 910905, -313738, -909008, 431856, 110362, -973508, -926146, 21905, -146415, -410304, 465337, 515098, 125467, -346388, 715943, 419004, -669241, -379343, 407326, -892188, 254190, -689381, 536342, 691305, 807498, 771597, 662754, -44841, -277375, -231982, 547428, -206582, -205925, 803986, 702371, -425968, -149094, -298252, 906222, 908986, 531799, -9140, -353463, -782747, 407163, 326580, -113149, 101033, -297972, -780965, -394910};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques504(){
        Integer[] array = {326601, 979431, -435667, 202105, -174196, -278793, -925267, -79798, 183190, 965057, 727614, -129595, -761830, 756403, -333378, -650528, -624262, -841242, 935677, -495719, 661096, 614169, 666977, -112916, 857396, 915614, 613451, -668772, -493975, -669185, 167779, -155734, -286605, 253185, -155654, -254754, -196954, 668656, 585574, -28351, -375664, 88122, 946616, 557755, 82317, -714149, -215650, 415003, 949381, -998472, -821442, -292873, 966933, -24454, -535545, -836670, -634169, 343212, -764731, 427177, -807306, -301736, -764215, 812565, -499389, -313234, -376444, -58962, 86451, 894284, 11314, 326382, -75599, 810865, 17097, 851730, 514074, -466613, -719426, 482798, 990717, 760269, 952924, 244009, -172710, 582781, 333477, 871812, -922706, 172350, -927791, -350754, 687337, -854403, -443728, 318053, -491444, 418469, 282341, 155020};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques505(){
        Integer[] array = {-31569, -802895, 663359, 800174, -344164, -137711, 174668, 958500, 416595, 749985, -560698, 876785, 133766, -289301, 290463, 378634, -79646, -788943, 256055, 164482, 511729, -23272, -724812, -861672, 195635, -644075, -703668, 669526, -101053, -227449, 137295, -593152, 309236, 490042, -583194, -295589, 886533, -319640, 563908, -585234, 346529, -853427, -472389, -429869, 892614, -326583, -56, -650402, 198378, -864378, 144378, -899947, -201280, -338349, 203033, -532050, 343700, 532381, -375903, -22410, 961671, -368706, -138102, 800671, -808525, -700304, 3821, 463035, -11526, 705421, 418840, -649080, 851822, 859079, 672009, -418358, 588216, -225658, 644916, -504045, 219815, -828452, 705986, 62750, 417854, 319498, 918627, -119515, 524632, -643182, -26829, -721169, -152317, 266763, -424095, -53255, -945127, 412759, 789550, 204666};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques506(){
        Integer[] array = {21985, -80613, 579344, 151193, -465963, 517601, 714324, 720147, 635929, 999568, 85674, -896961, -920692, -635043, 714886, 923064, -379376, 930510, 205203, 22135, -545389, 944611, 196109, 563532, 870242, 286900, -348027, -699020, 561205, 242782, 947526, -926808, -672764, -302231, -61317, -453184, -483201, 626893, -474446, -127677, -378726, -239219, 946711, 792926, 499564, 788204, -828088, 998595, -877012, -594422, 632575, -818991, -980569, -163832, -978720, 437601, -667439, -263149, -885057, -126222, 515282, 707418, -864373, -707073, -445176, 327718, -803590, -808287, -798783, 919282, 683653, 803710, -75031, -32209, 112635, -563427, 732776, -927889, -657914, -217622, 950426, 515928, -15614, -446747, 862693, 776201, -560983, -871596, -963244, -810649, -925749, -198854, 662770, -63107, -372741, 611234, 347782, -171827, -488920, -901436};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques507(){
        Integer[] array = {-872844, 815364, 292207, 36641, 137690, -968704, -256124, 715066, -965142, 38206, -766253, -775003, 316391, -919849, -962846, -805776, -926534, -988030, 342211, 311467, 863291, -827388, 97933, 17176, -727180, 396092, 1565, -381423, -437977, -994271, 310771, 477721, -676089, -579503, -932112, 508564, -832717, 576766, 126968, 986218, 459282, -127378, -335073, -246489, -358758, -110663, -742393, 526312, -442292, 487884, -955476, 54628, 867389, -821817, -375202, 316006, 15595, -784445, -511738, 851225, 423742, 961166, -366724, -105836, -368766, 72689, -816834, -10822, -725227, 277412, 293753, 73694, 498647, 958516, 791367, 136316, -613546, -952445, -749550, -613922, 532682, -69152, 407412, -406493, -230162, -537702, 203592, 818288, 958901, -171319, 170630, 718527, -523359, 509569, -420175, -85154, -17359, 451922, 790699, -859295};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques508(){
        Integer[] array = {371144, 980978, 712622, 35227, 703634, 319718, -732553, -800173, 771712, 996212, -560275, -362083, -837913, -180751, 110513, 756256, 916956, -278547, 506573, -184478, -373310, -104599, -857503, -178539, -237327, -832739, 269937, 53149, -51688, 370220, -483993, -240898, 399724, -98181, -911661, 489135, 912689, 548006, -434992, 704537, -193160, 740335, -341674, -278336, 783595, 606721, -200234, -226733, 770262, -442605, 510194, 789354, -707165, -549421, 499534, -425155, 732854, 246849, 773402, 51522, -335097, 93115, 456626, 600475, -96522, 947002, -632445, -40085, 161432, 434781, -675098, 6064, -66056, -195636, 223792, 339290, -823157, 452065, 125392, 714803, -652395, -500160, -632669, 21949, 544846, -416917, 939317, -74809, -221864, -152102, 799918, -258197, -519127, -342482, 793408, 496661, 274755, -25025, -965032, 182653};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques509(){
        Integer[] array = {-369162, 960037, -344482, 947494, 220653, -798770, 216256, -453354, 472719, 498643, -588500, -120614, 437441, 70043, 521784, -236627, 32685, -509230, -317121, 330684, -679348, 444182, -680216, -579125, 774408, 899716, -671628, 514006, 428950, -925302, 516576, -557076, -755660, 514289, 613507, -666266, -394051, -875854, 640780, 518388, -446009, -310664, 710887, -34671, -227570, -509168, 445723, 477807, -652171, 626182, 386753, 443403, 145526, 483873, 191638, 875665, 500649, -873966, -343214, -740120, -956287, 823692, -826975, -544790, -155127, 616535, 397621, 647992, -167081, 219775, 921193, -923513, -187103, 579857, -896812, -416109, 569773, -518076, 550086, 248109, -697881, 583667, 327607, -128471, 961596, -285884, 203412, -909354, 471387, -943494, -540751, 324047, 628727, 201319, 143641, 747512, -849459, -145438, 10185, 858449};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques510(){
        Integer[] array = {675568, 850067, -487152, -78405, -482500, -906533, -907762, -626443, -524020, 245081, -489502, 882126, -734754, 782967, -863288, 856112, 342358, 775660, 51565, 903241, -41371, -414495, 572340, -550438, -520329, 725498, -435221, -143161, 667385, 719736, -898249, 770069, -756639, 720579, -898650, -212814, -969074, 590151, 672554, -911500, -703072, 30343, 809472, -896100, -277814, -343964, 532826, -900461, -364960, 151384, 887463, -667555, -388596, 597266, -807884, -819245, -55666, 425100, -750070, 668849, 156057, 331941, 899104, -419131, -387721, -891858, -868472, 285382, 761066, 920375, 913685, 534432, 358167, -204073, 339637, 368930, 87242, -665075, -803404, -265838, 389674, 356279, 47799, -428275, -403245, 190169, 259525, 717796, 851193, 186454, 390878, 875260, 737225, 913415, -693974, -88830, 824094, 638069, -392477, 722956};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques511(){
        Integer[] array = {670641, 50963, 856438, -366939, 121377, 679861, -245379, -858319, -565252, -606406, -446911, 313751, 642910, -449013, 133664, 782417, -464875, -370498, 503319, 615402, -181827, -299037, 100743, 613142, 925822, 254031, 191992, 580266, -372502, -649172, 39312, 413156, 340936, -165017, 167490, -329469, 935074, -321224, 413620, -701032, 928315, -482462, -644469, -625830, -817838, 594450, 23945, -644834, 347612, 678746, -187371, -413871, -563148, 861813, 720090, 164716, 695259, -900333, -936643, 919029, 76266, -434879, 298051, 713717, -970169, -475989, -457711, -79909, -465122, -68626, 553191, 810450, -209770, -511490, -763688, 734913, 168870, 902659, -239516, -736920, 174689, -595073, -201007, -901096, 881536, -269167, -355646, 580435, -571477, -698145, -779996, 127458, -290607, -351371, 212202, -314971, -185663, 79014, -275705, 930680};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques512(){
        Integer[] array = {457724, -219737, 949267, -970104, -867068, -108245, -633144, -291999, 905252, -354097, 304924, -848927, -393970, -852219, -707098, 612634, 489998, -99790, -701996, 928451, -899806, 552310, -567702, 531060, 764549, 451629, -859754, 646425, -930765, -295993, 238867, -795202, 67595, -223384, -36227, -850505, 623751, -769438, 65286, 60583, -716568, 328715, -231521, -721210, -930811, -493855, -8359, -342877, 572808, 287249, 116781, 537786, -800602, 177977, 755201, -980923, 435605, -92812, 475697, 378245, 465185, -998096, -272338, 312547, 364843, -796285, 639282, -902408, -731803, -469669, -700287, 246769, -331613, -695127, 274311, -789249, 658592, 578171, 125741, 269623, 21695, -303449, -220554, -368722, -201244, 487522, 157390, -199532, 887341, 662270, 657964, -875512, -583234, 329962, -712843, -171362, -346316, -198461, -111520, 769159};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques513(){
        Integer[] array = {520297, 215560, -218095, -356938, 863244, 498960, 227885, -183663, 489414, 239934, 988315, 313894, -852217, -257234, -176950, -378765, -662267, 930345, -282573, -204202, 212132, -436560, -237039, -518043, -529636, 3242, 545835, -55646, -828999, -58796, -434157, -501314, 674552, -992514, -813826, -370598, -106349, 157984, 605743, -402084, -50972, -481854, 975408, 547488, -765511, 873619, 704423, -92557, 328540, 636978, -536674, 189864, -594528, -377167, 784698, 538559, -137460, 833105, 367843, -454706, 911542, 419708, -198797, 395122, 265203, 696314, -786288, 375926, -786044, -146881, -319280, 466748, -307007, -72338, -427122, -545772, 350448, 177676, 376819, 697643, 439050, -888412, 503317, -158537, 433695, 414417, -799592, -720324, -328052, 854890, 671231, 635638, 501379, -958784, 577664, -769749, 212765, -949153, 183423, -917686};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques514(){
        Integer[] array = {-717676, -155379, -867176, 346061, -268336, 386351, -72241, 765846, -781384, 627411, 69702, -24720, 3727, 944609, -432608, 28297, 62685, 63123, -979788, 812508, -962718, -231245, -685740, -426089, 752766, 266817, -254981, -266551, -992565, -51389, 310203, -908277, 636192, 728078, 667216, -785479, 709134, -471061, -816698, -500651, 536954, -10674, 347193, 587659, 639184, 897437, 3067, -988184, 163793, -443982, -441209, 162576, -80023, -394415, 240342, 521287, 445424, 191338, 862607, -523493, 553122, -691677, -309278, 600292, -824792, 351893, 233576, -639566, 999373, -6029, 669141, 639613, 952861, 182060, 43315, -530234, -395701, -765082, 712043, -223207, 324948, 280917, -671379, -559896, 563265, -175824, 190734, 489218, 202178, 494285, 661829, -484353, -655612, 39512, 944371, -359894, 308699, 978226, 42388, 703469};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques515(){
        Integer[] array = {-4139, 184899, 840702, -280344, 750475, 241011, -209182, 476880, -565026, 496879, -613154, 394771, 776475, 845208, 58398, -195860, -116944, -184693, 776647, -566034, -532879, 637035, -389965, -729879, 429366, 393256, 914732, -292687, -820540, 750842, 392258, 224770, 341173, -599571, -85354, -818339, -531870, -390482, 523521, -742093, -305615, -571277, -891967, 266170, -903783, 624925, 793865, -897643, 352840, 207311, -247767, -622695, -7420, -292019, 392988, -201135, 182407, 922661, 831813, -709371, 483276, -396883, -256020, -851712, 118243, -300098, -322767, 597809, -148100, 734300, 930021, 450843, 21475, 527191, 691302, 546869, -728917, 169723, 367279, 927780, 48610, -191524, -608808, 970065, -200323, 606745, -143079, -186020, 601372, 824636, 141773, 839825, 405039, -717665, -851600, -868889, 819464, 692798, 119567, -560895};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques516(){
        Integer[] array = {-404029, 905887, 11040, 666692, 202847, 608237, -27222, -91843, -117270, -353370, -820622, -219033, -550675, 845035, 585915, -39681, -359757, 852771, -906124, 639779, 555994, 317967, 508710, -597889, -211279, 768322, -424512, 159688, 23722, -940197, -152766, -359346, -906459, -295092, -441367, -56389, 673560, 469612, -809270, -708445, 836236, -808848, 616885, 826825, 496546, -281414, -376760, -931061, -220386, -335065, 577533, -580448, 823843, 24241, 646519, -380676, 719271, 250634, 651703, -210335, 677462, 252637, 881483, 366675, -155222, -253770, -155977, -471119, 644210, 63637, 426276, 275697, -592452, 287021, 710077, 956777, -173400, 840532, -73135, 512919, 847769, -455918, 622282, -98985, -267970, 962398, 656547, 733993, -464565, 792375, 322729, -190737, -368833, 229885, -236950, -320288, 478159, -980108, -831970, -932063};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques517(){
        Integer[] array = {64392, -582362, 463333, -15421, 471558, 99869, -959875, 690273, 248577, 173314, -704936, 922615, -58575, 870256, 609956, -29106, 385967, 136955, 451177, 288599, 859147, 751789, 31265, -679266, -489164, -414769, -30123, 915412, -393988, 104231, 293429, -360148, -438193, 325708, 12484, 673530, -196007, -546478, 777145, -727839, -364703, -419015, -595750, -766702, -429955, 502084, -688396, -166747, 385565, -773555, -369702, 461524, 151292, -218540, 926558, 580082, 172591, 405583, 894131, -975947, 239211, -209490, 368337, -584781, -654287, -596079, 701772, 118315, -604129, -117021, 316241, 903815, 623322, 79843, -338226, -269458, 835473, 711051, 394368, 881343, 148528, -574379, -512231, -530161, -113238, 913739, -314996, -994865, 189361, -643831, -992718, -527251, 608739, 28208, 18937, 445443, 547767, 824566, 826483, 522076};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques518(){
        Integer[] array = {-328924, -846783, -712409, 281507, 767249, -356520, 296700, 283093, -821672, -202313, 25952, -189010, -182467, 370293, -627774, -686064, -847634, -423794, -158370, 89084, -845210, -932031, -70584, -529862, -972969, -516406, 204528, -791949, -76864, -777323, -870281, -329935, 610307, -569835, 531323, 373475, -921469, 293255, -45029, -574887, 755917, -28867, 328360, 615193, -61775, 763137, 739036, 96405, 879756, -16211, -155331, -138076, 816241, 545985, 693662, -393344, -437435, 369365, -53765, 964523, -666397, -422644, 775393, 559010, -669164, -860760, -473858, -313748, -596948, 832326, -907439, -374396, 239466, 457642, -296356, -848984, -33533, -866502, -307526, 127937, -280575, -835405, 140425, 938556, 778043, -692602, -213389, -889386, -180378, 794640, -134446, -70852, -547590, 472941, 983007, 654304, 8325, 766928, -837920, -456046};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques519(){
        Integer[] array = {916605, 574980, -877838, -583183, 720059, 34304, 498306, 434404, 67797, 506477, -917991, 299890, 166502, -196119, 292323, 74571, -687694, 828759, 654696, -597260, -799282, 178487, -570471, -62831, -914975, -36854, 397549, 75546, 328531, -593921, -345654, 413215, -486791, -368523, -290571, 562202, -528976, 161854, -389192, -224181, 718112, 68671, -566676, -215700, -923882, 745635, -394491, -276226, -379202, 914009, -685664, 853208, 390434, -439590, 386108, 765024, 837758, -471183, 568669, -954956, 251618, 368315, 103106, -94550, -555470, 85461, -438009, -476928, 695417, 790727, -11803, -982362, -418209, 874052, 768659, -595917, 596809, 917515, -122304, -243785, 756796, -969933, 987621, -73942, 205129, 716112, -994907, 436230, 902676, 797881, 638001, 610936, -584581, -411149, -550695, -174466, -292651, 250305, 60833, 724461};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques520(){
        Integer[] array = {-589597, -344276, 440668, -938424, 299547, 524865, -855919, 762736, -607333, -241707, 753454, 288332, 791552, -904669, 418153, 649657, -809524, -4312, 469786, 191615, 485627, 141285, -491638, -65165, -439690, -639804, -296751, -382946, -581691, 352312, 116163, 432227, 888612, -422072, -966844, 371181, 301365, 644769, 709609, 418355, -199982, 115986, -373125, 309652, -779502, 655668, 153786, 273307, 272833, -449445, -740636, -982876, 640665, 499451, -328081, -148894, 303198, 615483, 13548, 565218, 201058, -986945, 589644, -611460, 645395, 816106, -63661, 746825, 266358, -210474, -158202, 156606, -979668, -732834, 243684, 331237, 919968, -944762, -973685, 69048, -595587, 800695, 936199, 692562, 892889, -556494, 16151, 308463, -348497, -315509, 116520, 130859, 717319, 692662, 358949, -227573, -245672, -836508, 199146, -804260};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques521(){
        Integer[] array = {69783, -773033, 397366, 699247, 382871, 724492, -398472, -958529, 359719, 320682, -66050, 806697, -110827, 939466, -22093, 65168, 986790, -860426, 995253, 39798, 210035, 290346, 613639, -480844, -561627, -594902, 691560, 400970, -286870, 848876, -727646, 218024, -797209, 334511, -105055, -341923, 167144, -472461, -839073, 234110, 353844, 719761, 413772, -160106, 593199, 586767, 442712, -767917, -761833, 64937, 846895, 812191, -886705, 380695, 990218, 924311, 918269, -418595, 524758, 94938, -454339, -75159, -149196, -774261, 110171, 523730, 955225, -777984, 92803, -510441, 388794, 419549, 503256, 701713, -876476, 644194, -357561, 977283, 142504, -754322, -163839, -126184, -272597, -200174, -35290, 159809, 903794, -888927, 666356, 596914, 159600, 816889, 631091, 550102, 373927, -383634, -637155, 342046, 389474, -751648};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques522(){
        Integer[] array = {-954219, -896162, 349191, -774912, -649959, 847861, -740613, -766899, 353207, -630872, -641202, -797960, -221153, -305273, -17060, 552010, -636570, 415855, -458079, -617909, 623303, -509363, 269575, 969573, 523078, -274348, 48340, -715855, -116624, -903387, -91414, -189538, -102678, 236567, 309399, 227982, -581600, 751280, 974155, 400430, 674315, 310816, -54011, -253289, 72157, 967308, 690271, 49070, 821459, -733994, 119023, -465664, 446231, 765614, -229643, 65626, -778035, 10605, -467763, 606068, 871008, 579826, 48092, -416039, -488150, 373107, 697089, -472944, -667837, 159030, 335280, -872327, -345967, 914685, 128794, -15804, -761563, 834570, -117971, 188133, 867996, 241972, -702445, -678825, -650405, -293695, 291162, 327247, 692674, 806026, 791127, 684357, -597477, 874619, -792370, 402399, -28844, 324850, 41455, 895745};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques523(){
        Integer[] array = {-15048, 270371, 314243, -577315, -680102, 108556, 296415, -444108, -140727, 132567, 757145, 510713, 54815, 386862, -161505, -466347, 865555, 710755, -260649, 326896, -834321, -542561, -561545, -679246, 866518, 690175, 677097, 81666, -469546, -921994, 721147, -681955, 222551, -672860, 221009, 900654, -689169, -493598, 691968, 424620, -576669, -267556, 471967, 717818, -164701, -664630, -207713, 568716, 656071, 327342, 392133, -151493, -235977, 793380, -401850, -305924, 309932, 534239, -463442, -268039, 45475, 556192, 332018, 924053, -845009, 68077, -868120, 158235, -503253, -567038, 84268, 180400, -251853, 264995, -123400, -272516, 341907, 489325, 274267, -67244, 641245, 239184, 876602, 384564, 616012, -310974, -88525, 890633, 662253, -672527, 851785, 546477, -994401, 730223, -916642, 351592, 296621, 84581, -631578, 605716};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques524(){
        Integer[] array = {-250661, 835168, -250753, -508741, -348664, -139075, 440782, 388027, 825008, 724110, -886375, 185277, -331693, -903092, 419074, 186975, 582113, 350217, 545172, -261868, 732868, -76276, 275046, 350471, -988761, 270133, 669837, -988416, -738360, 498617, 566830, -226772, 374843, 918518, -863659, -674079, -568816, -310618, -917468, -42729, -277623, -204848, 84774, 743371, -633170, 524463, 837920, -326282, 602859, -623239, -535963, -763540, -367975, 149298, 25548, 285911, 553249, 849926, 356458, -999054, -548826, -929059, 334269, 414998, 899302, -757210, -456334, -426000, 773585, -646444, 386713, 237850, 336723, 161305, -703074, 512836, -264713, -533683, -729163, -703286, -613678, -827344, 257115, -438872, -507745, -832197, 453631, 659664, -272111, 299840, -319644, -746993, -497347, -97091, 28742, 607554, 922302, -511327, 258359, 963229};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques525(){
        Integer[] array = {259201, 946976, 101021, -799490, 142099, -355409, 126823, -732356, -688998, -137730, 372234, -99863, 934489, -499326, 314089, -713171, -41902, 563386, 135867, -331431, 693025, 194166, 641616, -799754, -229082, 589575, 560322, 174833, 742738, 195278, -632781, 601191, -729074, -378630, -351910, 337466, -248168, -622474, -520936, -556366, 293388, 825117, 21491, -639310, -108757, -687323, -885790, -234475, 796358, 181657, -307662, 291798, -79874, 84576, 596480, 218401, 879645, -248518, 433907, -126060, -819875, -108452, -343538, 389202, 287163, -330956, 632346, -153755, 760817, -890894, -327029, -278563, -775822, -187485, 655943, -330181, -559004, -772676, 132426, -746514, 621270, 141669, -327633, 114297, -163304, -451124, 413961, -893711, -987507, 902114, -485017, 125171, 444795, 430045, -616690, -764152, 870706, -466448, 67797, -137612};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques526(){
        Integer[] array = {-253154, 967104, 119840, -682635, -522895, 265935, 693704, 128595, 522588, 597630, -574022, -596496, -929214, 342644, -4648, -596781, 332224, 697603, -978991, -622205, -689695, 780412, -792713, -202355, -54008, -212580, -51390, -267254, 445151, -794594, -608834, 971238, -716439, -311232, -304020, -489461, -378638, 199638, -90126, 661031, -356067, 388972, 279356, 479882, 670730, -56966, -184099, 399003, 964721, 568575, 305058, -600340, 570350, -163831, -517743, 11897, -846067, -448645, -357940, 778328, -848354, 711816, 386489, 153349, -534031, -94960, -369633, -631447, -98549, -241464, 650086, 634891, -561968, -850931, 523753, -659157, -718657, -971884, -125815, 676813, -869901, -831810, -436901, 476629, 970374, 365728, 282107, 692503, -91484, -630702, -70326, -478700, 890499, -354073, -988896, -956917, 332024, -548826, -896953, -844405};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques527(){
        Integer[] array = {-551955, 863083, -245923, 699918, -479873, 938319, -909913, 984192, 173012, 319075, 287204, 181166, 623336, -303450, 901766, 934822, 942460, 738894, 842680, 267020, -238794, -635643, -578606, -925722, -697659, 169064, 290568, -718754, -231220, -916504, -888815, 463399, 73340, 228510, -735498, -262869, -432533, 674576, 124755, -356191, -221360, -794015, -893664, 90228, 943295, 21686, 172466, 719421, 675608, -844117, 433043, 910918, -920790, 39500, 7656, 534227, -420317, -452613, -243142, -913061, -845077, 360590, -582915, -832463, -298277, -959233, 90463, -953782, 787175, 59070, 876774, 710929, -772678, 732509, -604043, 76444, 474628, 76678, -790934, -934080, 237334, 690621, 722694, -204917, 507128, -976241, -417690, 593317, 925091, 29513, 263710, -687159, 990926, -333247, 178199, 179824, 738120, -228381, -445914, 135394};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques528(){
        Integer[] array = {734219, 204302, 67768, -406087, 47826, 100609, 790895, -698337, 32565, -101416, -245878, -183270, -141325, 288044, 898855, -560637, 966851, -735102, -504161, -536010, 459265, 673309, 302580, -139348, -70396, 459087, -390841, 959273, -255817, -760677, -747297, -87669, -696083, -157380, 166746, 70052, 815158, 497558, -388278, -905323, 31496, 91520, 223093, -352010, 138049, 878966, 981064, 216530, 215728, 469048, 705988, -500601, -432679, 794753, -463868, -552313, -435528, 431948, -466753, -874239, -346667, 524719, -961962, -522156, -414768, -462739, -767861, -873821, -399174, -872631, 148487, -751641, 510863, -762940, 447656, -920082, 269089, -770133, -419161, 197842, 745488, 470245, 682424, 512181, -931802, 943544, 207661, -521251, -642933, -920707, -629317, -297678, 551363, 750488, -672684, 921572, 693530, -963361, 843594, 894782};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques529(){
        Integer[] array = {-887047, 135057, -278128, -839193, 578143, 461860, -546884, -17073, 232615, 376615, 999335, 885469, -159841, -768628, -278477, -445358, -536107, -197021, 112231, 705198, -59354, -789197, 428034, -224190, 250572, -322849, 504379, -826503, 839140, -608302, -903568, -559958, -879503, -407040, -84230, -769988, 617429, -368489, 959532, -245175, 382581, -174249, -716704, -19206, 786808, 257766, 82437, -319326, -854471, 385547, -940595, 492697, -956251, -678305, -137208, 519240, -28546, 276585, -354105, -518821, -731021, -569966, -112747, 708636, -736633, 881121, -731782, -905331, -847941, 116369, -735984, -883732, -813048, 636213, -40518, -539009, 327194, 876402, 991203, 163682, -966842, 355409, 218546, 451968, -614564, 772131, -628864, 394716, -189725, 445858, 622953, 89076, -259221, 243848, 729111, -95201, -66633, -636704, -393318, 521285};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques530(){
        Integer[] array = {-361224, -385585, -831364, 699796, -521804, -662895, -864977, 80669, 444554, 275525, -29087, -294949, -766059, 286722, -670220, -576927, 113069, -41782, -149904, -328589, -264641, -157816, -648344, -928377, 885950, 89634, 623244, 64063, 964174, 669217, 501399, -178665, -569749, -663276, 508609, 51458, 440680, 43116, 522586, -229301, 756231, 260438, -317554, 440780, -922200, -873345, -499461, 407470, 88572, -134247, 615774, 469592, -9113, 186675, 877942, -859558, 710127, 618105, -480282, -901447, -236562, -878295, -909257, 59717, -99663, -652545, 676363, 875833, 768595, 680748, -75165, -935259, 624678, 723504, -228182, -621109, -507131, 961950, -252008, 962822, -359671, -481543, -80441, 163796, 151095, -442791, 531421, -956103, 338911, 147661, 236315, -426888, 603113, 934856, -795322, 475824, 880192, 67247, 312349, 757693};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques531(){
        Integer[] array = {633026, -274899, 229225, -790010, -75110, 812219, 950943, -773384, -359135, -328478, -886616, -677700, -675011, 748988, -111097, 311762, -817737, 909452, -102943, 735624, -844223, 163242, 109940, 996796, 880055, 77400, 744217, 879712, -847313, 645396, -846363, -643383, 778269, 599175, 638686, 238537, -607931, 188223, 671547, 107255, -660486, 410959, 924934, 537324, 887454, -458417, -989080, 411805, 40608, -890782, 89939, 566402, -357629, 347683, 323875, 491152, -862375, -24455, -900531, 712784, 282670, 296388, 347339, -746975, 52136, 372494, -451031, 34387, 620379, 229923, 21194, 191991, 164056, 545753, -783316, 831859, 523133, 711182, -586921, 815667, -298134, 178401, -664842, 845026, 766072, 205316, 353646, 424317, 77887, 489906, -624057, -421895, 128038, -726278, 507478, 761162, -639647, 869291, 26934, 999929};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques532(){
        Integer[] array = {785415, 154571, -941531, 598037, 731350, -508390, -209814, -769500, 331468, -232414, 713417, -84904, 652853, -668452, 131013, 684619, 849037, 190174, -142905, 371485, -985898, 518271, -323633, 52552, 525155, -693439, -296242, -158029, -292185, -565542, -842696, -620556, 933281, -40058, 773629, 370598, -141780, 826490, -185370, 401758, 778200, 389427, 235678, -34636, 262463, 680331, 101715, 669383, 872455, -921846, -247672, 529153, -735884, -109182, -520639, 851320, -687014, 747115, 661901, 629366, 461817, -572368, 95546, -34619, 722558, -559092, 366988, 322324, -138837, -787843, -739962, -672832, -27429, 978381, -813393, -959424, 509761, -131504, 293579, -505287, -407794, -9508, 655624, -797361, 51669, 956401, -81474, -582619, 753734, -653767, 705214, -578890, 784875, 552456, -63092, 940007, -953092, 672144, -439523, 867676};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques533(){
        Integer[] array = {-243677, -618976, -505894, -317100, 553835, -401290, 679074, -176982, -449707, 691850, -645550, 480266, 544197, 545933, -211603, -867704, 621351, -289177, -522733, 365798, -822524, 357613, 907776, 974614, -700960, 922739, 688326, 200564, 270480, 463039, -791425, 19420, 919883, 333760, -997471, -804480, 652660, 321833, 825488, -501215, -125625, -685995, -118082, 229405, -331149, 522723, -928448, -477564, -847229, -972872, -876705, -24680, -266765, 972304, 973362, -230722, 282398, -70282, 741700, 919495, -835598, 775704, -874781, 701571, -742925, 711926, -685542, 498678, -426166, 388907, -707966, 510154, 583898, -565323, 308808, -328455, 813128, 269984, -788298, 238661, -905304, 703380, 567897, -876049, -868717, 286366, -855180, -887747, 31752, -939059, 964384, -660114, 419648, 738575, 139709, -615103, 299834, 941815, -830, 537184};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques534(){
        Integer[] array = {-944716, -433671, -85491, -548879, -453192, -466791, -488655, -994582, 717209, -335844, -143101, -50665, -330703, 339252, -903946, -607184, 138739, 787873, 247376, -415127, -401463, -405848, 35276, -260265, 528477, 421134, -104737, 87032, -260522, -303399, -344553, 825515, -168191, -853965, -682100, 564646, -369854, 277012, 54963, 519369, -455328, 281104, -96149, -737220, 967495, -825891, 47444, 660172, 140352, 443155, -890895, -440863, -71316, -109444, 510398, -922823, 260012, -98030, 650344, -722845, -587379, 319884, 110763, 92222, 873570, 123226, -354193, 341578, 907372, -830380, -753358, 661101, 352254, -434292, -284521, -822025, -136261, 349014, 655986, 41485, 458319, -244002, 774799, -70532, -521426, 254138, 101476, -694440, 529764, -231338, 657414, 686877, 75869, -996065, -146267, -700339, 676886, -196669, -499119, 873989};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques535(){
        Integer[] array = {-93232, -249231, 793915, -630071, -164924, -451346, 962073, 548511, 699505, 736218, -707300, 708559, 191323, 748095, -162097, 638062, -251936, -604733, -242593, 862852, 418880, 633742, 217228, -918883, 343599, 580029, -998670, 887930, 768912, -766027, 233888, -652171, 484288, 129070, 517925, -297600, 765840, -9629, 662104, -229690, -183542, 538653, 418235, 883063, 695558, -769085, -408039, -235083, 933894, 309392, -318434, 646876, 156312, 939286, 79641, 354021, -763688, -378028, 943913, -639523, -985793, -143586, -2114, -208239, -629886, 81541, -495763, -607644, -193407, -941440, 834025, -858229, 931597, 11098, -717672, 779411, 906628, 844486, 557443, 238994, -231447, 624136, 812213, -405666, -69272, -140170, 178400, 413654, -791410, -315141, 221524, -549851, -523248, -421550, 943772, -773106, -656871, 645578, 470982, 398267};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques536(){
        Integer[] array = {876140, -872556, 326216, -564866, 270482, 107739, 729814, 226928, -989972, -13612, -347204, -544435, -937030, -224837, -662571, -742246, -845435, 385517, -15451, 232100, -254398, -408659, 93903, -512366, 797811, 640441, 566965, -689406, 599699, -311279, -596668, 62070, 764732, 938316, 693262, 326731, 565306, -255790, -824413, 813959, 599151, 509043, -259172, 844908, -188358, 686973, 570412, -808345, -2582, -173538, 64795, -306200, 61864, 223375, -94522, 196472, 846820, 446059, -654787, -103721, 802650, 116725, 345753, 77087, 653627, 164190, 184548, 698735, -925900, -852973, 296174, -711458, -376960, 469543, 808685, 262136, -864063, -952830, 908991, -579227, 632723, -979188, -849028, 192490, 849882, -891970, -480390, 834083, 488077, 39330, -596239, 626563, -870509, 66833, 576625, 607644, 412062, 247990, -442529, -137907};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques537(){
        Integer[] array = {433851, -702848, 722313, 152038, 705321, 923187, -374120, -960581, -79562, 924261, 554255, 842992, -70556, 480270, -414448, -856424, -504285, 12840, -377623, 846828, -973108, -228511, 150692, -571853, -873709, -822370, 555008, -87196, 721145, 302, 40428, 483326, 783764, -26517, -43479, -945623, 309546, 109470, 999870, 477806, 225148, -117314, 703461, 965526, -811013, 507310, -637460, -752675, 631215, 823818, -502466, 337840, 650100, 205005, -289160, -719841, -312229, 341935, -300986, 98233, 679005, -549201, -120060, 448120, -946512, -418728, 662348, 83439, -301897, -879668, -791954, -468138, 191939, -288318, 189107, -810295, 89396, -767281, 511166, -498548, -149156, -204372, -913999, -713702, -872883, 552611, -589322, -16944, 367977, 927543, -617269, -453866, 799762, 682780, -928908, 405308, -539861, 975571, -118428, 587631};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques538(){
        Integer[] array = {649037, 913124, -341489, -272265, 43674, 126628, 339763, -393295, -296229, 682845, 331088, -215884, 547061, -263303, -97124, 510026, -418162, 839650, 421727, 969415, 727714, 950738, 289205, 591604, 694476, 289079, 670152, -724617, 271209, 795101, -647142, -171176, 946786, -435568, 107131, -119954, 763402, -712900, -39674, -964811, -946325, 661377, 643558, -440985, -152639, 137363, -674461, -457962, 944078, -206479, -461629, -326170, 17235, -874722, -896542, 335430, 812699, -190420, 198412, -660098, 163329, -434708, 398815, -69446, 479987, 449268, -548600, 511961, -713950, -850791, 698150, -80029, 69551, 201278, 635730, -49785, 382457, -843079, 469511, -673589, -572838, 133625, 784719, 56743, -934828, 240948, 120793, -206572, -616686, 602969, 773817, -295631, -653751, -995032, -446956, -898528, -405272, 747197, -954324, -457680};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques539(){
        Integer[] array = {511443, -37752, -159898, -110940, -121069, -208572, -351008, 997238, -959450, 908494, 889919, 545852, 504058, 974694, -543205, 41654, 887279, 901511, 303049, -464854, -382647, 233423, -835639, 277173, 597300, -52311, 99162, 396271, 386471, 721337, 82262, 791288, -351845, -199070, 818657, -409970, 988251, 666656, 250239, -978073, -393595, 649686, 496369, -429204, 613053, 845827, 52186, 837430, 746454, -208819, -807197, 901740, -76252, 611853, -452449, 365075, 653653, -93670, -725230, 498935, -536122, -760586, 76915, 17873, 659361, 51266, 763312, 82512, 642761, -7777, -887574, -504310, 550959, 646399, 612250, 165265, -24631, -711594, 514345, -984861, 136887, 140508, -696413, 464958, -831119, 797471, 83815, -567714, -716179, -511307, -324094, -360861, -596641, 924837, 179885, -159332, 294458, 73665, 959700, -172320};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques540(){
        Integer[] array = {801007, 770800, 832065, -396306, -100381, -469555, -225056, 84623, -207447, 372579, -466905, 350050, 618964, 769027, -404399, -265344, 220181, 489529, 808555, -82323, -604316, 713180, -182763, 962843, -744168, 777878, 511053, -962871, -914421, -759809, -193761, 835652, -484856, -412495, 111585, -724317, 999575, -657208, 206646, -451222, -211307, -448792, -135835, -148676, 910718, -256489, -21688, 928519, -702547, 29290, 236931, 930809, -270773, -184437, -193292, -738837, -217572, -847851, 108682, 957678, -720773, -427715, -926714, 536924, -956503, -312788, 654871, 277987, -484218, -762553, 392797, -271108, -602309, -247673, -59121, 394557, -664185, -654222, -356093, 469485, 317851, 938055, -712721, -211713, 174568, -421333, -411172, -968139, -143928, -338547, -470031, 273529, -677442, -748690, 882350, -802875, 352352, -792672, 149006, 419876};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques541(){
        Integer[] array = {-351557, 459984, 185348, -484305, 825053, -722482, -772583, 129665, 195604, 313729, -727143, 827790, 276677, 67132, 563983, -968768, 880844, 784098, -909514, -980266, 735575, -98963, -861475, 223190, -270807, 817490, -950368, 358676, -149996, 985485, -695029, -120187, -149253, 87621, -116087, -395686, -401193, -921034, 480430, -323713, 724115, -771370, -650574, 832074, 123089, 602965, -254733, 94953, -862690, 799031, 192620, 434988, -366155, 408120, -4116, 838086, -148558, 281150, 919224, -646560, 662644, -639000, -116889, 227259, -100544, 473688, 544618, 670754, -888913, 592060, -22818, -691309, -672834, -654372, -632095, -358807, -896640, -581847, -702389, -526029, 123157, -157275, -892519, 569919, -526579, 894612, 623759, -849066, -729479, -482916, -647124, 500849, -331232, 212356, 471168, 376881, 677671, 387134, 674025, -829913};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques542(){
        Integer[] array = {-622158, -942918, 499812, -244237, -431568, -514608, -39684, -120821, 457009, -720833, 809612, 646604, 221242, -217329, -284901, 659043, -641341, 966897, -737166, -780444, -954128, -41255, 369571, 122397, -714704, 570057, -995279, -325913, -578637, 830897, 531833, 62200, -533096, 212029, -260935, -600718, -277988, -895972, -552812, 302387, -522588, 746310, -133799, -882164, -383252, -874262, 385952, -393978, -993355, 919998, -566841, 650460, -590388, 212104, 578086, 841651, -838549, 469607, -901419, 555872, -66048, 712252, 856341, 391796, -760428, 677518, 231101, 157674, 822027, -226663, 523692, 764366, 203033, -994122, 773473, -605146, -518122, 692068, 308959, -635588, -513399, 374344, -592018, 830099, -935424, 468764, 36192, -279038, 736580, -983589, -600745, -352907, 75642, -787691, 990490, 984933, 327518, 223357, -412232, -66238};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques543(){
        Integer[] array = {712849, 438202, 660007, -966609, -687297, 907500, -616846, 608955, 299872, -514399, -885046, -373357, 658770, 823778, -859191, 33310, -395553, 301650, -147337, 653452, -88170, -264627, -56504, 755415, 883833, -2595, -903907, 391544, 264888, -607337, 860482, 954031, 920796, -164615, -649472, -561400, -407677, 67672, -573892, -670921, -17194, 109961, 884232, 47433, 365581, -870927, 232182, -748530, -49402, -927933, -32626, -422411, -199847, 633328, 938236, 789269, 809290, -992679, 876396, 84044, 127265, 819091, -435744, 337123, -992729, -161276, 134319, -280166, -341984, -582800, 859534, 103721, -842961, -147793, -567225, 505916, 377469, 143931, -466951, 614153, 859718, -735300, -762483, -319277, 924797, 575825, -954023, 604551, 770450, 245692, 329881, 302274, -381365, -305889, -316872, 282295, 376967, 376807, 126106, -903325};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques544(){
        Integer[] array = {-460004, -806632, -641513, -441498, 178002, -276961, -816317, 616115, -511521, 648923, 242339, 862628, 552818, -256617, -685232, 266414, 145575, -673023, 295645, 249371, -371356, -799232, -757545, 238016, 68091, -359073, 598349, -82274, -926118, 613024, -717074, -376942, 376260, -918875, 949536, -223101, -279005, -964648, 942361, 150576, 940397, -58562, -590643, 350426, -918890, -780339, -593973, 353193, -767930, -219393, 627688, -319775, -164524, -836381, 490270, 196948, 640712, 5595, 734189, -970353, 213009, 368132, 79443, 382662, -770744, 826793, -338480, 411199, -979709, -432169, -713469, 148126, 721701, -719848, -310337, 156093, -803727, 219419, 21496, -402296, -744329, 217793, -501333, -120661, 179609, 294127, -883443, -817359, 154838, 831262, -492521, -496086, -875342, 877359, 424140, 931980, -54605, 673564, 832952, -91772};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques545(){
        Integer[] array = {637887, -882387, 497148, -792523, 279787, -995052, -385517, 685683, -196155, 382051, -523176, -583643, 268758, -601002, 964366, -336307, 278788, 507843, -689399, 183775, -190830, 320207, 319986, 493751, -872242, -220625, -648187, -419529, -895918, 514322, 602177, -61511, -687893, 574137, -751253, 739553, 884166, -742149, 733867, 32714, 894083, 662418, -77607, -280546, 878762, 212682, -857777, -318692, 462082, 82956, 578181, 208664, 935124, 854797, -901863, -770368, 878789, 753339, -394986, -719816, 307382, -30218, -327071, 735760, -42386, 809492, 157046, 148386, -797895, 683536, -169346, -884090, 165066, 739353, -953573, -817436, 951393, -417045, 676201, -214345, 775591, 938284, 869884, 564920, 494563, -120584, 696013, 414787, 771050, 101259, -884415, 166527, 710144, -480082, -526971, 914966, -224057, 782952, 26432, -656205};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques546(){
        Integer[] array = {-781173, -244944, -119592, 595480, 932467, 425582, -271473, -536507, -629409, -483459, 931320, 709897, -951549, -160655, 916887, -441037, -203836, 886861, -756132, -541318, -915901, 677375, 782479, -13282, -525081, -780739, 250686, 977480, -375413, -83932, 240849, 95384, -996541, 688041, -471825, -330304, -989344, -733159, -357998, -388126, -270530, 622515, -415536, 539668, -299944, 80254, 975420, 430007, -361334, 555232, -45169, 707245, 176802, -940940, 349114, 793989, -181836, 689375, -955712, -513388, 418448, 786976, -26778, -641618, -653722, 433082, -922235, -124203, -900711, 278963, -845884, -577824, 876876, 577748, 51711, -953668, 839044, 80362, -906891, -697529, 95441, -561136, 748482, -911002, -412900, -422564, 458057, 362708, -676328, -15008, 399122, 808184, -767577, 771169, -806364, -423608, -775220, -134103, -7469, 94650};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques547(){
        Integer[] array = {185051, -239033, 945403, 720278, -470470, -785976, 586816, 417654, 958951, -796113, -493349, -838697, 238148, 182841, -871797, -415377, 639536, -648656, 290486, -279455, 398540, 841743, -850761, 197782, -75686, 664965, -625165, -246957, 25259, -80085, -845587, -450919, 356404, -762941, 168768, 336972, -793430, -94920, 13030, 551840, 507368, -955914, 584797, -622043, -488766, 302778, 369060, -993327, -823453, -573127, 718727, 739294, 359734, 336324, 974628, 999712, 183203, -779407, 596826, -77226, -671494, -296494, -942679, -59355, 448843, 535833, -993401, 250028, 917591, -715536, 914206, 192741, 508080, 839558, -283117, -194756, -321745, -159876, -228619, -350849, 474092, -733982, 298409, 591758, 370633, 179539, 428962, -310936, -832614, 855758, 132569, -676809, 126810, 506015, 864706, 513746, -393424, 35659, 137019, -339591};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques548(){
        Integer[] array = {647404, -735597, -69422, -550316, -591851, -462323, 300411, -502312, -989325, -216701, -338153, -234767, 303843, 723874, -167749, -29303, -727010, 570268, 259402, 508017, -79679, 646484, -993884, -381386, 61065, -747066, -767274, 886141, -305194, 523401, 339074, 989906, 14779, -648806, 941050, 574099, -84254, -687532, -932039, -84466, 767583, -95677, -740035, 779534, 803694, 440681, 363460, 430560, 423746, 609978, -149157, -362021, -648321, 408875, -824230, -982285, -227129, 319990, -648054, 859686, 317280, 593196, 917708, -316289, -767897, 385749, 384815, -590039, -964355, -774734, 318943, -850709, 767432, 256841, -987412, -749209, -894806, -28733, 116230, -616024, -754787, 260833, -57776, 80030, 140076, -332742, 435028, -73211, 862240, -82611, 889415, -828896, 785740, 317846, 21327, -600057, -150506, -125840, 379619, -250202};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques549(){
        Integer[] array = {878640, 47934, 302984, 395374, -371749, -673472, -997043, -995605, -269582, -904911, -962929, 706695, 78805, 961432, -784991, -517547, -245399, 486020, 241750, 232396, -805432, 58322, 502107, -581874, 794789, -644313, 987452, -528390, -706091, -252994, 599223, 623067, 202512, 407795, 803461, -294864, -612125, -981975, -724930, 698668, -834145, -902965, -775392, 486259, -736828, -315523, 684381, -440122, -811870, 518419, -139810, -364902, -838458, 288803, 150465, -132969, 998839, 132134, 892082, -237626, 850310, 675983, -928327, -41159, 229682, 656713, -602928, -241965, -734232, 647132, 914989, -809388, -118159, -259783, -408324, -468158, -520073, -468138, 610101, -640500, -32472, 864806, 908412, 436094, -825569, -589653, -738548, -987938, 958311, -294509, -774071, -95293, 406750, 672646, -284599, -747170, 571184, 742911, -621217, 76406};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques550(){
        Integer[] array = {-63197, 477418, -939780, 743388, 987784, 49906, -56412, -808838, 316137, 118118, 569207, -539661, -341367, 116148, 594050, 190778, 332208, 700669, -706424, 47195, 417313, -636533, -129712, -293413, -399691, 477885, -960043, -788891, 692126, 453268, 640662, -365610, -691662, -997295, -734975, -784810, -762152, -495560, 145354, 27671, 247488, 350968, -825221, 856117, 924137, -956857, -600252, -49374, -306794, -334566, -264606, 537416, 867211, 136273, 64314, 268802, 145292, 474225, 926662, 528806, -561535, 549037, 715195, -751753, 533618, -510898, 28291, 987587, -287732, -335036, -247584, 96654, 450841, 823966, -945808, 160147, 843816, -970610, 75033, -435723, -737950, -758703, 456005, -734883, 343228, 365233, 381005, 872484, 298383, 486192, 534916, 964656, 108115, -811650, -533631, -85681, 284886, 290098, 84500, 857772};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques551(){
        Integer[] array = {820953, -552222, 983336, -87865, -692477, -230801, 981380, -948741, 465867, 358106, 879074, -676732, -63520, -245075, -861486, -453135, -95033, 148972, 925020, 560031, 763474, 196028, 657644, -22909, -689978, -633817, 486447, 7690, -848975, -577235, -489793, 211617, -101928, -508408, -633246, 423983, 524900, 586371, -203522, 126108, 909067, -576126, -407275, -112213, -402326, -851250, -425621, 656758, -448985, 354169, -967784, -903225, -912794, 632572, -418605, -405896, -372121, 643872, -188084, 633174, 792122, 645828, -502367, -681419, -398720, -231924, -677814, -587563, -911051, 422449, 903052, 488245, -988696, -438389, -645601, -127407, -465678, -56577, 184423, 555401, 116398, -918570, 29488, 425247, -743100, -855638, -682795, 416139, -996536, -162852, 135388, 461491, 957197, 763072, 88666, 884353, 880302, 75967, -493589, 826229};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques552(){
        Integer[] array = {-200224, 794678, 231204, 649657, -708049, -208998, 682773, 300498, 691963, -661157, -900635, -711486, -977852, 33450, 869020, 805018, 688599, -863448, 927937, -484976, -488218, -639610, -962104, -27861, -709404, 649606, -407122, -237139, -826068, 169287, -969086, 761516, -451056, -119903, -725165, -886906, -610715, -6244, 348718, -566983, 906703, 247122, 644090, -665785, 504832, 624256, 207245, -50565, -158665, 481511, 222783, -735847, -592745, 632062, -963489, -511320, -280363, 281513, -639267, 552499, -265682, -808726, -702299, 884913, 636888, -937783, -916421, -818117, -173132, 159932, -782109, 473399, 987861, -916789, 264343, -350125, 211695, -959188, -402071, 200261, 729298, -658973, -270238, 925697, 925285, -956706, -914073, -386015, -364119, 348017, 77069, -528153, -630227, 371267, 58063, -959690, -496490, -216696, 657108, -981698};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques553(){
        Integer[] array = {-582302, -965861, -988303, 382252, -28571, -512468, 308818, 318732, 325105, 12296, 870880, 827968, 987991, -434330, 866501, 616424, 773354, 719076, 997889, 922829, 943172, 839970, -970764, 227417, -102969, 334458, 28997, -971001, -750380, 326338, -953991, -825152, -229058, -700887, 697163, -674718, -715565, 310196, 47411, 978970, -677460, -408949, -794272, -743118, -393937, -482831, -988622, -642640, 754173, -757756, 568644, -591816, 881522, 181790, -894547, 340318, -369922, 668651, -896704, 52055, -660873, -718883, 598232, 683823, -494157, 357850, 126585, -524996, -269323, -233069, 543758, -144785, -300899, 568690, -424077, 367124, 96482, -887942, 546910, -938047, -711262, 604100, 433151, 887475, 493901, 704526, -846415, -454689, 221706, 971056, -655410, -662672, 153927, -743431, 379163, 427724, -555657, 88520, -510289, -817934};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques554(){
        Integer[] array = {-435260, -320839, 641668, -275989, -22149, -524288, 605224, 124986, 731886, -225514, 86340, -567526, 652396, -49957, -224710, 304589, 485543, -251851, 304790, 886728, -132006, -388438, 300417, -119633, -479459, -199674, -841003, -8147, 320314, 634048, -301883, -237010, -75708, 711168, 558478, -645349, 723632, -629194, 687803, 752677, 380569, -164102, 933664, 734469, 390177, 139018, 340317, 960546, -841701, 890838, -633974, 898622, -46382, 578201, 748750, -274851, 374439, -532164, 70632, -890522, -58701, 178326, -797950, 695807, 541631, 371265, 590658, 407736, 738216, -229878, 187039, -246609, -742786, 820349, -492055, -935516, 15334, 669250, -60986, 433910, 61935, -929487, -248108, -478836, 530458, 990985, -706305, 401442, 624429, -589670, -411849, 694346, -74709, 676887, 8867, -829353, -742162, -309663, 446282, -577163};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques555(){
        Integer[] array = {-770399, -933894, 339041, -573945, 799347, 556935, -356259, -5634, 142647, -789430, -587060, 620115, -20593, -494145, -318176, -438648, 19963, 242541, -870731, -430267, -683116, -880647, 703396, 155432, -870277, 153356, -124771, 41095, 233423, 449382, -30637, 248361, -90398, 537513, -227314, 822561, 647739, 286335, 212971, -705193, 788584, -681472, -628132, 250398, 618758, -370588, -794751, -108408, -395730, 124932, -701516, 607960, 477894, 582166, 738956, 879147, -330323, 492078, 242895, 233133, -743985, -321950, 460054, 587606, -103116, -129010, 944791, -767009, -967450, -161611, 708235, -430928, -989593, -258027, -586757, 95329, -643608, -926843, -684799, 262092, 245937, -579669, -487074, 779533, 256920, 544930, -954588, -841134, 379807, 967964, 212671, -249067, 111706, -345358, -941080, 679051, 897299, 463973, 832048, -913897};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques556(){
        Integer[] array = {546067, -768356, -577949, -247996, -321524, -585650, 576134, -441988, -453689, -67830, -288263, -913066, 336299, 462018, -670072, 926996, -607992, -672068, -833703, -136586, -502517, -713789, -928691, -551128, -397696, -540924, 731476, -447716, 843181, 489781, 493685, 891677, -846683, 657060, 469449, -267825, -316837, 532202, 431290, -554071, 285264, 684617, -923456, -796244, -568240, -138626, 839285, -980064, 196677, 714582, -284506, 187325, 502199, 842103, -244568, -438766, -509437, -207253, 314562, 126374, -611815, -339539, -288201, 450669, 623201, 939959, -682701, 728579, -25958, -250393, -463427, 756643, -468703, -745734, 578372, 970181, 52513, 250741, -369786, 127650, -630200, 616731, 11598, 759032, -627853, -831964, -807607, -349561, 670806, 85800, -665366, 657372, -383220, -839600, 294251, -752751, 571187, -969887, 20305, 786453};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques557(){
        Integer[] array = {-291718, -973937, 874993, -979903, 230857, -156330, 61953, 209272, 946452, 779039, -831365, -107007, -433626, -873487, 77124, -256474, -979102, -774720, 780468, -248234, 707826, 344141, -822814, 372064, -425288, 36704, 855685, -347586, 405448, -459342, 536876, -525363, -772389, 980716, 813742, 576072, 21469, 237950, -263760, 217209, -570808, 418445, 708359, -807379, -139151, 497575, 571676, -474806, -238461, -69486, 934259, 537077, 751585, -659803, 614590, 476287, -203249, 333735, -491658, -856949, 375304, -778030, 110380, 874106, -633600, 748006, 361684, -230345, -684538, 195670, -652879, -371869, 483861, -455992, 872602, 444693, 867695, -430037, 21110, -613789, 202684, -956052, -656014, 709122, 256308, 966758, 847396, 748659, -349928, 460690, -570605, -678010, 29527, 775866, 670717, 549547, -757123, -198676, 415537, -814882};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques558(){
        Integer[] array = {-434886, 117667, 635233, -340964, -804714, -143750, 277351, 146536, 993800, 271017, -850594, -997159, 37631, -316998, 451898, 370912, -63083, 9757, 534687, 229449, 994269, 159148, -221598, 844421, 55221, 195113, -582509, 121804, 471623, 794360, 858504, 363548, 960497, -426403, -246185, -244801, 385284, 150361, -230713, -720700, -301813, -374155, -949894, 579346, 670434, 861519, 53833, -484635, 760723, 487088, -688896, -417448, -447631, -909996, -279558, 742090, 625441, 759798, -47045, -525870, 486922, -879732, 263986, -142671, -166911, 148935, 684352, -809396, -339515, 73647, -441728, -610657, -733136, 785077, 50858, -680363, -996425, 47736, 86968, -694546, 359579, 472833, 594343, -190496, 487390, -935159, 181527, -748856, 965211, 726748, -406075, 696907, 560215, -151455, -521139, -518774, 954252, -989513, -343421, 900262};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques559(){
        Integer[] array = {-516480, 665886, 918673, -616087, -212806, 269612, 852750, -229198, -678321, -164757, 963603, 459657, -921256, -640168, -815830, -707358, -440233, 512018, 524424, -275865, -157115, -590023, 645444, 59082, 726942, -992559, 211464, -765440, -300952, 130103, 301788, -522197, -712493, 957072, -72437, 420189, 950682, -648490, 104887, -831108, -298906, -583256, 636626, -835646, -859815, 594618, -306254, -30800, 180626, -931602, 319809, -225345, 164157, 267409, 587795, 107717, -998931, 297255, -853188, 216454, -909853, -356762, 474177, -885443, 75349, -751364, 251349, -159498, 112440, -710340, -370436, 379361, -617687, -241626, -946450, 483144, 208505, 875966, 324344, -693868, 344087, 979939, -715623, 754911, -265070, -259758, 95078, -727750, -514499, -649606, -565397, 24253, -875220, 304182, 954268, 426913, -965419, 928990, 835078, -341320};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques560(){
        Integer[] array = {810629, -307289, 992741, -929593, -980734, 146731, -585220, 834407, -140015, 847766, 472256, -351659, 332826, -878424, 888496, 514948, -428179, -233130, 369715, 71852, 788, -771067, 767630, 711914, 636063, -775810, 896610, -985615, -480849, 788267, -681354, -465864, -674766, -769654, 77364, -177017, 512026, 696635, -422656, -936297, 562804, 639664, -348218, -664765, -777835, 602205, 493255, -56127, -193484, -709786, -872719, 274769, -598579, -149184, 487686, 805653, 869007, -478336, -233691, -556071, -491942, 632828, 521862, -259278, 841787, -647663, 361339, -158067, -434485, -627378, -580776, 182109, -356381, 479558, 972048, 88648, 80088, 165981, -815863, -616887, 136357, -480421, -711131, 480828, -978896, 328385, -489776, 767135, -907026, -755193, 477978, 235167, 128026, 889788, -860267, 738188, 959750, -407301, 205895, -64988};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques561(){
        Integer[] array = {-137922, -170877, -212820, 861680, 530993, -573692, 489148, -749940, 239738, -211046, -130513, -146952, 862909, -568028, 728182, 399112, 257216, -865495, 772954, -903757, 684059, 840496, 224501, 954409, 625537, -228563, -334939, -576645, 980651, 448652, -304538, -822062, -750218, -1533, 606823, -494246, 482452, 307211, 763665, 241276, 759126, -923354, 759937, 856762, 450605, 999223, 447792, 972901, -142410, -770513, 264488, -244272, -498491, 486191, -986369, 402997, -550060, 275715, 895919, -17878, -791595, -746853, -585777, -474211, 457894, 672469, 624348, 725107, -391480, -341161, 786333, -57633, -185140, 649205, -113950, 519415, 228098, -316534, 389947, -310970, -371729, 192974, -559365, 579584, 738454, -374225, -692231, -302548, 139252, -467522, 338266, 451900, -544057, -19744, 112464, -960564, -743367, 913701, -717694, -219460};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques562(){
        Integer[] array = {-854347, 166108, -673602, 62646, -448493, -334522, -83689, -896349, 328324, -427914, 83875, 825158, -287860, 315207, 431451, 127136, 449018, -990461, 265143, -766289, -769653, -927035, 386070, 514305, 812120, -932969, -627761, 352149, -813929, -103398, -171881, -140880, -118978, 111228, -583865, -441250, -773937, 532454, -603932, 372285, 109003, -245786, -64956, -717017, -600698, -360703, -289607, -700139, -875278, 395275, -486393, -357784, -871002, -921870, -337770, 825186, 408558, -396790, 492543, -513681, -885902, -26118, -785232, 577951, -484135, -35246, 386262, 167226, 730824, 877349, -150486, -386129, 250426, 64058, 405538, 145893, -520829, 130055, -739467, 4573, 588988, -745868, -313716, -377097, 297121, 908019, -126917, 422925, -355320, 899387, -901111, -927859, 533107, 496080, -590977, -443487, 203718, 301311, -194646, -13721};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques563(){
        Integer[] array = {34522, 742637, 169821, 504239, 660233, -458483, -28483, -121724, 929596, 243372, -465078, -333482, -461412, 207605, -446917, 775254, -49045, 953210, -317616, -556168, 733757, -236278, -445548, -986783, -244451, 78890, -704447, 889054, -262566, 889737, -46375, 92909, -12004, -907793, 537887, -722709, 906518, 703928, -74944, 292303, 859555, 800731, -450987, -526025, 509552, 337160, 111028, 153385, -851697, 26568, -340176, 532719, -971757, -789733, -923520, -299190, 189514, 557120, 179643, 347992, 199637, -255987, -203102, -9607, 491087, -703585, 59034, 365583, -885932, 199212, -925445, 346410, 918408, -239894, 672026, 637228, 75307, -856641, 336070, -981787, 478653, -386559, -312471, -68173, 207370, -638197, 516111, -309123, -906767, -247421, -91383, -581480, 217550, -28484, -108979, 242700, 458977, -300921, -714256, -800946};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques564(){
        Integer[] array = {581847, 545229, 533147, 910872, 547410, -817173, 534931, -241719, 742903, 267698, -428652, -224875, 776810, -550444, -623096, 222198, -401203, 751788, 870644, 197502, 75542, 953636, -561206, -547652, 632058, -654405, 739924, 848626, 195548, 709058, -289225, -338320, 467100, -799425, 38919, -142128, 155338, -788463, 916912, -222219, 454876, 698073, -961131, 29174, 271295, -760919, 871716, -912813, -24413, 374495, 578829, 903766, -432159, 868705, 314807, -318625, -739403, -577146, -546575, -927920, 25832, 555165, 466302, 87939, -965908, 793829, -644294, -575103, 130675, 746427, 609918, -894147, -342161, -775986, 626715, 487770, -786759, 966968, -491906, 886435, -626813, -301501, -189921, 80984, 655695, -503347, 72191, -651446, -22933, 35739, 172517, -76362, 6751, 553820, 922408, 272022, -826784, -784365, 688429, 937496};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques565(){
        Integer[] array = {467678, -593096, -71037, -839617, -570507, -257098, 470482, 75951, 825636, -673869, 806996, 664226, -599945, -815314, -852557, -722046, -297745, -853522, 579502, 790020, 123359, 679998, 192205, 638219, -248483, 823207, 649811, 707406, 90523, 851339, 776963, -4451, -798869, -247191, 22770, -275614, -297421, -309325, -176502, 340724, 352861, 800185, -612521, 885034, 454608, 658584, -227355, 293932, -735693, -149731, -320267, -674893, 950007, 268409, -91578, 197920, 423732, 395422, 107400, 843630, 152822, 514282, -751969, -440801, 649794, -429522, 31752, -242866, 705663, -314781, -791123, 378, 718820, 343332, -3216, 800383, 528110, -979917, 547267, 778934, -898407, 541024, 820388, 336279, 500481, 515064, 457485, -398348, -176413, -425247, 296308, 173351, 164693, -817873, 6810, 709979, 819893, -695768, -209167, 14121};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques566(){
        Integer[] array = {-952080, 448147, 108467, -703384, -479601, -716496, 537081, -564510, -194854, 875434, -282026, 185924, -421873, 154009, 506636, -754698, -954934, -947025, 809930, 578687, -377503, 680822, 270976, -221438, -846524, -394214, -303621, 443386, -362403, -537926, -476910, 81133, -100101, 669955, 646885, 12267, 749607, -955181, -752104, -225028, -476824, 571766, 112892, 437056, -348000, -790241, -350855, 204399, 6834, -4101, -280003, -318248, 954406, -265157, 377584, -759512, 818642, -215951, -343541, 723452, 785657, 721540, 313466, -565743, 502234, 830928, 999387, -107678, -486729, -415349, 112972, 635429, 702650, -547122, 864507, 12036, 226728, 866171, 233189, -364626, 276012, -443833, -122538, 247441, 518590, 780101, 989938, -189896, 376537, 392478, -279927, 118959, 660836, 746282, 771680, -756331, -932005, 324564, 909360, 530};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques567(){
        Integer[] array = {-65254, -523642, -821538, -231732, -842509, -701063, 965603, -731410, -610488, 391931, -523951, 51814, -602696, -617977, -183625, 21783, 392457, -785112, -941066, 94837, -374678, -905453, -936821, 582003, 423342, -574224, -406727, 768754, -410527, 339838, 770086, 320530, -382026, 124732, 839941, -271677, 504549, -635050, 244707, -630392, -123263, -938697, 463970, 265514, -505973, -153712, -962898, -143779, -729264, -646173, -365268, -206480, -596817, 439884, 793152, -527155, 130352, 272344, 467715, -752917, -231517, -855730, 332610, -244491, -553726, -872165, -790993, -952490, 430953, -756723, -209035, 532645, -460562, -899080, 465053, -241893, 305070, -327421, -249033, 773654, 940873, -832758, -560994, 28587, 444994, 658050, 645131, -424026, 923294, 128761, -521050, -672764, -148609, 519939, 675179, -681632, 342371, -755739, 874731, 121385};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques568(){
        Integer[] array = {454546, -66618, -783840, -226142, -229632, 894873, 551374, 280542, 717114, -136332, 220756, 678432, -54630, -633323, 73640, 141294, -574358, 963689, 954257, 813876, -15461, -558088, -85180, 688767, -327822, 692424, 462082, -629074, -585739, -225928, 428996, 805257, -81020, -676913, -942097, -272798, -621774, -641695, -689193, -704139, 809232, 942909, -289609, -270523, 89116, -41442, 500161, 218555, 344781, -757399, 182706, 54685, 234988, -806828, 767322, -621584, 996057, 138089, 320914, -744093, -431868, -589116, -625625, -596742, 417581, -960542, 676948, -859961, -72876, 111906, 221330, 113688, -521666, 939127, 387037, 56361, 551389, 389786, 879551, -13677, 844447, -532205, -802549, -722894, -373768, -27397, 832793, -990695, 866949, 428258, 881386, -322039, 444767, 784368, 841001, -699365, 530072, 109327, -644583, -21707};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques569(){
        Integer[] array = {729635, 903739, -600089, -646385, 923941, -266366, -304532, 242179, 561470, -391985, 79978, 527353, -417432, -84373, 410394, 279159, 267711, -473922, 633387, -819866, 108692, -305621, 695035, -760425, 602995, 980247, 407736, 651599, 898791, -397683, 480099, 666109, 948673, 118009, -235466, -537148, 626697, 146871, -587107, -413478, -86575, 356086, -174016, 61277, -568772, 559951, 679667, -452438, -630827, 355718, -878309, 426671, -231596, -953812, -150969, 90900, 165603, 140122, -171745, -455829, -17612, -284991, 16366, -8739, -827919, -580708, -503447, 541424, 339218, 760573, 142212, -487351, 577314, 887996, -162008, 708983, 285258, 776859, 694818, -165182, 628370, -558213, -518918, -585995, 717909, 611206, -167955, 732895, -239668, 904478, -280748, -576133, 128045, 896757, -382610, 299221, -93167, -270957, -109543, -637918};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques570(){
        Integer[] array = {-328185, 536987, -153651, -804004, 135213, -367604, -859489, 129808, -466617, -616796, 759675, -422861, 216896, 277093, -736243, -460196, -252389, -683455, -778321, 553027, 466084, -906491, -413673, 647663, -166899, -943257, -478393, -670453, 650143, 854190, -591515, -467152, -972039, 325687, 135489, 331135, 972423, 863533, -729033, 368677, -571957, -969229, -120303, 760590, 674853, 689066, 641237, -650764, -159302, 881233, -414154, 763611, 963038, 88123, 430148, 894473, -634782, -369533, -258296, -822270, 929896, 330953, 814351, -165275, 33751, 118636, -986844, 578695, 262521, -610295, -181302, 104496, 846072, 195199, 98362, 390729, 284202, 388172, -752317, -268279, -125786, 869334, -251679, -881942, -853124, 538194, -73774, 671977, 799947, -588588, 893220, -886838, 384216, 707210, 108771, -967329, 421263, -531371, 362603, -473487};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques571(){
        Integer[] array = {542574, -574965, 807644, -921068, -932186, -472252, 41046, 502623, -452607, 7750, -613176, -301211, -826185, -557854, -755097, 667992, -970741, 232903, -461413, -56065, -257200, -769055, -839398, 114235, 129251, -44578, 919606, 208281, -862808, -41796, 693292, -698466, 980371, -469833, 246273, 230685, 220440, 37631, 399694, 880241, 177973, 367777, -499625, 164314, -175287, 184746, 896634, -787308, 254779, -24993, 792375, -279658, 285746, -837729, 237784, -557152, -762828, 266293, -751201, 616563, -253157, -327055, -963157, -938030, -666560, 755483, -500441, 71441, -604370, 869469, 734036, -65536, -158177, 460043, -937793, -723128, 388844, 582638, -997410, 973522, 989136, 35433, 689566, 687400, 920768, -487746, -237972, 440585, -679761, 244378, 989696, 238012, 142491, 69881, -600880, -434990, 775524, -993794, 314877, 36412};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques572(){
        Integer[] array = {-408767, 387902, -869275, 675115, -378880, -867234, 53288, -282364, 973852, -608373, -413367, 520665, 630564, -874835, -218932, -213459, 490065, -797831, -320111, 407142, -730166, -180476, 764224, 92969, 605207, -996417, 949709, 772765, 234506, 710043, -616761, 301575, 742367, 591064, 20414, -345855, -814212, 132822, 556482, 787105, -357459, -740637, 274819, -447923, -100978, 570440, -802319, 573506, -357503, -10329, 101416, 402306, 786117, 857764, 223896, 618097, 698502, 59792, -75197, 325602, -487359, -648347, -344698, -443814, 239390, 132464, 594821, 516250, 556130, -954379, 831715, -811391, 461872, -63215, 831521, -496918, -286394, -429994, -196852, -657263, -91609, 259494, -856728, 653340, -782805, 966924, 318539, 428151, 79232, -733595, -937596, -203749, -668620, -122168, -654435, -624243, 13666, 103801, 486826, -385819};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques573(){
        Integer[] array = {794309, 298234, -132111, -960011, -297690, 586746, -212789, 800080, -309778, 100392, -384892, 897596, 982067, 270625, 366066, 485630, -465533, -510567, -755595, 602000, -480820, 842832, 254229, 507699, 896181, 241259, -795380, -713412, -811564, -568054, 909832, -274548, -488109, 647930, 906700, -916159, 37918, 643493, -527984, 578798, -804959, 611466, 290495, -727439, 627350, 588105, 377883, 70830, 174485, 978538, 73936, -643915, -278140, -860693, -863164, -117811, -142720, 269314, 257430, -464555, 963414, -42672, 96897, -82338, 248326, -99568, -901596, -7645, 63144, 237531, -406915, -283252, -928539, 886810, -958319, -670882, 657319, -954907, 274782, -75946, -512031, -37729, 863859, -355172, -484065, 802002, 768219, 289627, -127841, -392597, 640567, -995878, 851864, -182479, -395048, -98743, 4022, -811008, -995893, 393173};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques574(){
        Integer[] array = {-468963, -309180, 995724, 596986, -157422, 99659, -426513, 340987, 586270, -138288, -713321, 369033, 378303, -458336, 192237, -957930, -515391, -507981, 612594, -954315, -816349, 667539, 422201, 422363, 519080, -83981, -429646, -728737, 411272, 45465, 216455, -352815, 655955, -447818, -275543, 72836, -8084, 386611, 78976, -517612, -871579, 492765, 317981, 538244, -263292, 180423, 774421, -112914, -993082, -944968, 373191, 424028, -893025, -120806, -57910, 890813, -206722, 983516, -462953, -886505, 176948, -222765, 339914, -214109, -261261, 266676, 134274, 937523, -676858, 168498, 812711, -739701, 982579, -395879, -837688, 52953, 399187, 554221, 688904, 48499, 252212, -225290, 18130, -471265, 413040, 408074, 727490, -349696, 442518, 828583, 822281, -643725, -977655, 144377, 540765, -955198, 501051, 124701, 610824, 779854};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques575(){
        Integer[] array = {-112688, 347642, 371003, 421613, 417422, 711686, -562685, -953704, -565427, 317366, -885514, 485675, 613569, 354373, 441969, -135869, 179419, 389241, 647638, -636129, 393363, 361284, 819649, -319089, -702508, -322099, 229979, 110151, -372066, 227790, -211267, -844510, -28268, -580121, 485754, -331030, -541566, 531008, -369854, -511912, -938188, 423464, 559093, -993917, 880716, 286571, -156082, -672630, -598452, 563584, -457020, 282938, -198045, 894221, -589274, 329223, 233911, -921339, 484382, 391454, -473881, 163779, 295667, 178625, -145030, 355529, -856862, 383624, -734101, 288531, -490042, -139640, 216841, -278539, 630930, 790003, 575727, 610619, 832171, -760146, 402964, -195360, -105092, 433527, 946482, 319923, 542196, 40653, -657028, -310671, 158262, -701665, -201491, 187827, 521186, -344763, 432895, -947221, -108229, 453170};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques576(){
        Integer[] array = {3313, 356749, 804295, -495675, -220208, 944419, 59547, 102918, -903845, 747896, 369202, 701974, -381846, -213396, 234991, -785218, 574669, 579671, -180309, -726188, 647381, 176933, -199810, 259899, -799026, -147059, 161629, -671247, -177647, -786417, 866001, 940767, -65829, -661313, -856422, -226808, -278842, -235182, 816241, -238013, 177892, 92614, 933628, 634584, 804849, -108894, 695377, 145446, -106745, -568774, 785909, 59092, -741517, -234982, 48886, 667617, -924052, 614286, -483373, 345932, 93711, 483030, -490681, 242180, 632296, -853284, -3927, -901485, 63025, -318612, -59676, 361128, 579820, -221720, -853821, 767695, 273295, -818976, 755732, -869746, 540901, 125072, -716724, -793673, -953542, 186643, -893285, 52401, 811641, -631832, 362965, 266612, 3512, 601384, -403332, -941202, -362890, 474811, -189212, 741907};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques577(){
        Integer[] array = {-135248, 472242, -342986, 906284, 323940, 308857, -625823, 179688, -839395, -41329, 883565, 97160, 943381, 983841, -541256, -609448, 504749, -807225, -553357, 78087, 334709, -86136, 355002, 539094, -601110, 781874, 623489, 809061, -323077, -947274, 497331, 443971, -413573, -511579, -885309, 316180, 263998, 25848, 783546, -767102, 374833, 245233, -383410, -23657, -36153, 985732, 691645, 838943, 856103, 955045, 188280, 854590, 309721, -16452, 913875, -48972, 498206, 540317, 987630, -580026, 638556, 300256, 577010, -338783, 367336, -383835, -108800, 964339, -765387, 545665, -256512, -12491, 273909, 71065, -956284, -955864, 661747, -399620, -207542, 220154, 75627, 173810, 908350, 259946, -843942, -360803, -737824, 235098, -201690, 840395, -192312, 432963, -97043, 938122, 958645, -968822, -701788, -809023, 714993, -836969};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques578(){
        Integer[] array = {200715, -215883, 93283, -442258, 988269, -752537, 542572, 443740, -55305, -432711, -426488, -460421, 615190, -193363, 866567, -670078, -846613, -109078, -220557, 831322, 865621, -967481, 82243, -344561, -556486, -969428, -775619, 695555, -764167, 89840, 139912, 376806, 930969, -871760, -507106, 975762, -890535, 740206, 901549, -953841, -56039, 269986, 682114, -777642, 448311, 532505, 552280, 543693, 923351, 542442, -308441, 957825, -781171, 906342, 927751, 890225, -499569, 722031, -964265, 217301, -70771, -468874, -929548, -850870, -761192, -358694, -446390, -720976, -423563, -617502, 620410, -303898, 988691, 717412, -446770, -274072, -414660, 530129, 832302, -968930, -591623, -903521, -789026, 644592, -78214, 360878, 66103, 944121, 913891, 67274, 680962, 139573, 933900, 119576, 194994, -387873, 191007, -187732, 577148, 124963};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques579(){
        Integer[] array = {441437, 105249, 729923, -477547, -681028, 688933, -951464, -323606, 687536, -988089, 313250, 89652, 880844, 301990, 221866, 181789, -133167, 693043, -390916, -198247, 876027, 198925, 648353, -837083, 766325, -575816, -307975, 856583, 869249, 534761, 364051, 436199, 28105, 242589, 464625, -364334, -882079, 715730, 357876, -754976, 312969, 732511, 208750, 617340, 929778, -651820, 853975, -765954, 259781, -216032, 326000, -952709, -545872, -479337, -8350, -861449, 533781, 153669, 604025, 811042, -416309, -784841, -481146, -756084, -906198, 31121, -150353, 169066, -678162, -910269, 991294, 684109, 250451, 414988, -12710, 873596, -264103, 481930, -194962, 709177, 101269, 362441, 52106, 983360, -63963, 735411, 361361, 473266, -154976, 636149, -26826, -795652, 317493, 256765, -861782, -103735, -130578, -738378, 491167, 386743};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques580(){
        Integer[] array = {198269, -428572, -82334, 213788, 124825, 651125, -88769, -318488, 186369, 163552, -167124, -678156, -153107, 888770, 228352, -168461, 969928, 862034, -964557, 916987, -915943, 790300, -920499, 590254, -363887, 135358, 390166, 420424, -931328, -998451, -177728, -756362, 535137, 671916, 980275, 713019, -923946, -254683, -931564, 543020, 373492, -948026, -97085, -193064, 883498, -204751, -541023, 517611, 377632, 844835, 856484, -990002, -122918, 841708, 30920, -545612, 613062, 8267, -484246, -712693, 882735, 588482, -836379, -783647, -227751, 458656, -189290, 985109, -701380, 564294, 241456, -438854, 491466, 473427, 655061, -892751, -855809, 580056, -994418, 816333, -807984, 722708, 967777, 811957, -571266, -523988, -152466, 372785, -404233, -237783, 564510, 258133, 872497, 515793, 72606, 686781, -885348, -887310, 809931, -790629};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques581(){
        Integer[] array = {-412902, 783501, 58117, 389991, -727038, 811952, 440421, -986881, -493866, -626809, 596549, 541273, 466826, -862345, 258834, 484478, 96220, -21870, -727933, 90085, 224510, 163798, -474177, -869476, 327101, 724951, -444245, -298486, -298552, 77224, 733128, -673731, 579767, 309985, -928580, -269223, -661294, -212164, -894579, 229829, -403336, 884516, 736496, 492417, -985418, -972476, 978796, -947043, -783040, -241130, 1153, 277195, 192154, 380848, -550628, 612596, 251129, 172105, 805498, -436712, -378611, 799159, -544445, 883857, -908795, 568064, 378032, -421787, -125984, -282231, -389857, -912934, -739537, 841876, 54853, 858411, -523941, -734248, 329883, -351605, -183794, 363261, 554354, 164459, -65030, -43600, -663027, -557310, 788891, -851128, -860891, -485978, 912059, -422102, 778577, 826110, -303418, -309061, -726031, 736015};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques582(){
        Integer[] array = {-336954, 325319, -915500, -832624, -804326, -395102, -250179, 161156, 709834, 537298, -429284, -638588, 987035, -988869, 145434, 47899, -65530, 578965, 95853, 264193, -952256, -449249, 665848, -371243, 43119, 13609, -210161, -812036, 728512, 615517, 32067, 147875, -722822, 661027, 410248, -449122, 846951, 6552, 236725, -746866, 212404, 99532, 662533, -469543, 250485, -232259, 400482, -819001, -718811, -909401, -77539, -501361, -994331, 761354, 208433, 980980, 189710, -8307, -94487, 328786, 742266, 113601, 510559, 183557, -600630, -87218, 798873, -704004, 985050, -152306, -456892, 266926, -558630, -13690, -6084, 529383, 921617, -867794, -484250, -399185, 538596, -734384, 100321, 403439, 739313, -224073, 33092, -715843, -381364, 600683, -11346, -53604, 958347, -774045, 208073, -579234, -428374, -990662, 974188, 407458};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques583(){
        Integer[] array = {831110, -435861, 169627, 215818, -512294, 9664, 747979, 721713, -82253, 535519, -81422, -883930, 281900, 900925, -344650, 97001, -513521, -902040, 566769, -737236, -303592, 815391, -594933, 511747, 763081, 333730, -792385, -863525, 992791, 837038, 50640, 399881, 359095, -297051, 905980, -728512, 643790, 619383, 356456, 921648, -551462, 756431, -255493, -872150, 545810, 987281, -727193, -912298, -498064, -821069, 851273, 647777, -629115, 86811, -874657, -513755, -142591, -830107, 442598, -314274, 986260, 685257, 729508, 222264, 790006, 51447, -251044, -572470, 7308, -321962, -709101, 459142, -371556, 836554, 258767, 184522, -88678, -464355, 580944, 751409, -774716, 387052, 386029, -646186, 986560, 273839, 89742, -515848, -740081, 999980, 367213, -401524, 987434, 615392, -426494, -542628, 178113, 883098, -395739, -70489};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques584(){
        Integer[] array = {-533329, -26820, 377125, 250668, 62820, -365133, -305380, -393053, 946035, -821573, 405525, 481637, 358424, -40820, 733988, -438864, -575240, 423483, -702106, 68865, 382913, 931412, 769702, -682847, -547591, 530862, -893569, -590104, 422710, 273294, 200593, 769325, -948597, 977197, -477678, -248025, 524828, -869013, 765868, -753529, -329273, -534747, -563660, -839029, 654132, 95254, -859597, -569687, 785209, 189752, 264933, 365067, -365694, -268751, 266542, 357222, 440432, 283962, -940563, -92998, -480707, -918581, -849603, -727695, 752268, -403106, 454242, 855668, -67714, 841817, 385905, -477829, -521208, -535788, 582943, -602019, -941764, -521847, -8419, 511954, 316298, 540708, 894022, 215000, -173353, 39141, -325859, 936938, -269888, -988276, -524861, 786589, -640019, 394770, -743177, -567508, -26161, 913557, 854514, -126443};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques585(){
        Integer[] array = {-925388, -165049, 72437, -605656, 845662, 8665, 625554, 58680, 548330, -120732, 847900, 822732, -691962, 929373, -22706, -75398, 93711, 536589, -581135, -575452, 913837, -692617, -298467, 445270, -723525, -819471, -683321, -645559, -814054, -390566, 336413, 921749, 912721, -397868, 828735, 41642, 216663, 267123, 807839, 327129, -249951, -14019, 188150, 917214, -630636, -505693, -197606, 759713, 397631, -295216, -410511, 30167, 154593, 932946, -292460, -917492, 703481, -427490, -540528, -356276, 851901, 134409, -620157, -500754, 765196, -74432, 869398, -623292, 641124, -818519, -812939, -489286, 846288, 676727, -620934, -463704, -493727, -822925, -36349, -435375, -735908, 96484, 424115, 354787, -369805, -388121, 217859, 246032, 85806, 610738, 401162, -7310, -423934, -143179, 457801, -948113, 524878, -233866, 161156, -646650};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques586(){
        Integer[] array = {790888, 506283, -760484, 494520, 739433, -976154, 956049, -272277, 538824, 232328, 623154, -630880, 500415, -870029, 535546, 975172, 336074, -502288, 381300, -451119, 407769, 716542, -957911, -601830, -546956, -577517, -811079, -426229, 842187, -891889, 592995, 173262, -669236, -67174, -825018, 87660, -541009, -703181, 724055, -560207, -956992, 457873, -649430, 367944, -560178, -150524, 358571, -789305, -74774, 958565, 130540, 23319, -339219, 941013, -119298, 158677, -184955, -596665, 338779, 188224, 871891, 989912, -735238, -563759, 944624, 599429, 167378, -742943, 165602, -987347, 510876, 219786, -903633, -776430, -65560, -592452, -569513, 842922, -993495, -257567, 958454, 106691, 660208, 541207, -346910, -746380, 774656, 674923, -205848, -944045, 425284, -255688, -476888, -402401, -916641, -494375, -249973, -12426, 759898, -432575};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques587(){
        Integer[] array = {-496995, -128950, -525656, 691403, 495686, -54337, 292227, -550493, 748738, 823273, 630098, 167709, -261761, 442804, 153593, -3582, -291897, -171539, 996870, -734421, -835549, 634173, 865448, -210727, 604714, 124839, 261469, -534545, -871809, -562343, 847820, -486174, -858730, -404982, -660567, 469386, 354441, -672980, 833858, -328708, -61913, -646611, -444541, 543430, -898005, -822777, -131803, 655206, -741468, -386620, -559574, 765768, 470114, -922432, -699137, 404475, -391246, -639347, 644311, 10063, -954583, 110533, 227626, 719168, 527733, 930745, 943100, 453884, -859224, -836331, -739046, 825468, 762214, 861772, -405096, 764479, 277769, 539537, 496287, 362573, -964782, -298411, -261631, -916506, -364980, -588819, 678720, -350761, -990992, 335536, 150233, 415685, -200487, 140047, 298515, -965828, 139697, -685014, 841183, -657443};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques588(){
        Integer[] array = {-464092, 905973, 794717, -120942, -235463, 998530, 213365, -682977, -571395, -363353, 461242, -867348, 258928, 949495, -7016, 923839, 901630, 118573, -536827, 738854, -853740, 755079, -487511, -601136, 820466, -302279, -342273, -24270, 855504, 186704, -649676, -161338, -47430, -7756, -868146, 757589, -538430, 486065, 985761, 822009, 129875, 137628, 214319, 184466, 325215, 7335, 664597, -586335, -656368, -181421, -797247, -289214, 588304, 535231, 436508, -50813, -873988, 800777, 437190, -590361, -796019, -657696, 439891, -249603, -77329, 446973, 824235, -486272, 540964, -884986, -40533, -36555, -685528, -806115, -980501, 475025, -926119, 244419, 359654, -279449, 769823, -175610, -931355, -700673, -776653, 687416, 21097, -426691, 794875, -277871, 884829, -46031, -658612, -523633, 595139, 137622, 28962, -932268, 771027, 71200};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques589(){
        Integer[] array = {-682095, -330140, -686267, 579913, -953697, 146503, 627611, -317674, 77403, -267878, 366906, -346828, -338184, -613340, -767560, -11830, 390864, 921996, 682570, -609637, -440354, -956002, 40189, -144464, 107083, -791666, -274363, -553828, -866788, -526789, -265893, -860397, 782025, -161995, -923567, 390893, -618959, -986526, -335782, -767301, -689615, -904471, 570716, 387499, -118121, -730377, 960296, -878491, 635330, 320959, 406789, 831630, -73396, -261917, -576460, -673135, -77905, -305790, -899513, -233132, -392418, 595111, -781509, 963812, 534146, 984856, 600517, 252786, 712764, 642186, -666331, 398999, 994541, -981316, -659397, 555602, 107570, 833728, -575161, -499908, 483267, -178646, -348287, -189942, -917206, 63239, -70804, -153501, 127089, 747410, -688544, -941939, 590244, -589206, 789339, -674906, 868699, 813257, 498710, 964698};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques590(){
        Integer[] array = {439711, -324423, -351794, 110423, -852211, -534091, 9139, -807725, -236889, -567272, 911963, 407182, -954718, 689268, -708730, -185116, -836745, 415295, -591083, 818671, 945342, -100137, 899974, -48961, -219380, 816334, -231844, -120921, -492761, -844019, 921820, 698187, -448625, -178090, -999396, -114082, -907172, 135936, 885384, 199012, 190753, 797948, 785005, 89093, 119442, -799869, 706984, 247025, 913113, 608177, 445167, -398132, 293883, 765996, -750404, 619185, 202864, -170661, 690751, -400858, -841441, 193337, -469740, -552725, -586957, 121289, -39523, 77491, -36590, -339528, 102628, -882285, -251614, 850594, -121151, 128286, -627681, -979222, 417149, 761218, -606057, 42610, -789497, -663534, 14766, -552827, 696394, 874465, -102894, 851685, -786804, 508342, -963619, -163567, -528994, -492222, -227114, -29358, -96210, -304174};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques591(){
        Integer[] array = {475619, 597417, 223261, -420012, -786529, -696647, -946840, -264776, -275313, 651677, 297629, 539140, -208963, 744799, -560051, 170547, -628051, 432007, -218929, -680731, -393713, -803406, -749699, -832260, -394430, 992554, 411376, 790614, -473245, 893120, 204307, 819249, -284051, -214801, -971641, -336411, -577851, 61057, -261012, -416801, 514090, 667090, -627245, -127437, 527327, -23473, 266316, -68516, 957054, 505616, 887670, -274200, 246232, -577218, 618358, 248793, 995980, 671985, -326864, -94823, 187655, 966653, 376872, -846932, -889576, -308464, 577061, 497652, -371981, 428849, -993059, -965379, -655738, 638946, -831665, -823627, 128617, 390255, -986662, 387659, 249307, 696581, -731765, -732801, -919478, 628541, -60670, 3540, 485009, -838340, -317916, -392017, 184646, -937865, 923384, -184453, 776405, 158431, 319433, 870351};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques592(){
        Integer[] array = {479388, 315933, 127518, 671792, 838899, -619533, -241478, -428765, 66076, -975707, -376255, 355774, 246247, -111843, 668974, 475099, 267520, -41701, -300338, 476663, -472075, -73892, 776889, 96188, -302966, 521305, 800084, 719578, -570275, -808530, -342213, -531973, -786596, 616318, -874644, -763421, -15758, -965739, -373346, -951862, 125609, -147609, -17930, -708281, -217964, -988349, 383380, 712003, -73475, 133759, 933760, 506130, -894579, 192603, -635045, -330514, -855977, -457362, -907249, -542174, 377862, -564851, 686571, 473422, 870229, 782889, 515924, 111656, 780540, 778626, 511214, 883870, 912838, -480005, -289531, 17910, -250167, 890424, -871246, 155453, 760610, -736994, -748470, -927502, -698647, -74504, -212414, 533692, 931864, -837012, 262336, -594396, -40580, -30522, -854083, -847488, 624217, -46933, -218574, 108520};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques593(){
        Integer[] array = {787493, -237742, 655680, -969900, 194661, 770177, -679013, 414281, -617077, -319778, -70389, 351946, 646275, 105321, 77545, 65476, 457596, -69624, 672612, 298384, -898723, -851108, 401976, 836232, 324198, 991684, -460404, -818768, -882691, 408453, -916755, 558131, -765207, 412568, -267085, -399477, -310875, 868935, 179821, -48820, -378021, 116134, 354896, -221247, 775999, -893695, -437467, 516830, 587049, -330242, 292372, 181670, -819684, -524531, -147074, 434899, 621441, -758910, -684543, -172655, -47648, 760463, 708523, -288414, -34246, 402473, 311938, 206257, -728104, 640405, 927941, 713965, 361268, 240937, -169036, 873445, 252265, -840538, -955863, -317790, 766876, -691177, -931377, -362462, -726777, 506467, 633358, 815278, -895387, -466761, 272406, 677911, 862869, 233324, 871901, -410075, 315264, 267191, 621741, 155976};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques594(){
        Integer[] array = {323493, -758849, 729059, 775717, 28327, -880511, -829141, -35882, -368402, 961432, -328751, 448809, -120837, 580832, -795160, 132380, 992516, -676770, 38883, 963386, -108969, 485168, -60802, 668073, 589783, 538029, 858959, -906011, -958986, -882429, 469232, 726134, 60904, -206962, 2005, 742459, -481856, 293392, -58983, -212794, -424958, 465845, -147824, 935994, -22966, 351387, -816836, -197425, -948939, -395020, -494954, -491372, -970696, 289437, 825415, -725452, 272145, 113877, 106111, -533937, -904174, 752250, -946401, 659196, 922105, -309843, -832721, 723617, 173733, 935191, 329541, -279194, 898575, -916092, 465973, 699857, -513981, 556714, 743646, 603276, -621442, -846992, 214840, 421323, 653821, 578894, -731498, -175105, -737882, 808436, -796045, 700530, 319702, 736756, 652097, -881190, -909341, 632404, 219166, 272360};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques595(){
        Integer[] array = {-330635, 890954, 295536, 801235, 910313, -850920, -957977, 378673, 341531, -353016, 596957, -81653, -275455, 658366, -990761, 542699, -639381, -278381, 343574, -732115, 851271, 403457, -689313, -548590, -756112, 290174, 806169, 41545, -113486, 660756, -436365, -132759, 422426, -557841, 134142, 505622, 814126, 791735, 915220, 820555, 609317, 872937, 772024, -915342, -589376, -178465, -581437, 147524, -879328, 415901, -988564, -138633, -729152, -933775, 753743, -590959, 784181, 971828, 358263, 686653, -876394, -580469, 439755, 982850, -291123, -688637, -306531, 357754, -797652, 836705, -833516, -293313, 441519, 479629, -372359, 55509, -803566, 345704, 496128, -676664, -83157, 849830, -488426, -819883, -711388, -630638, -433012, -486851, -149524, -688797, -68384, -597856, -754845, -105978, 746911, 298390, -891943, 202265, 374072, 834776};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques596(){
        Integer[] array = {500621, 338872, 670028, 909766, 714826, 773158, -258935, 2334, -354563, 97697, -19093, -578028, -819252, 919136, -958998, -656514, 965656, 323451, -544542, 902401, 510714, -668127, 669453, 437039, 660986, -214586, 408493, 907830, 269810, 831404, 150914, 410070, 521683, 293229, -608033, 933294, 140401, 583081, 997656, 527753, -882024, 683660, -616864, -308696, 395045, -532460, -780782, 814674, -911089, -249320, -507031, -115082, 741320, -530716, 328762, 843190, 578338, 303057, 925228, -653908, -617468, -63706, 347914, -972894, 286775, 12745, 601810, 933753, 282857, -766877, -793471, 441937, -765289, -793684, -264482, 35851, 996766, -2648, -276710, -926353, 8122, -947503, 177682, -837400, -922290, -335027, -20336, -149992, -133477, 696535, 493353, -964763, -45352, -722041, 239336, -724033, -644464, 313511, 933153, 473759};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques597(){
        Integer[] array = {-826212, 147382, -847178, 58229, -554070, 461595, 606729, -96381, -381982, -82858, -165401, 462852, -270835, -520834, 887290, 894996, -246166, 583209, 803524, 245005, -318717, -169597, -525981, 158510, 569261, 740233, 900998, -250793, 52096, -500468, -677741, -996011, -543028, -29040, -660218, -331439, -49899, -223875, -658049, -98210, 604441, 277056, 481354, 511447, 841892, -784105, -263094, 741843, -502395, -766999, 495294, -493276, 434738, 798369, 329284, 590637, 911084, 719047, 39030, 261634, 149663, 10171, 607892, -885576, -577095, -131110, 229402, -808599, -193151, -935031, 206626, -818167, 771067, 663927, -909574, 625587, -664250, -273117, -554710, 10893, -280382, -954126, 479672, -804361, -475636, 236318, -623224, -976047, 57985, -464930, -152875, 153737, 488551, 566087, -302292, 736063, 602414, -452222, -1540, 336872};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques598(){
        Integer[] array = {221528, -190253, 37228, 936034, 158204, -976213, 205721, -317845, -502985, 254672, 181472, -974088, 118792, -442038, 996943, 827863, 162693, 497447, -171072, -329848, -569195, 234615, -749894, -489466, -181940, 227606, 347233, 234925, -492954, 322421, -541357, 839011, 497517, 10382, -493399, -379181, -609303, 117317, -738189, -852118, -689913, 580127, -271026, -650789, -336520, -14680, -410016, -139005, -664762, -388308, -548447, 844459, -314524, 943609, 82460, 351326, 602387, 804564, -643244, -873684, 37103, 112161, -77279, 19161, -709394, -605884, -828337, 667777, 29327, -956463, -495842, -493218, 323061, -750102, -574782, -532064, 407083, 850094, 432269, 781050, -681918, -809246, -585798, -102072, -309003, 266421, 414476, -643192, 262880, -122562, 379882, -730654, 817151, -859562, -593791, 897784, 354702, 977253, 626651, 546635};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques599(){
        Integer[] array = {-974213, 535781, 57794, 763563, -916225, -140637, 486822, 414190, 56676, 910354, 745181, -856123, -135091, 6430, 247996, 852797, -582076, 347091, -511922, 14837, 116150, -606061, 679349, -135958, 311389, -51202, -272149, -789381, -801366, -60553, 183531, -509466, -832385, -786812, -646827, 215969, -814317, -963673, -932687, 111998, 347392, -342018, -179663, -50603, -494510, 388155, 936291, -459630, -71839, 508826, 378060, 970274, -469941, 788760, -451546, -295649, 817926, 427918, 492623, 152838, -746969, -134079, -459746, -182034, 803655, -919765, 8729, 361958, -69765, -695725, -296888, -679992, -786422, -546626, 236693, 326766, -254429, 594336, -521135, 1025, -326268, 264635, -432168, -697252, -610597, 781899, -673881, 843705, 63978, -451046, -366259, -86001, 541204, 324015, -893702, 171764, -244570, 402728, 685982, 818612};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques600(){
        Integer[] array = {626919, -97695, -308273, 536808, 208457, 134081, 610423, -862152, -250476, 85186, -254813, 201903, 599342, -349050, -242841, 38756, -215436, 632601, -784007, 662153, 880528, 181938, -24735, 93667, 873696, -551948, 63486, -414446, 423577, -715117, -952918, 793897, 985504, 766479, 634844, -817302, 508210, -352275, -556195, -498493, -868175, 245795, -201172, 858851, -528362, 373583, 498457, -326092, -955918, -33908, 751956, -620158, 12598, -409676, 828842, 93664, 238298, 959986, 934680, 268717, -676475, 773878, -807116, -652741, -297917, 296681, 750305, -46470, 560711, -686522, 466171, 349342, -556202, 192852, -385799, 366000, 274819, -896003, -323192, 411069, -38250, 825043, 600899, 516255, 160553, -802046, 762661, 282171, -167137, 488529, -317474, -484321, -570439, 800419, 485846, -76894, 545500, -801183, 449372, -928536};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques601(){
        Integer[] array = {-361473, 145309, -238819, 918416, -86976, -572325, 445990, -101287, -565320, -488122, -922176, 693958, 19533, 303232, -940258, -987696, 970992, 894572, 302083, 704194, 630258, -288960, -689916, 636538, 727869, -776155, -986999, 577280, 528988, -301262, 760537, -687014, -569121, -376546, 363260, 903381, 575947, -215397, -727557, 876948, 214423, 43435, 449005, -13260, -473160, -788994, 22341, 258246, -40977, 973581, -381780, -696787, -390410, 946696, -813606, 584263, 470219, -833919, -98225, 263114, -968654, -357317, -365354, -296479, 881476, 103449, -688711, -330105, 106092, 312408, 668738, 541387, -16889, 491368, 647861, -105006, 793917, -933780, -231154, 619076, -679732, 38963, 281239, -512252, -676790, -240015, 220629, 193004, -598402, 873140, 939426, 310037, -523257, -806549, 541383, 531064, 147960, 309554, -448222, 70935};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques602(){
        Integer[] array = {-153421, -968978, 372617, -694478, -338529, 867737, -293463, -6629, -114200, 904978, -799416, 225637, 320027, 400575, -884203, -991473, -952879, 66967, -915047, -876249, -614537, -526371, -643427, -961054, -12452, 873560, 593432, 859532, 480195, -434649, -441624, 245131, 402932, -140403, -54893, -522030, 952249, -940850, 64683, -559839, -805362, -583110, 801317, -287759, -491176, 817976, -275422, 933319, -350633, 102648, 488616, -561354, -244442, -342139, 208016, 728418, 381954, -81611, -832208, -279439, -240461, -681874, 266033, -82712, 146771, 505305, 405531, -189441, 850968, 274402, 585949, 794197, 749760, 646292, 265780, -555165, -424283, 794131, 249587, -785693, -122532, 483395, 995817, -542729, 891657, 492525, 857889, -909827, -376896, 810194, -681564, -85288, -772578, -83792, 610966, 405103, 454264, -475568, 353955, 418885};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques603(){
        Integer[] array = {772444, -138735, -783268, 893233, -164561, -987555, -479454, 931595, -852357, 854499, -278897, -674208, 721919, -74872, -706507, 140671, -708969, 31631, 980690, 668814, 921798, 373040, -345711, 841188, -129942, -128411, 186136, 44336, -362742, 147554, 725028, -586134, 205093, 304171, -837159, -52268, -91046, -812745, -312044, 814607, -994546, 734228, 761156, 259547, 45805, -622303, 436914, 788861, -116161, 278096, -364648, -279180, -853293, -960058, 779613, -40979, 545285, -494125, 961032, 167569, 946201, -922863, -200398, 815794, 760616, -802863, 90463, 120191, 415163, 99301, -665787, -647043, -322368, -143388, -796388, -705252, -325650, 390360, -126033, -665353, 198289, -373030, -948120, -772499, 628658, 250290, 17968, 196384, 44904, -440240, 687924, -176692, -663513, -549474, 424245, -670879, -852544, 851017, 906407, -992893};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques604(){
        Integer[] array = {689241, 567989, 283037, 468242, 493550, -623634, 926065, -333772, 45596, 969460, -665220, 827416, 787709, -789284, -619514, -303887, -335322, 90111, -730544, -175506, -282057, 266870, 57027, 388105, -743153, -475748, -781352, -855966, 490689, -22026, -282688, -582437, -379260, 75502, 402821, 190211, -578822, 857350, 783229, 390058, -324467, -858733, 30041, 84615, -525994, -450811, 40195, -606220, -817791, -842216, -98654, 211872, -624899, -96576, 284223, 36076, 987980, 91422, 894507, 105730, -472979, -349180, -299057, 571776, -143301, -516718, 718994, -289510, 577710, 210056, -345261, -88288, 293106, -432175, -629250, -952809, 314106, 400820, 667181, -783543, 341550, -104007, -289657, 773242, 631715, -599233, -644372, -42746, 28798, 135489, -623372, 573094, -219881, -228477, -925070, 920275, -437829, -827446, -473984, -943198};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques605(){
        Integer[] array = {123732, 514697, -526670, 253135, 7707, 570784, -172193, 792743, -2361, 149222, -385804, -688630, -401091, -469779, 325740, -587447, -832774, 23940, -799514, 116857, -735805, 809197, 753503, -651295, 180700, 161737, -569157, -964896, 541787, -729194, 69120, 922393, 245159, -900216, -24207, -324990, -401492, -997096, -206614, -319265, -195201, -885224, 965327, 42261, 403367, 990337, 643604, -681584, 766074, 548541, 308342, -419843, 546086, 493430, 869272, -206721, 34743, -372981, -724153, -941944, 917485, 535524, 443871, 678855, -897021, 563036, 73078, -256940, 871183, -811190, 488805, -639275, -617401, -223461, 526636, -100112, -619898, -111888, 809828, 355932, -105065, 516890, -911591, 302770, 303191, -615605, -590340, -410284, -84931, -401409, 352347, 330890, 901777, 810546, 933644, -106472, 243506, 646805, -201930, 146468};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques606(){
        Integer[] array = {536180, -781897, -331121, 20617, -778261, -338734, 257759, 806147, 617173, -803371, 516666, 817208, -951962, -644790, 318838, 897135, 904633, 528112, -783682, -902686, 305452, -665142, 477765, 875414, -678877, 459276, -388779, 154811, 639223, 251331, 794667, -410007, 580366, 48535, 753137, 912928, -222566, -345772, 147550, -930151, -774641, -276783, -544379, -89674, -997589, -557487, 807167, -100018, -496613, -25530, 395024, 258617, -324914, 262131, -580115, -409169, -797213, -813794, 745344, 20121, 984719, 448854, 285268, -236962, 820125, -681992, 422987, -125647, -143159, 161067, 7205, -414230, -511136, 342666, -720690, -624629, 311375, -772188, -143029, 317002, -431535, 601029, 449600, -315565, -632643, -372962, 388723, 628150, 910070, -934411, 656978, 830150, 707273, -381776, 225898, 612601, 381221, 796374, 965910, -445751};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques607(){
        Integer[] array = {756966, 127585, 503340, -958398, 81073, 264253, -904160, 246737, 126765, -200501, 107391, 680510, 948059, -142122, -272174, 675461, 17960, 510684, 926653, 932559, 696353, -556619, -381699, 260650, 993718, -254780, -74590, -272398, -273115, -396568, 537634, -387151, -291082, 212178, -686370, -814323, 51690, -786480, 87399, 25697, 897096, -505106, 238544, -619158, 9439, 722685, -574825, 715025, -997120, 651286, 953705, 590625, -820251, -592924, -999260, 424673, -227163, 913936, -429675, -856248, 876051, 331897, 464575, 525164, 280853, -572237, -46451, 4333, 787501, -540126, 334761, -839714, 19644, 290863, -129655, 564263, 593279, -118770, -600564, 725602, 38856, -843452, -243379, 116470, 85314, 462938, -148694, 66565, 331928, -680211, 100613, -741172, 920939, 361029, 529166, 978176, -747486, 617453, 147771, 578846};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques608(){
        Integer[] array = {-831446, -656820, 439746, -916102, -731765, -257865, -409442, 100765, -757168, 91330, 18987, -644735, 139748, -641915, -466537, 793923, -562850, -263225, 426855, -277186, -165036, 579008, 245047, -818731, -804324, 405333, -168636, 86776, 87207, -639314, 883353, -554165, 175880, 616470, 257132, 334623, 34102, 146539, -22820, -166078, 94510, 705550, -991141, -685926, 462620, -954870, -21180, 390093, -585314, 733829, 842046, -537340, -951861, -36096, 832525, 533246, 625941, 724574, -304194, -540627, 789420, -9178, -482450, -418295, 386158, -412851, 501435, -204206, 64783, 344571, 295489, 810682, 351011, 301261, 690570, -119249, -315788, 791155, -59915, 933696, 99842, -540894, -238953, 415152, 430920, 788913, -551464, -63908, -283519, 665936, 953249, 457493, 770075, -594511, 589905, 15426, 331144, -671617, -835909, 296687};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques609(){
        Integer[] array = {144812, 622023, -932974, -577971, 871611, 37710, -997219, -641089, -176400, -103414, -149965, -21744, 417161, -160071, -713209, -327502, -609261, -592460, 451278, 898657, 696532, 306884, 215628, 185373, -938683, -294183, -343783, 184204, -688552, -712229, -486665, 230509, -236177, 17310, 46420, -989183, 489933, -296671, -166329, -89230, 465663, -690231, -692335, 151157, -9061, 356300, -988132, -310873, -818742, 812294, 705708, -574084, 597562, -489120, -289049, 978005, -448929, -433560, -457944, 478717, 732555, -173470, 493133, 200892, -278515, -331174, -833210, -572504, -771427, 204355, -980920, -844487, -533803, -619727, 209046, -199178, 407516, -582261, -39592, 161636, 795726, 462668, 314580, 495275, -659768, 61896, -797729, 522843, 548089, -67307, 4464, 403120, 385992, -421841, 419006, -36263, 541429, -603846, -65113, 751139};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques610(){
        Integer[] array = {650444, -66856, 228162, 304793, 878106, 54840, -55721, -97195, -575766, 686163, -722099, 639785, -218516, 615358, -751398, -752738, -764488, -326403, -315278, 26188, -802717, -301424, -670906, 593528, -534632, 405296, 760306, -948144, 97244, 648945, -346317, -944843, -613447, 734274, 254622, -148328, -813075, 733546, -980046, 897290, -966339, 718673, 351019, 988884, -734557, 139496, -170421, 65117, 106203, -178972, 159241, -193059, -903894, 892487, -726356, 661252, -303468, 491867, 477476, -691682, -902645, 484002, -235889, 630711, 688046, 537612, -54114, 682665, -434595, -172846, 382965, -824466, 512904, -31021, -585603, 657811, 502682, -611836, 333666, 447313, 641710, -187981, 99287, -118345, 906813, -175609, 590503, -764315, -867562, -189503, 21207, -250512, -946896, 534045, -562548, -133615, -469294, 395877, 167210, -884812};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques611(){
        Integer[] array = {10769, -644425, 492714, -383361, 862165, -536781, 452766, -870049, -590192, 74452, 941469, -49567, -489532, 317489, -31622, 2195, -316249, 401364, -336910, 33519, -551929, 658197, -463457, 80194, -468452, -409088, -36239, -520732, 150738, 388663, 700587, -239384, -119534, -975725, 739957, 317754, 724512, 728894, 894038, 348989, -807949, -313133, 5005, -364697, -294210, -929463, 109548, 435749, 499600, -160101, 855046, 442844, 765537, -754587, -971611, -253168, -350011, -933991, -405645, 704188, -88700, 734439, -439488, -506061, 524813, 360980, 592824, -473054, 777652, -612889, 25139, -484407, -114438, -231932, 313554, -285756, 244903, 341250, 224886, 765307, -539373, -877834, -93116, 676555, -197491, 104490, -730100, 367250, 639373, 960981, 693244, 510316, -933094, -621353, 725811, -985094, -177164, 540639, 417671, 532745};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques612(){
        Integer[] array = {172008, 516950, 92125, -611705, -435816, 719532, -597127, 172690, -375464, 101744, 707924, 861979, 400373, 743809, -815145, -949879, 869791, 163495, 316496, -456956, 867709, 615337, 782991, 485851, -175099, 940392, 352418, 794295, -539225, 436748, -982823, 810121, -181671, -710229, 433759, -996359, 328742, -416242, -509082, -633434, -861649, -309372, 590574, -814008, -113854, -207726, -791435, -54817, 987470, -906175, 611456, 863630, 781419, 260293, 890391, 142091, -124679, 135329, 72266, -715818, -591273, -728860, 345093, -561304, 21370, -565522, -955681, -204183, -696331, 304266, -880635, -945843, -995097, -492931, 130995, -681796, 147881, -520451, -131806, -24682, 462242, 590065, 576366, -428609, 903849, 796646, -544601, 28304, 190723, 625563, 129921, -594262, -977922, 269975, -992753, 880161, 121677, -810408, -636207, -323716};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques613(){
        Integer[] array = {855667, -631770, 572677, -99005, 932603, -169793, 263966, -6950, -610779, 306708, -127792, 295319, -490848, -912653, 605322, 244974, 257770, -387462, -477872, 243558, -603194, 174606, -267201, 691887, 529555, 306967, 13395, -267327, 524513, 69423, 992719, 484664, 343294, 336853, 676747, 619837, -83573, -972528, 869402, 627201, 370718, -815693, -64605, -482046, 604778, -360239, 70597, -169773, 805562, -29864, 335667, -189917, 567460, -275322, 381836, -159324, 132811, 635385, 237174, -62307, 88247, -955012, 603113, 794490, -63621, -618210, 612369, -664169, 496448, 129835, -719375, 917415, 577791, -440285, -87240, -304595, -515583, -22438, 842510, -40227, -754532, 587017, 857347, 357361, -527436, -401882, -472428, -553745, 383723, -773920, -779272, -521256, -260086, -842, 433566, 944737, -177430, 936921, -446848, 667791};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques614(){
        Integer[] array = {-405789, 767720, 382510, 674148, 357130, -415804, 115194, 529999, -796959, -698264, 643671, -407922, 791157, -369482, -535822, -973259, -620845, -16601, 722236, 714234, 525734, 336357, 401555, -435205, -802283, -533306, 439964, 774239, 945030, 96799, -343855, -134410, 255419, -14843, -281799, 364200, -474763, -237047, 86518, 407619, -566637, 14948, 404287, 188218, -805265, 961449, 312806, -194513, -726126, -86262, 773420, 82496, -471218, 19220, -150007, -803116, 297402, 248641, -878986, -183028, -52459, -708905, -90173, 426086, -136934, -261003, -12744, 210653, 266956, -338493, -984721, -767162, -77093, 491545, 134227, -802897, 345516, 67193, -571096, -782516, 526854, 155222, 829093, 326974, -520535, -672978, -595347, -604939, -934784, 499276, 133416, -843197, 555333, -955828, 866274, -381196, -360835, -369596, -767982, -756442};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques615(){
        Integer[] array = {-919463, -796679, -181780, 63436, -322779, 868063, 679559, 540289, -245779, 421928, 453447, -887936, -867942, -133960, 565201, -676798, 541025, 702365, -644068, -323923, 484131, -56032, 3552, 777684, 353924, 625330, -521805, 599616, -250331, 257051, -307598, 680520, -902736, -395297, -572559, -554315, 795315, 149778, -737177, -77776, 640417, 509220, 185258, 756202, -290959, -782127, 79116, 906398, -764855, 258909, 556175, 789877, 817609, -315552, -590746, 97422, 579428, 9739, -57876, 424034, -433353, -935281, 275048, 7804, -525562, -296475, -420122, 527407, -490671, -32163, -435490, -640667, -745545, 235938, -689936, 671349, -160761, 875838, 855256, -483747, -813905, 812888, 269875, -99908, -20811, 575670, 231043, -161372, -845153, -889595, -51481, 164037, 881824, -55015, -555761, 148175, 992937, 648941, -744342, -43220};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques616(){
        Integer[] array = {836990, 85406, 780780, -854511, 563174, -321470, -121520, -97807, -121628, -97770, 187818, 90402, -670280, -476289, -507514, 217682, 660336, 962735, 679257, 301463, 901774, 917730, -983264, -404691, 49173, -55333, 655489, 626142, 124940, 994094, -504291, -535866, 196633, 137118, -137198, 404089, -970051, 324141, 418075, 477469, 683546, -796624, 254720, 901671, 51131, 919262, 337002, -171048, -838485, 90343, 302671, 481505, -795547, 674459, 317424, 638473, -859833, -851974, 154468, 149412, 602044, 228756, 627972, -537815, 977118, -541781, -3348, -107702, 427250, -724454, -335425, 931133, 742718, -36267, 117367, -379550, -416332, 566124, 405347, -557920, -429216, 722279, -408200, -554002, -915540, -221737, -514380, -886549, 690277, 729141, -220624, 45053, -618346, -483033, 548301, 23546, -188948, 325910, -176049, -936795};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques617(){
        Integer[] array = {-762657, 129034, 283641, -179725, -918321, -689409, -92613, 921640, -331301, 275492, 665508, 448206, -886220, -7697, 63188, 501976, -960022, 910358, -500103, 198704, 461639, 361971, -352408, -392422, 713234, -296326, -892371, 670120, -3965, 613671, -355674, -603744, 149788, 245078, 572825, -492321, 465689, -403278, -484361, 288443, -914114, -357221, -557311, 589948, 427060, -866473, 149337, -897924, 565618, -942236, -654947, 608771, 477316, 85136, 269546, -65585, 517421, -983441, 712927, -901311, -465685, -711705, 746498, 754203, -293237, 74770, 498121, -784796, 443208, -943973, 768099, 517488, -650363, -590668, 732946, 519873, -488480, -146425, 715098, 983946, -731046, -508435, 334717, 82632, -190089, -94802, -116699, -324624, 665041, -679070, 492566, 447690, 555504, 555804, 125547, 808302, -467348, -569745, -496572, 217047};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques618(){
        Integer[] array = {-882115, 327332, -513243, 483553, 41705, 936852, 221774, -708665, -593456, -713773, -121814, 195479, 561983, 992208, 118434, -962547, 22994, -970830, 525275, -825007, 18050, -583825, 512875, -347934, -491488, 101646, 955079, -173936, -304682, -916153, 748231, 63909, 443966, 374785, -978128, 373019, 498492, -451207, 313654, 403211, -222771, -444970, -969292, 190226, 780311, 578446, -291793, 957525, 844244, -519579, -501204, -951296, 105361, 423309, 759947, 760882, 455142, -391389, -425520, -624918, -650456, 930826, -911523, 948789, -914430, -83411, -962269, -609185, 997034, 470151, 727507, 742877, -170812, 566717, -755692, 541569, 811169, 748803, -12890, 271526, -119842, -229757, 611032, -756091, 629508, -933754, -132963, -856589, 665492, -236035, 425807, -924476, -283292, -950466, -792506, 365611, -692275, -217134, -614694, 15202};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques619(){
        Integer[] array = {-719219, -761034, 188280, -242194, -149362, 421815, -190794, -690701, -748615, -659892, 765306, -286393, 776060, 622103, 589824, -979868, -529556, 940861, -856721, 223011, 404308, 968740, 956037, 106521, -32526, -183122, -996437, 815488, -282744, 195999, -982798, 729914, 824322, -210465, -797653, -902012, -371406, -667580, 375031, 178061, -486373, -793304, -661402, -308003, -514835, -277475, 680421, 552124, -309651, -638395, 86518, 558560, -878969, -333626, 804413, 631756, -823505, -712497, 303400, -73019, 989858, 930663, 382617, -35794, 230161, 667626, 703265, -937770, -358602, 117228, 377171, -809776, -514929, 663221, -580330, 543275, 739319, -765845, -422767, -85452, 178121, 33662, 537991, -483423, 323528, -106998, -228217, 11098, 26684, -399901, -791983, 565581, 888745, 750560, 938333, -733402, -910991, -447137, -411770, -613440};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques620(){
        Integer[] array = {243109, 634526, -300843, 985671, -737446, 515781, -269340, 222159, -333822, -400021, -811485, -528350, -387364, -523813, 668379, -860725, 673303, -406547, -289129, -12738, -307001, -62676, 194349, 390044, 363674, -513442, 842361, 392587, -860268, -563491, -47158, -511843, -137911, -688734, 881297, 620225, 110723, 947995, 538634, -907974, -185745, 989841, -206836, 787196, 785113, -49935, 284565, -120090, 698962, 664372, 100578, -728905, -879351, 37476, -954930, 125528, 520904, -363062, 581820, 127381, 939813, -112005, 238399, 40023, -507172, -975834, -552031, 950459, -672843, 588080, -952476, 73547, -253572, -970928, -795172, 192672, -939551, -315465, -709892, 988522, -891093, 54695, -64610, 434314, 770998, 157890, -485031, -555187, 470502, -322315, -321762, 773633, 391468, 355938, -410868, -182056, 351620, 105719, -129009, 267007};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques621(){
        Integer[] array = {19836, -428784, -11017, -417457, -192960, 26170, 467096, -544570, -607017, 887218, 865017, -136111, 52522, 768538, -298253, 234980, 252165, 861613, -665743, -162936, -373901, -799189, -833308, 898545, -746793, -280957, -655267, 347874, 330781, 320433, -311403, -637876, 678134, 661109, 418391, 345756, 501094, -17620, -358052, -143561, 529754, -902541, 32161, 314952, -582054, 635363, -623157, 363074, -958509, 833380, 971484, 664418, 853003, -934413, -611244, 664685, 471301, 384091, 444146, 687422, -421287, -951300, 474493, -585060, 344073, -984901, -707149, 171873, -49097, -147419, -40679, -231827, -541164, 754139, -380996, 590080, -896803, -670949, 515582, 174788, 312539, 973648, -349757, 654732, 140328, 458988, 350506, 308228, -475729, -371696, 17572, -124529, 906734, 5982, 794961, -593240, -4463, 611830, -270542, -547981};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques622(){
        Integer[] array = {45661, -15870, 207282, -342793, 972126, 280169, 917549, -347684, 901550, 801598, -359296, 272258, 757490, 5993, -924082, 852822, 985391, -60178, -690934, -585401, 646964, 690274, -771837, -282808, 367940, 347432, 47252, -131530, 159409, 661060, 479598, 582272, -591681, -669563, 567158, -701493, 118987, 14478, 624259, -261899, 415356, -827372, 919118, 583106, -357875, -590848, -806134, -304804, -9034, 623937, -260932, 840676, -963818, -616076, -384275, -940617, 705635, 247897, -35109, -459721, 653676, -593393, -515577, -991820, 910202, -224951, 136933, -92507, -417416, 621560, 862233, 341561, 871142, -247862, -348672, 252821, 483295, -650531, -280821, 565355, 19225, -46034, 620535, 429492, -847648, 557875, 453259, -278991, -903609, -314682, -429658, -724794, -99188, -970959, -188920, 710172, 861918, 759127, -178564, -28763};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques623(){
        Integer[] array = {411052, -792831, 671128, 4045, -390806, 638402, 85647, 335144, -511438, -32583, 615879, -810097, -276265, 444394, -864289, 314973, 279853, -965203, -929327, 164295, -700763, 948886, 667998, 189941, -61527, 743344, 448730, 246113, -745710, 273253, -75625, -576712, -202326, -194084, -198151, 305710, 426961, -905744, 322096, 766386, -274959, -948276, 21302, -464049, 968870, -112505, 882883, -865935, 800838, 914283, -408227, 76089, -83245, -981639, 371399, -629413, -670896, -846471, -591230, -228153, 591252, -796420, 264025, -317815, 303100, -741826, -793068, -569851, 825952, -4470, 784508, 784487, -800126, -485702, 383664, 713468, -79184, 522781, -707128, 649655, 344921, 294924, -345733, 775429, -242268, -143201, -973710, -312784, 29771, -798340, -915403, 880597, 39735, -99718, -486807, -79198, 35627, 966198, -822429, -950217};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques624(){
        Integer[] array = {748722, -481306, 898896, -843012, -624444, 747633, 461502, 987148, -212344, -139971, -799346, -758260, -137542, -646703, -406848, -151741, 405133, -224590, 775012, 615942, -894245, -404753, 508005, -96333, 5712, -776545, 270072, 714381, 693329, -241566, -237300, 599489, 722795, 200028, 880731, -664576, -640424, -343919, -703844, 577409, -412375, -735018, -302631, -740358, 334351, 48279, -208412, 971877, 788053, 486080, -278971, 35785, -8865, 820221, -410731, 588398, -614512, 865491, 707153, -509229, -616291, -929142, -543409, -233394, 898344, -8987, -990926, -394303, -782785, -918787, 980699, -287349, 195508, 956775, 567337, 550704, 617564, 155393, -279313, 657549, -539976, -242266, 167414, -207830, 400259, 856873, -660583, -962995, -968286, -366288, -906733, -734372, -587047, -239819, 573562, -583932, -97260, 54688, 839783, -876073};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques625(){
        Integer[] array = {-331109, -992353, 547124, 442175, 167105, -767114, -900, -950580, -611601, 903454, -155148, -29543, -301291, 549232, 695781, 139684, 525238, -141662, -303585, 313242, -173586, 795080, 237225, -105352, 926122, -496582, 88297, -641663, 648946, -817496, 363227, -581395, -645908, 850856, -483145, -998212, -906814, -568912, 942019, 874827, 359313, 578229, 418943, 106218, -459490, 65149, 945084, -985054, -999652, -880151, -575155, 699787, 472331, -766940, -558003, 967928, -949359, 985252, 46823, -241813, 356860, 491806, 577346, -431254, 907111, -978812, 512500, -263803, -190247, 532925, -527836, -555147, 122297, -589417, 499037, -167628, 714333, 687260, -598483, -161686, -405558, -503192, 743043, 472017, 921927, -567387, 166770, -63260, -727699, -763406, -198777, 601059, 400574, 968157, -165130, -394301, 687759, -827568, -642769, -72561};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques626(){
        Integer[] array = {-445843, -78679, -600249, -104518, 436275, 47986, -709127, -70469, 356719, -587348, 988625, 303159, -725967, -280023, -433287, -954700, -529082, -849005, 54417, 253593, -231144, -723872, 595966, 352726, -893718, -978151, 784073, 674024, 169423, 522208, 423668, 480551, -46517, -938789, 190319, 370381, -821043, 691939, -281630, 701833, -209401, 327390, -353979, -781384, -574740, -845340, -961929, 305589, -419893, -464057, -899436, -933856, -315259, 888146, -56279, 105984, -166713, 323688, 344000, -313337, -796131, -697769, 876926, 867862, -885744, 191608, -383240, 639407, -355918, 625837, 391785, -893040, -465354, 87879, -66556, 584933, 997377, -518371, -8199, 462109, 104171, 58304, -16182, 760992, 274444, 789732, -419069, -463530, 894307, 159488, -788464, 385417, 531007, -519267, 990404, -696924, 7855, -421696, -671582, -857900};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques627(){
        Integer[] array = {244164, -962803, -314121, 589254, 842952, 605475, -626082, 885822, 792579, -564374, -394466, 846273, -541412, -951464, -729399, -773741, 911942, 258190, 366070, -339921, -25422, -432837, 75248, -85823, 767507, 515364, -201811, 176725, 851820, -655214, 972826, 851529, 68122, 975318, -154570, -337877, 93111, -81701, 603402, 442389, 815949, 857764, 878528, -6902, -69525, -197149, 352307, -794174, -886533, 645150, -383798, 583934, -620563, 988646, 735379, 663218, -929665, 99593, -895240, -251523, 103944, -603740, 402283, 987026, 290615, 244373, -708047, -110146, -533006, -217664, -135662, 217817, 666165, 517538, 265478, -846338, -771115, 960899, 789079, 286323, 788035, -643473, 830308, 881516, -272531, 739056, -795046, 415298, 9841, -170467, -71836, 628958, 712331, 99339, -918360, -362309, -175039, -958714, 860186, 72376};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques628(){
        Integer[] array = {345286, -763986, 273619, -49647, -910149, -482636, -519510, -357218, -689993, -340331, 292853, -770438, -762336, -451658, 620063, -808770, -911802, -842441, 423901, -825333, -126255, 720498, 956213, 384532, -428727, 202067, 342986, 483500, 912413, -462746, -700932, -210643, 567672, -738797, -145571, -719917, -959885, 949254, -557321, 698969, -757036, -417793, 512710, 475567, -682354, 789865, -353936, -878885, -809414, -79024, -765314, -113796, -459049, 533277, -471119, -654114, 233163, 726944, -136331, -21575, -842467, -900961, 806541, 566806, -875911, 766174, 140068, 542375, 553516, -707762, -355889, 366754, 115144, -295683, -299186, 455271, 967924, 884331, -400087, -403342, 166132, 101927, 196738, -976870, 756573, -928075, -202805, -985281, 60641, -178985, 720976, -491531, -850187, -547247, -209189, -703643, 418053, 98258, -726307, -397218};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques629(){
        Integer[] array = {962359, 30387, 263779, -733972, -735974, 509735, 715381, 381700, 886900, -348027, 675249, -136185, 631917, -187628, 639026, -890472, -92599, -32774, 483484, -115720, -933941, -844377, 300734, 45530, 359037, -893185, -28207, -992200, 708713, 171659, -485375, -375931, 862646, 754787, 471108, 593628, -379753, 422847, 312732, 891908, 280137, -747594, 86934, 809281, 343657, -372847, 403532, -412064, 917534, -410302, 321277, -309362, -44868, 199219, 843835, -26249, 415935, 209570, 879432, 461455, -302845, -451233, -659950, -314117, 697429, 269949, 379380, -593999, -581092, -23300, -576689, 175726, 628936, -813305, 564008, -715801, 974369, -886158, 209768, -376704, -146768, 627249, 943277, 337995, 836028, 844992, 663468, -154890, 529407, 435540, 84668, -938059, -257323, -715002, -39467, -372706, 505241, -893944, 174091, 611286};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques630(){
        Integer[] array = {-485948, -463228, 794445, 74927, -611842, 916394, -747680, -601072, -450539, -942829, -340521, 145700, -135334, 3111, 211269, -56108, -692353, -239202, -921854, 979457, 739922, -364050, -790654, -85671, -173019, 424035, -371088, -774273, -435667, 747204, 145843, 287729, 41054, 208423, -400134, 753179, -831548, 133595, -153094, 253749, 592810, -334305, 845387, -45963, -939613, 405895, -891543, -229931, 539452, -44130, 850877, -980671, 813961, 600653, 475252, 138079, -868463, -372541, -809969, -517919, -298252, 297227, -20284, 633502, -375202, -23693, 824954, -800482, 948940, 176169, -408547, 197196, -600651, 232437, 434040, -866809, 106261, 842028, 427712, -962068, -920539, 206318, -442591, -152718, -347294, -649990, 426364, 110895, 993961, 640649, -893472, -671895, 788946, -778446, -939860, -642866, -822850, 551855, -486058, -654059};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques631(){
        Integer[] array = {434976, -259837, 390901, -816565, -701464, 737011, 935160, 214919, -669058, 661477, 328833, -321263, -251731, 89137, -143356, -124908, 20316, 74406, -541752, 209250, -226303, 278678, -797622, -485642, -533775, 706676, 371368, 971856, 270057, 720716, 926670, 776246, -791521, -930826, -768059, 317094, -932222, 511726, 369092, -796116, -815038, 782181, -36902, -199878, -479347, 244988, -741299, 500922, 16902, -662857, 515997, -405830, -440717, -976769, 40685, -497346, 784032, 291105, -319796, 913628, -421574, -886883, -955848, -673550, -306104, -169241, -745290, 429081, 488912, -766724, 120669, 69361, -180306, -68757, 608997, 750241, 63337, -985109, -497604, -959199, 577264, -203559, 447419, 920994, -50939, -463323, -632706, -874544, 793561, 140668, -36133, -659199, 373924, 266984, -992321, -968092, -299109, -670692, -10753, 937734};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques632(){
        Integer[] array = {589100, -589517, 890706, -714204, -212678, -879311, 564671, -191187, 573984, 941864, -928625, 634866, 543309, -817839, 560912, -689930, -977494, -629556, -56188, -389698, 711171, 646977, -187407, 463910, -318131, 939635, 935896, -378554, 661082, 721611, 135028, -752214, 659603, 186817, 416878, 987998, 814145, 543126, 890882, 758334, 312466, -676267, 81162, 94539, 365035, 646766, 35480, -483691, -504377, 125722, 788402, 641729, 710635, -57433, 69402, -478980, 588260, 567752, -575321, 700008, -539894, 552655, -86598, 51374, -408698, 986920, 339725, -772533, -446518, 85990, -174969, 386757, 13837, -276968, -299375, 165753, 207170, -218538, 112032, 580637, 632327, -193294, 645188, -624038, -558483, -475345, 108791, -369812, -35832, -525528, -343500, 110471, -439443, -829457, 210140, -439001, 331816, -487038, -773878, 57149};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques633(){
        Integer[] array = {-728451, -56251, -397442, 567857, 857562, -433965, 576846, 191441, -854820, 852765, 83494, 715850, 398222, -609293, -734734, -193790, -37604, 74073, -607592, 647004, -490495, -868679, -259671, -65812, 708710, -140124, -4565, -124554, -800556, -234485, 509262, -667454, 530736, -73777, 140422, -617191, -517259, -408470, 159159, 838684, -482169, -246114, -356143, -611345, 332132, -437423, 972386, -890538, -815015, 548354, -969691, -483389, -614438, 768806, 135073, 182020, -672609, -169160, -726561, 301798, -985840, -158263, 779670, 716471, -29872, 46098, 267727, -948226, 624659, -482951, 642226, -246193, -36783, 498208, 504034, 575657, -706970, -473259, 556739, 733350, -43548, 311904, 981731, -65228, 309889, -688524, -362712, 657552, 299262, 936814, 362301, 351103, 818044, 641545, -530822, -483035, 291546, 523851, 945569, -322990};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques634(){
        Integer[] array = {-363749, 923299, -983466, 922087, -840509, 585989, 479470, -692797, 217612, -685012, -881663, -575570, 441698, -952905, -467354, -992313, 167689, -14033, 286571, 396945, 687294, 816878, 455632, -73995, 524008, -119521, -619549, -951665, -24598, 657046, -904524, -694899, 653474, 823018, 315923, 227050, 794693, -237621, -538858, -383149, -198201, -842838, -739488, 8915, -874540, 858483, -594955, 903658, 646669, -775753, 562405, -254021, 509573, 922976, -615768, 569879, 267405, 95542, 479960, -23233, -658974, -345063, -578481, 50152, -884734, -131862, 424712, -740868, -1445, -227361, 725273, -805450, -147597, 226987, -421809, -227846, -254853, 311195, -811398, -122993, -287111, 969620, -514765, 656424, 475264, -327998, 454835, 841111, 542709, -171989, 510785, 411678, -266477, -990405, 362352, 656911, -533020, -757629, 415267, 250264};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques635(){
        Integer[] array = {244228, -523422, 984212, 233344, -688084, -96251, 923310, 79789, -296716, -584978, 74361, -221915, -457251, -854656, -648655, -267922, 137515, -414159, -416973, -435015, -986204, -780069, 905783, -529195, -739801, -819930, 461293, -278219, -99232, -457205, -570178, 132527, -63992, 519055, 534763, 42576, 355110, 218698, 868930, -252799, 175264, -219387, 80034, -30851, 42490, 489783, 459154, -130364, -374047, -812347, 936607, -930743, 554786, 676347, -380327, -638777, -242390, -931321, 912677, -435943, 596152, -83379, 803221, 546806, -133149, -552467, -474296, -181117, 430520, -435590, 259837, -442213, 350081, -775565, -242649, 802151, -943746, -524610, -486899, -640171, 918013, 168930, -9364, 347059, 272118, 852264, -882338, -599023, -676175, -367856, 146389, -409590, 630506, 788040, 518522, 616227, -508091, -405120, 415833, -264072};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques636(){
        Integer[] array = {-771809, -989714, 227903, -489194, 864098, -212316, 794959, -713958, 104220, 143877, 568774, -622769, -635406, 298995, -230613, 212133, 157043, -430615, -641796, 743898, 496541, -433588, -647920, -593521, 531326, 178725, -207646, -974760, 427444, 313785, -779266, -934189, -562780, 245200, -912639, 722844, 614776, 46088, -837837, 486088, -78506, -602928, -617346, -635298, 991524, 865345, -768284, -552082, 550761, -971162, 702188, -733307, -186053, -918650, 940317, -999907, -466724, 951939, -873635, 851204, -838486, -104032, -647432, -265653, -964935, -515890, 95667, 622353, 640955, 687353, 637831, -497350, -344502, 81093, -485824, -345843, -105516, 703176, -654266, -837126, -47699, -45895, -702080, -140642, -387975, 667654, 876323, 817751, 73008, -276935, -666, -477056, 575329, -369678, -146063, 865410, 894815, 71308, -99154, 587410};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques637(){
        Integer[] array = {-50821, -385214, 190281, -42549, -181228, 544001, -799492, -60500, 765597, -616566, 531510, -730597, -828060, -436542, 432817, -216679, -601684, 711153, -618555, 58518, -911038, -357937, 378486, -383170, -768195, -92803, 682106, 538563, 470157, -735517, -994687, 607526, -803076, 698967, -393961, 471139, -993153, 866864, 281189, -915107, -484949, -900528, -616599, 586587, -45690, -476670, -513185, 454173, 221783, 508728, -383523, 726986, 565392, -776451, 883953, 384784, 429419, -801052, 52739, 52229, 915587, 719165, -585621, 360535, -940504, -505334, -577289, -513254, 320314, -945879, -912747, -990040, -147094, 696313, -919834, 64501, 673915, -960207, -555881, -438844, -568278, -89017, 912246, -454462, 776753, 627787, 26836, -699896, 450357, -655031, -80654, 656302, 663898, 579399, 754998, 880740, -545256, -377059, -707101, -915481};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques638(){
        Integer[] array = {-820099, -633305, 265076, -793161, -461212, 187235, -559228, -43391, -322561, 977505, 154527, 739938, 169198, 367303, 29095, 414836, 293830, 368502, -242287, 464455, 384317, -78161, -502487, -996700, -865356, 872081, -513897, -932867, -858376, 73061, 894216, 477331, -803571, 269381, -545060, 185392, 478263, 505676, 87911, -80937, -802353, -506033, 455218, 902749, 286718, 970237, -27975, 843988, 18436, -899986, 332794, -412003, 789476, 20856, 280548, 597053, 133169, -479344, 175373, -883971, 557842, 370847, 254015, -945419, -552532, -164259, -466087, 983192, 523525, 53012, -244641, 340519, 522310, -297762, 341878, 589292, 136408, 701330, 555890, 354345, -75302, 998188, -103099, 388369, -880534, 613785, 817273, 964550, -653028, -372380, 379695, 163186, 735064, 212832, -356228, 145871, -128977, -515533, 365491, 332079};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques639(){
        Integer[] array = {-274834, -963467, -571171, 514868, -692768, 730887, -523215, 789100, 435844, -880844, 188, 479452, 420228, -816327, -221763, 540176, -33759, -924779, 784062, -31115, -148355, 636519, 263756, 487049, 755669, 574048, 498586, -343921, -577254, 568914, 559244, -178804, 708679, 10919, 15847, -259078, 971198, 850357, 540778, -725855, -179833, 411209, -810881, -488346, -199146, 539985, 848446, -687970, -357437, -462037, -440640, -117452, 799904, 746498, -784897, 413672, -891268, -560964, -934313, -87812, -167258, -318974, 415061, 284508, -853056, 684897, 776756, 595843, 546358, 92802, 329088, 453673, 244292, -433237, 671929, -117243, -148864, -271081, -752067, 961899, -326528, 271816, 99064, 378430, 997425, -167796, 725302, -728382, 524543, -340862, 496984, -8640, -808213, -902814, -614142, 550684, 538473, -264990, 831643, -84163};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques640(){
        Integer[] array = {487471, 621321, 156779, -222300, -71050, 834788, 136942, 957081, 371916, -252162, -716381, -583819, -568391, 718134, -124402, 695314, -785732, -588295, 987842, -813212, -358796, 378623, 112076, -114393, 341715, 393568, 147923, 218483, -600515, -61496, -727108, -853526, -772962, 987990, -545110, 891926, -845557, -340368, -27257, -301530, 818769, 932667, -346224, 787357, 356109, 648517, 802286, -562118, -157732, 551033, 796999, 842482, -834356, 701715, 339696, -538578, 664969, 217743, 653393, -70075, 113998, -422291, 74947, -410330, -427422, 68341, 103186, -407641, -160886, 752951, -39785, 345814, 189640, -872633, -928589, 976797, 154143, -692877, 90768, 637361, 31495, 83598, 368339, -267048, 917476, -583406, -820083, -682419, -695754, 408612, 606207, -184426, 887873, -260802, 65932, 250163, -80184, 284226, -672544, 35662};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques641(){
        Integer[] array = {-211716, 687211, -880075, -903508, -452823, -683778, 25647, -439524, 244530, 592194, 335692, -458511, -199643, 53370, 292414, 153140, 99978, 105417, 823860, 970006, 172862, 465557, -441222, -275013, 316492, 862373, 758463, -101528, -10568, -105362, -190376, -498915, 483345, 158522, 68687, -290469, -915501, 807029, 542689, 694333, -702699, -781552, 27467, -523750, -884226, 582196, 784487, 33802, 156143, 981626, 288276, -52291, -937026, -713347, -682364, 145230, 239831, 221889, -984316, 646371, -813868, -535813, 412116, -541645, 602512, 226083, 284865, 940181, -34343, -994948, 603417, -18576, 233851, -207179, 310081, -161458, -605581, -396526, 395814, -648421, 93683, -767906, -224578, 518035, 852133, 323988, 466967, -789725, 969315, 96911, -238570, -580500, -104909, -377191, 514771, -101619, -768247, -95573, -613852, 894477};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques642(){
        Integer[] array = {-676461, -448327, 134785, -481913, 995774, 558749, -987891, -553570, -864354, -43736, 864507, 103051, -538930, 28858, -347848, -477397, -855, 952256, -713786, 130136, 912577, 76728, 394710, -531907, -903725, 191988, -281676, 625528, 939975, 658548, -979600, -502012, 508582, -990585, -753321, 377013, -799932, 135279, 148910, 845322, -974643, -409174, -595070, 604679, -577313, 315641, -432230, -296009, 31395, -286388, -849470, -524025, 541590, -307086, -869331, 185805, -640850, -43396, 106460, -80179, 494900, 905122, 859118, 851217, -280027, -470594, 704491, 378437, 177573, 281325, -13520, -493822, -56857, -606334, 2094, 802878, 765054, 189325, -751496, -959385, 325084, 492351, -534200, -237944, -450210, -121374, -79048, 429876, 565489, -184168, 12759, -224723, 849489, -912529, -40580, 895424, -595425, -228129, 490765, 500401};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques643(){
        Integer[] array = {539560, -670630, 320320, -93255, 669158, -949813, -697789, -339257, -519948, 978201, -489532, 185161, -590979, -266416, 405744, -253794, 958398, -883687, -707382, 619463, -896288, 305511, 216214, 673717, 566720, -37936, 371884, -313938, 519087, 363875, 654671, -348807, 837223, -322307, 848026, -821418, -867407, -280419, 498361, 130675, 445699, 165901, -870212, -911158, 752506, -177012, 989261, 807875, -277952, 355521, -591324, -286174, -937114, 820058, -424229, 467325, -109896, 983486, 746157, -122200, 326423, 445077, 923680, 513303, 172310, -221563, -968770, 282308, -350606, 493992, 131231, -63243, 78123, -13743, -320670, 153167, -542404, -461180, 691736, -999701, 916029, 26542, -314907, 937828, -390291, 492945, -595186, -438676, 402682, -609582, -130248, 818934, 910533, -353824, -958776, -794945, -899530, 516620, -357758, 110127};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques644(){
        Integer[] array = {177482, -748519, -9885, -505089, 377269, -122701, -682126, -427504, -105224, 935849, 892509, 172580, 130096, 180560, -10187, 713800, 859966, 920788, -705906, -169812, 807968, 739675, -708728, -908294, 583677, -377519, 93849, -881469, -242942, -577895, -65191, 494774, 102267, 640931, -994168, 541495, -472502, -271365, 742033, -97520, 643468, 434492, 557577, 596993, -87575, 217403, 267995, 76369, 256834, 996065, 702529, -734980, -698520, 409189, -346266, 776349, -363383, -182136, 736432, 143798, -601334, 177761, 709428, -248287, -15801, 153656, 40629, -324510, 597052, -541500, -154822, -928586, -46833, 959390, -556034, -460534, 678350, 210402, -9149, -573776, 434318, -1366, 558543, -447464, 740758, 302470, 455309, -529863, 322495, 111282, 990036, -40411, 763294, 347843, -951105, -582136, 151174, 959716, 756354, 520912};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques645(){
        Integer[] array = {983808, -732831, 790246, 174949, -574641, -22373, 361278, 669640, 569302, -893432, 884477, 875059, -945373, -499226, -283130, -237893, 460741, -139776, 66292, 234401, -465101, 272305, -942449, 934288, 363329, -489666, -665717, 371209, -936190, -948711, 57749, 288660, -235099, -455632, -813514, 609096, 667592, 773326, -131322, -813681, 722433, 554924, 527476, 405432, 511798, -584453, 103890, -406740, -294897, -939685, 388670, 146322, 218457, -931130, 817504, -147868, 357371, -263592, 284211, 254255, -691390, 430118, -778272, -184201, -723908, -929072, 651283, 950603, 636531, 722772, -48257, -186858, 623787, 287132, 806124, -355961, 114139, -403186, 10318, 822195, 361636, -392840, 695956, -978582, 34772, 488279, -259137, -164673, 831644, -355548, 932349, 245210, 695054, 443632, -432589, -565980, -427787, 282498, 456412, 240381};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques646(){
        Integer[] array = {-983026, 151026, 109297, 952111, -842886, 330308, 419277, -561552, -236376, -277926, -229211, -463023, 157325, -353592, -471224, 882842, 625111, -9708, 162315, -192251, -376649, -884944, -725030, -24405, 192932, -65852, 247585, 451808, -827415, -843657, -628804, -364525, -792398, 118199, 115533, -363741, 377446, -298026, -961944, -103283, -231850, 22485, 171621, -385710, 44195, 916207, -511153, 166531, -507024, -843976, -418828, -257788, -980952, -796847, -26856, 220702, 681566, 16897, -813900, -541338, 278777, 560724, 875222, -22216, 389152, 667058, 980598, 272078, -116035, -784961, 394712, 449323, -739507, 507819, -319538, -241267, 599121, 525494, -718522, -650617, -208016, 869400, 660765, 594914, 876389, -134007, -197160, 539497, 34992, 162379, -746931, 274505, 375268, -43343, -286990, 468389, -493704, 442340, 131013, -646747};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques647(){
        Integer[] array = {946936, -90525, -702378, 894665, -932844, 973165, -729841, -704470, 864680, 799064, -806079, -592308, 570196, 824291, -327788, -845119, 132792, 608069, 756359, -118705, 332596, 327085, -95897, -492764, 699205, -97804, 734992, -318387, 301594, -623015, 697997, 202704, 897093, -879450, 148718, 614039, -737032, -489975, -753552, 87640, -931514, -945042, -213850, 12167, 395920, 604982, 99709, -919011, 495183, 611881, -373194, 867599, 55116, 348166, 827140, -258088, 481809, 867177, 697081, -235987, 291842, 947993, 997351, -143866, 797347, 924028, 293492, -805817, -816187, 358334, 873915, 948896, -205485, -233167, 69509, -357961, -66455, 72880, 818103, 54460, -620415, 615758, -155205, 240219, -749663, 751477, -626683, 420375, -252828, 95046, 830626, -609779, -643875, 514958, 161897, 550002, 886878, -124000, 184923, -228692};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques648(){
        Integer[] array = {-226067, -483833, -80939, -907989, -183691, -724669, 525565, -564735, -142038, -552809, -794530, 572650, -3754, -720905, -532549, -966066, 67865, 939892, -192715, 486215, -606483, -417034, -994600, -192096, -712847, 723185, 971018, 851541, -402550, -190747, 821738, 816940, 423509, -331201, -754259, -716153, 393001, -356646, 799510, -905311, -406490, 802060, -530853, -725983, 843324, -462030, -785338, 759882, 735737, -235466, -971160, 995927, 917398, -847487, 923113, 817824, 108236, -540430, -172571, 444014, -275025, -123631, -534162, 935795, 957628, -170395, 137789, -49521, 399336, -233838, 944472, 302367, 730495, 980007, -803490, 975124, 380401, -31027, -831728, 111995, -13836, -592106, -86893, -912552, 436335, 780202, 534930, 248199, -988036, -321437, -17196, 424478, -285857, 512336, -264426, 35524, 247045, 496572, 253172, -597937};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques649(){
        Integer[] array = {79005, -563504, -421923, -395163, 27316, -994896, 680910, 665279, 545536, -223284, -117964, -323355, 635690, 14138, 506328, -163765, 329813, 336722, 834122, -207258, 487682, -41881, -642397, 465963, -712279, -685587, 200806, -404263, -876680, -978284, -678303, 213611, 46642, 966635, -708023, 923004, -250020, -101157, -792622, 857309, -274645, -691428, 759514, 993835, -967972, -969771, 985516, -899551, 153641, -851429, -769384, 830724, -865483, 542413, -426590, 478619, 486548, -157803, 844298, 539812, -151177, 528958, -467667, -371679, 952811, 251412, 677640, -838435, 193211, 301214, -882566, 757393, -297030, 69961, -351617, 21108, 147856, 530853, 997718, 268175, 891547, 737368, -924492, 693559, -555245, 356803, 13085, 522132, 418448, 115948, 793609, 47265, 974992, 742986, -285078, -867866, 849910, -937379, 244725, -973835};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques650(){
        Integer[] array = {723325, -681980, 255529, 699525, -590448, 109230, -124585, -789642, -810655, 575637, -463831, -650180, -546961, -310286, 626508, -682602, -566447, 683343, -551468, -862300, 936014, -991527, 659832, 377420, 684495, 596821, 965582, 700764, -754137, 795198, 251564, -106309, 221463, 706470, 789636, -387, -921939, 666141, 449059, 386291, 246282, -836002, -920940, -854688, 240765, 638978, 39635, -739257, 897564, 475327, 862439, 643983, 958668, -782881, 565372, -396065, 950162, -814796, 751633, -598349, -669023, 225203, 493266, 249541, -974789, 825901, 593870, -457115, 659393, 263029, 515392, -11533, 957610, -947816, 368378, -869527, -138070, 420855, 947080, -112055, 91819, 59739, -256681, -688367, 744237, 783303, -489316, 711669, -713995, -520482, -35830, -447278, -315188, -216643, -14294, 760019, 778772, -405751, 999066, -194277};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques651(){
        Integer[] array = {52413, -691968, 414851, 344110, 993529, 188151, 290677, -310650, -79165, 181327, -480865, 778412, 436065, 306876, -66480, -640853, -33729, -694339, -429110, -445391, 236013, 326212, -333918, 330153, -360906, -939291, 810826, -127702, -147073, 590289, 676738, -517747, -158484, -30715, -127760, -474519, -595384, 967078, -260992, 622369, 232137, 991116, 931612, 917364, -281623, -969411, 433908, 304149, -921387, 992822, -591143, -631494, -851221, -764359, 949525, 474342, -661470, -504016, -222252, -772240, -918800, 753855, -866047, 366776, 624835, -360252, 679649, -643413, -176027, -630820, -274015, -463380, -618190, -745816, -96255, -405959, 510448, 283129, 747862, -564074, 600608, -492902, -463595, -910272, 328076, 456908, 696809, 849951, 272950, 944522, -671048, -904131, 941234, 992853, 186095, -202841, 803025, 326277, -400571, 163915};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques652(){
        Integer[] array = {-798381, -744104, 228412, 823242, 771658, -617131, 34617, 612011, 621267, -367864, 606975, -724405, -224095, -226324, 752853, 518837, 885186, -618105, 882126, 43455, 196801, -484082, 637089, -586837, 171914, 66573, -111109, 750341, -790994, 541209, 863965, 801001, -464890, -117204, -206947, 729080, -479039, -958400, -680545, -115252, -49817, 206051, 798423, 213680, 307755, -580110, -72877, -826950, -225424, -959467, 699778, 618585, 697443, -320093, 451489, 513407, -44244, -464346, -417809, -993663, 214667, -81984, 193923, -688447, 768405, -505539, 276111, -709972, -558107, 942015, -259797, -333942, 265459, -874742, -284841, -328588, -175844, -940881, -145768, 200326, -683850, 999692, 738213, 836447, 899115, 855805, -513123, 91061, -727052, 874149, -138938, 21824, 684212, -34988, 571712, 439245, -848790, 620637, 880252, 610084};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques653(){
        Integer[] array = {-558922, 791354, 885842, -913269, 697120, -396872, 686867, -40989, 377620, 368725, 276181, 366823, -101820, 765374, 438813, -529682, 855134, -503891, -769240, 909740, -821842, -126186, -167230, -368148, -492620, -876716, 628976, 861165, -988109, -434618, 37372, -641305, 63823, -686653, 434889, -244151, 483789, -42809, 886559, -549064, -749410, 534436, -275742, 14306, 829936, -509448, -579404, -57923, -105560, 719466, -977666, 560174, 849612, -918311, -477026, -937614, 777273, 144450, 906976, -893605, -890355, -256670, -377763, 104610, -335478, -516226, -209935, 388740, -327396, 937064, -60170, 791008, -652130, 971083, -540998, 885974, 187232, -627308, 769364, -682681, 708777, -811525, -28431, 549180, 501251, -544983, 646511, -396651, -540034, -739420, 978957, -509486, 472930, 627270, -800942, -169061, 779869, 343171, 489763, 979583};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques654(){
        Integer[] array = {189851, -709667, -244016, -51290, 565570, 557754, 657039, 870967, -29609, 984306, 312652, 986087, 277160, -973089, -301216, 157285, -759106, -706058, 976432, -955928, -544445, 398321, -165354, 98898, 989543, 485679, 388240, 54686, 29948, -347645, 555963, -964749, -849913, -700086, 256820, -460208, -330305, -352043, -883217, -764595, 428956, 928732, -594948, -248197, -32222, -924237, -51034, -393792, -697657, 998455, 16913, 182862, 688422, 962379, -211167, -39065, -607246, 159784, 375797, 101741, 518803, -958663, 259701, 255580, 787576, 124820, -808809, 479074, -525366, 857256, -651696, 519319, -421845, -598820, -424555, 892810, -424608, 442971, 578208, 430927, 611658, -51986, 978225, -574396, 315526, 594651, -988740, -402389, -392759, 455507, 421606, 556959, -526237, 524699, -628816, -160233, 270830, -471109, 117080, 678987};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques655(){
        Integer[] array = {-877957, -577571, 127713, 653761, 12042, -689273, 667062, -682132, -341476, 67245, 981856, -912261, -957816, 407191, 443995, -505760, -154882, 430048, 187195, 249227, -705308, 830762, 526503, -214402, 392728, 102107, 838533, 611845, -5587, 354034, -139717, 492132, -591749, 542110, -199155, -894869, -258650, -590229, -325954, 630958, -788178, 887108, 296613, -571923, -312874, 489775, 602323, 132436, 945200, 342983, 820924, -357184, 314, -763793, 578884, 39805, 727068, 886551, -446413, -618769, -423472, 765547, 366519, -636612, -499840, -187107, 269222, -222211, -30972, -768278, -234997, -656323, 249611, -628990, -213688, 867711, -655283, -465744, -975649, -873858, 670148, -168645, -974089, 197641, 520215, 590780, -328335, 219318, -400714, -674223, 676882, -35295, 678404, -493338, -939782, -855781, 267601, -472592, -831067, 826237};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques656(){
        Integer[] array = {40177, -437781, -261074, -898492, -88656, -582956, -238256, 736611, 333885, 317466, -112570, -525487, 136100, -667720, 943858, -291377, -764916, 135378, 292433, -110192, -398300, -583689, 596933, -126127, 788777, -616363, -924264, -22934, -39445, -883018, -768614, 317733, 124335, -828119, -575607, 187182, -928652, -403430, -541634, 469335, 557357, 719322, -21886, 96300, 331758, -85807, 199145, -684302, -316018, -865849, 27550, -835958, -143552, 53275, -784, -114319, -279245, -769586, 478722, 717607, -25938, -506903, 654138, -50856, 923946, 129817, 491773, 678016, -278473, 1594, -151152, 467880, 423574, 299971, 924628, 552007, -351227, -319086, -514979, -9522, 811968, 528695, 417851, -443853, 984749, 145266, 117762, -417980, -653002, -932753, -49615, 63050, -227973, -235935, 727787, -633346, 419323, 775554, -259496, -810842};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques657(){
        Integer[] array = {-314521, 656041, -38314, 353508, 763849, -108475, -422829, 927027, -14246, -349728, -763537, 289085, -982522, -695502, 454304, 27617, 538683, -769939, 507559, -508461, -658448, -356126, -355103, -107810, -738936, -48205, 905439, -761449, 598265, 475982, 904030, 836232, -786745, 904763, -588298, -221678, -669310, -510638, -668852, 724735, 675033, -392565, 673458, -962944, -381174, -832945, -495225, -233632, -21895, -976049, -74101, 834482, -443802, 733969, -854016, -154218, -338062, 470851, 764843, 252641, -229283, -504179, 901019, -727544, -606108, -263344, -709468, 856212, 299861, -82109, 342404, 394628, 331941, 316421, -202038, 837593, 40214, -214873, -655737, 900339, 849115, -869723, -572359, -701595, -262477, -531509, -129678, 373301, 814851, 362899, -345330, 432694, -387285, -981109, -253728, -498439, -582435, 507680, -611798, -983084};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques658(){
        Integer[] array = {-861729, 764115, -685401, 917671, 245632, -615116, -993132, -400915, 352569, -911089, 659981, 780628, -66586, 11495, -462432, 730079, -56872, 481884, -589191, -195959, 171252, -166404, 592333, -82731, 248906, -387215, 708682, 431059, 993946, -758687, -551415, -415673, 993653, -546946, -211256, -234845, -261258, 382990, -914789, 851009, 791777, 156800, -84941, -709606, 65547, 618944, -758787, 63511, 748029, 472888, -839224, -342155, 980468, 566570, 11185, -850821, -604195, -560425, 629358, 83657, 55223, 545089, -548468, 900636, 426985, -917875, 306456, -315232, 831622, 782289, -948301, -686398, -270403, 501263, -478422, -106707, -834283, 926358, -237964, 811942, -996149, -847895, -500781, -789347, -137480, 168327, -723304, -312677, -575397, 378899, -183341, 344700, 913335, 194903, 688152, 578028, 199101, 608992, -413199, 473051};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques659(){
        Integer[] array = {905246, 310898, 399760, -458529, -20003, 639575, 257554, -651741, 276702, 689868, 84443, 189199, 849109, -658740, 980911, 455976, -271351, -419538, 324833, 915992, 401380, 163672, -686749, -274211, 647166, 331986, 768942, 9789, -340531, 448539, 59391, -963896, -356252, -549461, 179392, 39241, -539129, -278598, 49621, -837951, -484366, -892747, -920036, 69221, -865526, 174860, 748071, 808009, 705417, 509084, -476616, -979742, -930629, 206182, 79523, 995146, -319224, -57285, -338024, -227792, -488927, -285428, 926815, 503518, -878309, 75007, -222309, 22032, 765521, -106736, 476767, -743671, -652435, -698885, -112640, 649774, -509693, 167759, -409871, 489822, -146761, 732913, 682081, 591737, 138232, 860607, 491207, -841865, -875691, -818694, 317630, -717381, 78536, 553449, 244802, -739780, 587053, -120919, -67022, 452303};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques660(){
        Integer[] array = {-117368, 978102, 692565, 521050, 96305, -394795, 194186, 241340, -842539, 292077, -678966, 197563, 378991, 743931, 480718, -92070, -498637, 494844, -553884, -935556, 539039, -452122, 87194, 693647, 233495, -678921, 389727, -398937, -35195, -878094, -684728, 211938, -844147, 948356, 745666, 234392, 40613, 426618, -417130, -232924, 128434, -673285, -381084, -297358, -548602, 868891, 442161, -58622, 594309, 44646, 65849, 793829, -580895, 562639, 827595, 436979, 33611, -67852, -171268, 532242, 966462, -247467, -835297, -289354, 221671, 414059, 588532, -502557, 729011, 547863, -723451, -534715, -513781, 900169, 703646, 823131, -595666, 593439, -426710, 251591, -431507, -954873, -105594, -873172, 609812, -136175, 360832, -377212, -989106, 856152, 799123, 193446, -24056, -683412, 410512, -922356, 50591, -323320, 88878, 513154};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques661(){
        Integer[] array = {-154989, 805336, 431640, -612158, -796711, -80745, 595021, 690455, -284163, -389187, -427920, -924928, 116076, 361136, 5954, -640922, 358749, 651102, -180300, -494399, -202250, -624979, 781871, 666959, 437878, -99983, 470800, -671422, -735178, 27120, -518872, 998342, 932251, -248709, 426524, -131753, -125556, 12927, 116872, -433096, 956630, -575445, 198824, 613185, -253931, 649315, -692688, 69314, -969093, -143072, 57744, -973639, 587593, 423249, -10027, 400859, -954525, -281332, -915285, -769317, 586665, -778940, 34452, -431390, 979581, 748844, -747743, 4330, 208356, -730937, -156227, -942312, -746677, -68412, 522772, -396211, -981673, 116627, 731651, 155396, 542865, 631614, 955165, 335803, 422417, 244414, 454315, 494192, -283748, 889855, 982591, -819393, 32883, -55944, -441932, 763742, 663009, -595007, -215808, -478310};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques662(){
        Integer[] array = {800355, 762542, -750879, 828009, 773462, -236745, 992461, 979331, 10978, 842336, -245555, 376775, 674314, 955205, -475859, 168280, 354104, -766492, 766874, 504757, -297508, 730952, -984026, 96039, -757949, 445315, -863211, 823213, 986845, -385788, -44645, 154784, -297840, -248898, 841556, -581818, 328492, 454979, -963286, 148663, -232585, -811750, -412909, -718251, -847518, 743358, 594908, 589017, 623048, -535350, -241953, 23738, -489919, -308012, -329408, 430104, -43876, -900728, -120436, -778243, -521196, 588252, -90489, 952696, 626863, -743917, 131591, 703073, -712600, -830970, 103870, 715112, 129905, -553524, 690888, 561891, -331402, -156985, 259789, 608041, 299489, 509906, -389712, 623857, 251065, 90231, -904471, -587373, -629962, -45241, 214982, -664109, 1519, -446891, -296265, 939997, -910808, 629623, 577752, 768178};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques663(){
        Integer[] array = {9173, -868284, -481720, 837143, -181250, -826791, 883280, -700094, -397775, -852168, 217919, -50604, -535988, 634824, 503241, 595753, -243330, 80126, -565554, 854518, 580890, 234008, 642869, -446288, 943372, -716560, -449041, 967029, 314765, 396669, 49743, -505108, 378500, -28624, -926868, 104726, -908638, -532047, 489678, 901132, 465229, 785765, -594011, 768854, 897359, 665350, 398811, -819427, -76510, -610880, -862489, -890371, -468750, -945965, 507512, 605263, -26726, -712364, -394191, -365412, 366614, 634358, -389025, 647963, -609391, 755620, 403637, 509047, -950168, 340840, 957727, 626700, 554441, -522600, -307483, 309194, -509072, 526985, -727664, -200243, -428384, -336140, -293965, 883095, 263531, 158072, 165756, 481002, -587094, 347198, -594222, 337253, -96218, 425671, -919276, -881588, -374290, -156303, 538434, 592900};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques664(){
        Integer[] array = {85300, 424139, 771375, 125703, -549709, 482195, 810343, -407571, 62121, 435493, 896805, -4916, -353890, 942591, -573045, 841162, 280227, -322343, -359914, 678088, 415580, -106580, -336957, 554164, 660371, 756725, 919297, -363623, -381912, 101753, 24142, 996128, -955474, 13072, -870968, 34255, -727061, 618864, 292742, -178839, 235, -415870, -872506, 824821, -548567, 665824, -625400, -876566, -762651, -317548, 461046, -405635, 99896, -170339, 741686, -369095, 255748, -609109, 183800, -472521, -533496, -726271, 484449, -299856, -55218, -711841, 57156, 634056, -873099, 80001, -574169, 970447, -290918, 324906, 367034, 657357, 690256, -595808, 428222, -425169, -920119, 517372, 75433, -883890, 944747, 617156, 536295, -868923, -15819, 927297, -397857, 300650, 721343, -663484, 1110, 402473, -312730, -223969, -380038, 514844};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques665(){
        Integer[] array = {-721610, 356512, 958360, -342015, 891580, -618178, -995779, 39890, -837870, 705133, -642477, -424184, 417424, -26833, -546949, -301293, 203481, 461537, 655237, 926753, 744664, 594116, 986421, 234173, -419153, 60628, 464855, 983101, 224640, -676731, 185902, 7805, -282182, -589649, -324032, 589712, -977372, -199312, 456543, -319074, 809666, -410123, -310380, -3688, -431454, -188146, 202681, 142310, 401189, -527321, -983700, -859337, 212372, -96865, -680114, -765969, -423843, -650625, -77481, -223383, -790464, 137933, 611563, -544665, -244355, -324663, 530482, -822898, 87798, -23583, -515735, -76521, -638483, -658196, 163022, 709840, -906620, 775385, 853332, -48298, -682336, 947936, -606358, -687831, 630589, -433596, 637853, 410211, -511031, -786194, -184427, 851491, 226877, -114704, -836522, 651493, 596085, -858728, -413999, -561637};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques666(){
        Integer[] array = {151417, 819020, -401851, 219605, -932477, 466595, 727082, -62536, -250640, 477823, 74070, 983936, -781279, -734721, 347048, 968872, 837980, 29038, -83069, 200964, -640145, -543118, -398836, 512153, 705237, 750657, 32052, -898198, -525973, 518524, 228068, 277885, -18430, 888766, -25144, -251552, -180595, 347431, 870664, 297866, -335658, 349169, 379052, -598798, 840017, -862707, -838392, 536022, -201293, 175628, -815788, 209572, -848903, -835216, 589314, -121496, 449893, 352860, 129440, 217507, -677444, 356215, 420104, -580201, 653788, 716909, 431452, -92173, 957274, -208890, 52720, -632324, 459027, -237360, 729880, 897635, 524126, 969915, -268488, -308105, 730001, -550997, 162820, 435967, -129094, 812715, 893434, -517354, 112798, 119945, -911794, 627126, -271038, -846460, 254083, -2704, -620930, -119308, 564255, -721203};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques667(){
        Integer[] array = {-724375, -315456, 405551, 293839, 527651, -805691, 654519, 326292, 14019, -637489, -538225, 460070, 935899, -950756, 61333, 531848, -473469, 70982, 39593, -477870, -554939, -336931, -366786, 116879, 309440, 961615, 548306, -88654, 861833, -258259, 12286, -960115, 493073, -883539, 16057, -196277, 517483, 628250, -736355, -450764, -875218, -997878, 17045, -897053, 412695, 693262, -737818, -494714, 330257, -286775, 71160, -840248, 304200, 394803, 847435, -468422, -686130, -852803, -278493, 760427, -347958, -718972, 313250, -579595, 968999, -67894, 421713, -385237, 103186, -602716, 266005, -523470, 644559, -570220, -867506, -983196, -128789, -245347, -137258, 430306, 370528, -358946, 257208, -416663, -952649, -977586, -580872, -72281, 660965, 703751, -106434, 896975, 596622, 167004, -172758, 599898, -620599, 190064, 880927, -628804};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques668(){
        Integer[] array = {922049, 975281, 869095, 299387, -356226, -76468, -781559, -357391, 550840, 384947, 831170, 732207, 762455, 579956, 811160, 578725, -738986, -439780, 176491, -211357, -33447, -847354, -76450, 872154, 73230, -533431, 536605, 718949, -21487, -107888, -945539, 668386, -33017, -760364, -646774, 835545, 615684, 624680, 141498, -955314, -215400, -773699, 951024, 915340, -299137, 850191, 300568, 308912, -725345, -471909, -785150, 875092, -658011, 8167, -720728, -604767, -767952, -271309, -485965, 531142, -594236, 694428, -733656, 914526, 292087, -84888, 513380, 107937, 129625, -87383, 504235, -20602, 445571, 465562, 619647, 429080, -626519, -861436, -376409, 212760, 259759, -810613, 565043, -250910, 587700, 767819, -865958, -894749, 895324, -443619, -948607, 473119, 329177, 276085, 686232, 398241, -291424, 294370, 349519, 346105};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques669(){
        Integer[] array = {705770, 33025, 720517, 752646, 766751, -961105, 95470, 901618, -729495, 901921, 77214, -833860, -383291, -868648, 829650, -145463, -795071, 176266, -206225, 788027, -366188, -19304, 136655, 1864, 381567, -327951, -819147, -144330, 527849, -175697, -566411, -77351, -34374, 490733, 397267, 323562, 272524, -547010, -671011, -783839, -534502, -651502, -788116, -278742, 71495, -521119, 397848, -27409, 216466, -637056, 341467, 569836, -239935, 900650, -719522, -93818, 963434, -14572, 690621, -988043, -237909, 564659, -586026, 657529, -469365, 154464, 55763, -498241, -814983, 19408, 313906, -476017, 979729, 575155, 698311, 872380, 467343, 839179, -218939, 330685, 30492, -822463, 907799, 713677, 981087, -962024, -136076, 452069, 154553, -491972, -899178, -91422, 363976, -683790, -271095, 453786, -165740, 190626, -988080, -947304};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques670(){
        Integer[] array = {892298, -617568, 738663, -207961, 138758, -86619, 66104, -129011, 954573, 534883, 204146, 734630, 289128, 369664, -294374, -230929, -667009, 844974, 184508, -184123, 95057, -674295, -530692, -472742, 723454, -923063, -604170, 189132, 920302, 109417, -445159, -217488, -619482, 114057, -90706, 988733, -17635, 995932, 169078, 944222, 550171, 719008, -582454, -565963, -862294, 486314, 300965, 624494, -849877, 43898, -62309, 458545, -318823, -190049, -677736, 287092, -959747, 541799, 491744, -799378, -293558, -518873, 822013, -345721, 356007, -708013, -251309, -500259, 948326, -954464, -855948, 714687, -849067, -429421, 239159, 805739, -563606, 623145, 345740, 566646, -327799, 603862, 261259, -655556, -888996, 915446, 378405, 638098, -722267, -98968, -342979, 415379, -254801, -930405, 411755, 926140, 791888, -749482, -933205, -229546};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques671(){
        Integer[] array = {933776, -620745, 823689, -828071, -663216, -915056, -203155, -42254, -294137, 551156, -188149, 334178, -731064, -773315, -259724, -570093, 48422, -38182, 722236, -508911, 291201, -126559, -474733, 25248, -406016, 791237, -294692, 91655, 132922, 137410, -415904, 869434, 914082, -919027, -276597, 888335, 860584, -464384, -403469, -607756, 43806, 188385, 525336, -357310, -876679, 814922, 510406, 44651, -127446, -839227, -928640, 814200, 775147, -101602, 885536, 564746, 298606, 510684, -563301, -205201, -163191, -389767, 890495, 462056, 543748, 605320, -903085, -964736, -688603, 505566, -630766, -288838, 495374, 545301, -784855, 503254, -534235, 336532, -458820, -416238, 252079, 828992, -988229, 813829, -282770, -711285, 183687, -466039, 242317, 596087, 872741, -768613, -125139, -701564, -230288, -16152, -20436, -262016, 354929, 836777};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques672(){
        Integer[] array = {403843, -526780, 702933, 253779, 708979, -281160, 808658, 311783, 733278, -808091, -52822, -874456, 819817, -40450, -981546, 689114, -946889, -308898, 733757, -426330, -179156, -541409, 492643, -715325, -32168, 395389, -762202, 486594, 441951, 881163, 22041, -376581, 704629, -829723, -378900, -434099, -887976, 640342, 843568, 719201, 674638, 66773, 665070, 536264, 558100, 137202, 44235, -579037, -933873, 158522, -507084, -296675, 371966, 138921, -448702, 841195, -975062, 152631, 271772, -476910, 593061, -569734, 295813, -117446, -364448, -152273, 826195, 528583, 100974, 360608, 155352, 895328, 479768, 458014, -380133, -937537, -79519, -699223, -412881, 243450, -706110, -532195, 287398, -828124, -130281, 567039, -15191, -880909, 169829, -394411, 466257, 498458, 174914, 260440, 410708, 255611, 931566, -266368, -371249, 86729};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques673(){
        Integer[] array = {-636504, 822321, -778817, 843698, -202929, 161435, -428614, -2746, -861007, -219320, -661626, -703269, -126456, 692326, -899696, -321007, 563781, -336849, -126880, 342514, 683784, -628629, -292744, -633911, -2356, -414319, 544724, 27353, 521417, -665095, -927167, -263046, -484440, 930479, 774569, 476713, -363561, -858125, 225451, 268628, -165068, 637623, -965776, -390644, -941984, 155999, 405281, -164344, -717535, -234480, 140577, 121024, 383032, 787818, 52532, -448486, -360151, -879250, -418812, 163510, -201702, -261038, -856483, -726984, 871823, -152737, 104350, 5462, -548610, -256456, 143525, 171472, -929461, 504603, -614435, -527138, 208680, -540101, 326033, 524985, -61471, -698062, 588979, 485837, 875184, 541741, 310176, -266935, 35756, 773504, -608735, -570669, -135593, -596691, 141945, -385807, 377881, 505754, -563867, 309653};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques674(){
        Integer[] array = {676065, 836895, 942267, 701005, -561239, 224391, 646314, -137980, 268990, 734564, 130658, -351457, 538350, -531267, 668205, -584650, -821755, 644574, -933000, -508577, 388536, -804357, -812940, -402358, -531777, 659672, -539520, -85236, 946740, 187520, -620556, 728160, -955926, 179719, -149032, -604412, -236865, 350507, 603708, -515966, 807494, 882391, -344434, -528201, 794811, -122484, 114679, -519061, -54082, -612163, -96066, -751792, 788630, 245116, -903829, 662678, -779828, 477770, -874013, 640825, -646665, 185942, 204253, 899951, -499697, 716908, 865949, 267561, 44411, -146898, 617179, 943237, -720830, 632251, -284604, -282249, -549509, -594037, 831756, -421217, 276708, -933273, 813029, 27103, 459162, 932378, 462546, 313244, -202620, -835260, -988851, -40490, 584744, -379641, -328675, -188915, 982282, 974715, -220060, 675904};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques675(){
        Integer[] array = {-319895, -887769, -756070, 635167, 868119, -852068, -21903, 57950, 890384, -20248, -922803, -184739, -125918, 862300, 579844, -591614, 805939, 361714, -802184, 256696, -564065, 465945, -113705, -654642, 968906, 31039, 133209, 46103, -979878, -155174, -227980, 475841, -26987, -241716, 532332, 767607, 57225, 175252, -407327, -183054, 875249, -409937, 704814, 765052, -617645, 27196, 726590, 404405, 646818, 846881, -273074, -852581, 903529, 9030, 258235, -789082, 451396, 909554, 25620, 120407, -275356, -794595, -50883, 753983, 775551, 479922, 949951, -357054, 470307, -817145, -451873, 671597, -659495, 535306, -1502, 304836, -966463, 568854, 577292, 492555, 319733, -277327, 651357, -369642, -562863, -199671, -533019, 444834, 113037, 571542, 6355, 949025, 330091, -149457, -111358, -840982, -766627, -822107, -13500, 977486};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques676(){
        Integer[] array = {-890220, -155885, -906019, -541278, -915991, 467502, 682656, 173861, -66497, -386311, 673525, -114817, 867986, 517082, -337874, -152476, -999581, 486942, -925276, 780039, -701495, -464818, -626363, -235849, -512278, -278583, 980577, 353319, 836838, 152672, -44334, -734479, -60439, -156770, 415742, 69483, -282103, -540709, -204266, 925074, -601012, -298162, -714598, -875809, -343362, -737410, -255381, 855371, -639827, -465189, -78077, 919805, 437312, -854067, 807204, 488749, 340635, -315089, 518186, 590400, -972712, 451719, 711720, 7339, -563955, 358679, -639411, -429239, 221621, 632042, -343669, -724020, -938262, 605282, 760116, -799775, -901451, -816195, 694811, -223091, -449893, -657508, -583551, -48377, -11520, -475392, 380413, 863139, -818046, -69283, 510744, -407489, -150115, -742739, -887671, 343834, 874418, -821971, 28901, 75862};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques677(){
        Integer[] array = {253250, -127760, 458992, 749942, 500768, -334002, -982745, 976526, 30199, -138502, 875196, -104402, 417527, 750811, -318542, 884411, 235843, -133514, 336470, 510541, -649150, 477494, -25167, -987580, -789292, 155832, -875810, -349385, -684809, -431903, 543389, 12175, 735029, 405982, 133804, 672746, -482216, 38298, 92022, 244332, 677837, 770605, 699560, -233529, -817154, 65411, 984678, -802863, -992243, 559840, 199922, 125577, 496980, -492373, 230474, 277678, 697897, 181098, 543307, 915670, 464062, 312494, 953934, 880998, 333779, -137485, 11306, 791637, 187287, 896185, 21687, 993038, -641444, 562329, -71822, -517560, -613768, -836314, -910741, 330172, 465148, -723268, -72830, 980474, -264618, 539592, 150662, 462004, -406522, 803370, 829839, -700891, -411203, -483119, -997710, -29366, -110692, 776554, 362267, 995227};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques678(){
        Integer[] array = {-295720, 344920, 879605, -711074, 371471, 529051, 252746, 508678, -623693, -457169, -882040, 481645, 956080, 742030, -676213, -432476, -678073, -28885, 23425, 591368, -680881, 86762, -975275, -218355, -292883, -607874, 213624, -958608, 623441, 455834, -739670, 445068, -294321, 364186, 174348, 891097, -527666, 350947, 719775, 721564, -151042, 143947, 633171, 655578, 380945, -857352, 933842, -254175, -203076, 295697, -946063, -793029, 861167, 881607, 895240, -348072, 368135, 355301, -109451, 319566, 895952, 260769, 163340, 827210, 127093, -488551, 791437, 909820, -68987, 429091, 781205, -502039, 655569, -515391, -856082, -153175, -694296, 772575, -718994, 426511, -76773, 245448, 417398, -29987, -575408, 407333, -846371, -599319, -147611, 793740, -41257, -873664, 322397, -133801, -883467, 993491, -664731, 959451, 496666, -521250};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques679(){
        Integer[] array = {-802082, 844044, -940453, 190019, -724940, 434992, -653952, 849314, -504985, 173839, 824302, 731285, -702289, 792571, 962822, 14562, -650260, -154908, -71114, -585848, 942036, 3497, -599349, 3429, -986212, 752804, -458021, -672586, 652566, 847578, -309352, -857740, 221787, 984829, 558477, -844251, -324033, 959648, 21041, 313095, -274846, -206669, -107270, 879948, 383510, 182831, 43319, 961865, 940862, 939150, -318132, 316963, 574277, -987793, 471463, -223130, -930052, 339784, 250282, -232002, -376493, 277961, -559458, 255413, 477657, 832901, 232435, 396786, -766411, -566482, -568975, 721712, -287295, 129000, 946908, -941687, -819983, -748001, 123198, 249449, 681768, 814604, 893842, -773839, -971324, 714986, 406582, 859369, -106128, 403683, 576286, -874651, 794592, 547727, 951116, -641885, -569165, 336002, 532260, 740729};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques680(){
        Integer[] array = {756036, 215760, 205875, 512673, -922480, 630026, -405635, -943871, 560911, 861491, -683059, 203889, -789906, 804428, -857703, -902062, 231575, -260, 847240, -790082, -332216, 464435, 502762, -118357, -350811, -89606, 15475, 873788, -79478, 741174, -959573, -302189, 306455, 967648, 591544, -145395, -555616, 503849, -899641, -149260, -584872, 454185, 235671, 749305, 512574, -430872, 308562, -983337, 277129, 127688, -305636, -774629, -100225, 920057, 203155, -648192, -132371, 46023, -39943, 5352, 452541, 247132, 606895, 697535, 512856, 584852, 111729, -394514, -655829, -385503, -828817, 847572, 91977, 318048, -820308, -471317, -371459, -677691, -175978, -776807, 459208, -213332, -926127, 534697, -670801, -197449, -807969, 266652, -157277, -261623, -655807, -568443, 28362, -43522, 127070, -971733, 946736, 424993, -838484, 743831};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques681(){
        Integer[] array = {398954, -457218, 677518, -360915, -70398, -721605, -507414, 718619, -497643, -283430, 667741, 938994, -870392, 812695, -508480, -478232, 124925, 514468, 604630, -264855, -989017, 897306, -433624, -551836, 713520, -487174, 827193, 988028, -990714, -591351, -481789, 662076, 528875, -962560, -731660, -834019, 871350, -585348, -954166, 519579, 757588, -381969, -654667, -981234, 897398, 606268, 280287, 144489, -240092, 745229, 336245, 324706, -643883, 657609, 963220, -798136, 117781, -552784, 289879, -998549, -539245, -884618, 371433, -609675, -421738, -970323, -824454, -423115, -156313, 390707, -659946, 411980, -243140, 817781, -13694, -790806, -241061, 197845, -916574, -629618, 102301, -319705, -755981, 852890, -303318, 101513, 508467, -727732, -617511, -170274, -283341, -176441, 782302, 293093, -609454, 120788, 40591, 797814, 738842, 236591};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques682(){
        Integer[] array = {-718838, 243272, -437655, 284861, 806377, 659098, -222996, 797261, -492436, 477977, 880785, 847348, 146275, -501883, -598035, 868853, 979054, -839146, -912609, -21080, 562706, -392927, -808738, 295365, -803926, -795936, 253711, 234301, -363518, -665245, 921438, -506317, -191973, 681393, -46605, 908674, -88981, -84128, -404408, 732931, 687899, -115262, 225654, 671438, -249883, 977569, 387710, -34746, 424417, 504374, -871150, -791647, 278566, 897618, 637211, 709889, 2958, -917073, 671923, 250133, -2109, -778389, 406359, -397028, -277807, -398524, -3753, 260535, -719238, 78309, -896754, 31263, -129323, 200540, -277511, 479624, -891613, -72640, 832990, -885398, 991943, -170659, -659329, 770683, -956657, -985047, 863523, -109362, 252265, -442680, -908679, 280990, 982730, -562320, -370801, -277341, -237999, 530598, -567351, -567132};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques683(){
        Integer[] array = {549007, 7421, 464523, 898349, -582781, -154134, 830234, -277204, 348882, 1508, -221836, 982280, 974498, -978819, -441426, -740107, -812305, -649061, -645612, -146826, 199503, -839290, 451160, 813498, -852796, -724344, -528051, 170676, -168259, 752907, -158020, 813330, 873229, 634426, 932308, -300331, -199556, 842635, 969606, 146122, -369723, 314415, -786203, -721043, -701757, 597158, 956864, -355803, -102566, 376038, 933498, 116512, 476153, -370018, -121486, -176705, -952796, -662822, -400782, 546868, -628120, 290860, 533247, 859121, 189120, -396036, -193494, 986895, -194526, -552115, 88431, 247358, 48851, -433173, 16464, 108576, 351417, -385105, -976842, 306004, -341766, -9002, 255939, 815226, 328414, -322688, -732945, -895801, -335300, -748588, -57012, 858394, -309820, 14698, -784667, 677544, 159806, 813166, -315162, -524557};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques684(){
        Integer[] array = {-918985, 468464, -568176, 529253, -691781, -577029, 612006, 465532, 171387, -281535, 46239, -10574, 73585, 213088, 3811, 784908, 739421, -201492, -229273, -734033, -357722, -808724, -889788, 106738, -407408, 792037, -142669, -97509, 934423, -130967, -477983, 617905, -124462, 458556, -89147, 628131, -320757, -970382, -694930, -707519, -307980, -956180, 156890, 806752, 157953, 515418, 779687, 982556, -231004, 5620, 725286, 797054, -276268, 384367, 548620, 433345, 702146, -721183, 341712, -586421, -964401, -220412, -595435, 400473, 318295, -128904, 715123, 4751, 502614, -945127, 508889, -592613, -974646, -775789, 808611, 88976, -986292, -81587, -774890, -740498, 307155, -406225, -428703, -489138, -160511, 702920, 620879, -570172, -212375, -346979, 602284, -97311, -381985, 924020, 296230, 744335, 349278, 880766, 969262, 72708};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques685(){
        Integer[] array = {962536, -519810, 115578, -969865, -891044, 199008, 882821, -154226, 646889, 257706, -498409, -532167, -497505, -613666, -624115, 849698, -360946, 29886, 816056, 733433, -915539, 914600, 77100, -565701, 687930, -2014, -810220, -55295, 196476, -379273, -703709, -334961, -642239, 987233, -193424, -661489, -780560, -411148, 605469, -190597, 999749, -548561, -776690, -704853, -745040, 105778, 865909, 30395, 939207, 322671, 246053, -813714, -758859, 764573, -776976, -882712, -359433, 446730, -894072, 734159, 342314, 860279, 288745, -508178, 914575, -45226, -656436, -428251, -535901, -446633, 33977, 377874, 831425, -544734, 95530, 493078, -368278, 85096, -393760, -497411, 65512, 355909, -884874, -17621, -514502, -602053, 190809, 225692, 847688, -504709, 636844, 660797, 485310, 327947, 710429, -391635, 488265, 675536, 351006, 270754};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques686(){
        Integer[] array = {-927687, -933178, -178112, -48930, -286602, 497219, -303508, -801757, -695421, 638187, -632085, -397403, 791443, -342130, -957851, -421308, -392382, 692514, 318902, -378241, 165322, -981630, -784907, 291078, 467912, 612744, -171454, -146391, 747660, 971497, -261448, -899333, 786967, 996447, 499252, 268389, -390455, -947969, -511676, -745050, -141587, -537629, -56762, 703280, 955799, -579910, -285502, 188705, 509826, 492597, 162197, -913906, 796383, -940823, -690243, -320811, -382413, -40032, -101441, -4023, 282456, -674193, -90014, 731259, -190160, -410161, 656646, 810590, -717264, -580588, 834247, 853690, -136576, -670711, 876828, 44598, -606852, 477463, -175442, -655688, 862000, 841743, -442060, 262758, -820298, 70136, 811427, -458928, -437384, -319276, 829161, 203423, 918724, 962515, 46195, 975850, 24406, 145725, -629036, -678584};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques687(){
        Integer[] array = {-752049, 256146, 90109, -371403, 682868, 498883, -561671, 808161, -631643, 770751, 507415, 890684, 676987, 298285, -836595, -880425, 425457, -687383, 343983, 86136, 708960, -356075, -495727, 47633, -293312, -745920, -50691, 597078, -167544, -259874, -231028, 892817, 35740, 249347, -346474, 307700, -501026, 261094, -907355, 823042, 5798, -962255, -442756, 329799, -845234, 883017, 820655, -110168, 401253, 624017, 980491, -365330, -444144, -406700, -613060, -8016, 911337, -128553, 77131, 25826, 689895, -692726, -796997, 68726, -113221, 946645, -724666, -464919, 485319, 760153, -469628, -970840, 581522, 34254, 873268, 817923, -955499, 471008, -370793, 291298, -777171, -100149, 713197, -33835, 774567, -97996, 559369, 51398, 758434, 374310, 215884, 148795, -956818, -8575, -699922, 882096, -803141, -793767, -169164, -845066};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques688(){
        Integer[] array = {258852, 227665, -167398, -583174, -410008, -97559, -383292, -415340, -752781, 334592, -96730, 886050, -646913, 187331, -795566, 675525, 319756, -340756, 90866, -468964, 922675, -460604, -805020, 436553, -867153, -457868, 208219, -963606, -321361, -721460, -924294, 307905, 20795, 357793, -661252, 898719, -549454, -196943, -393542, -903033, -309531, -984619, -545008, -347643, -529875, 414345, 165084, 116791, 529919, 5875, 515189, -986229, -409153, -559305, 962138, -506973, 868729, -426932, -80893, -918152, -851516, 812092, -625597, -71119, 651634, -518491, -385544, -946805, -453731, -851643, 779408, 348421, 16157, -154399, -532011, -606495, 534707, 802653, 293314, 146189, 959142, 151994, -874357, 755151, -587101, 561446, -259597, -324682, -988257, 829699, 231481, -33618, -206527, -807957, 747347, 701942, 906505, 518636, -530897, -37691};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques689(){
        Integer[] array = {938604, 761698, 597557, 742806, -613402, 482394, 959819, 971150, -832829, 632334, -359008, -119480, 694536, -845263, -328472, -971505, 685325, -400583, 912386, 651123, 998409, -294662, -788097, 188269, -667578, 687140, 165892, -227874, -399081, -232939, 813308, 25264, -504771, 900624, 551435, -433402, -476020, -157588, 72027, -5892, 802827, -429833, -314090, 155760, 802612, -336107, -880073, 930474, 994408, 605849, -109987, 672354, 138628, 241930, -762861, -536796, 875231, -53942, 672740, -948963, 631024, 363125, -879806, 634092, -577074, 764420, 423340, 288558, -939021, -174313, -285987, 484675, -417971, 403627, 140270, 162162, 597277, 382483, -539768, 156562, 30619, -817511, 611184, 779933, -345395, -628524, 870534, 462133, 385737, 822544, -220801, 642799, 226705, 928800, 975164, -876343, 600022, 699988, 752562, 745451};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques690(){
        Integer[] array = {-316820, -852254, 904651, 730333, -116419, 985582, -777696, -962635, -403469, -242723, -42156, 516526, 641186, -834817, 243990, 745414, -688479, 330907, 993821, -506930, 419355, -31160, -591920, -316356, -548841, 868693, 609097, -853863, 201567, -882674, 623501, 991468, -329717, -599821, 705900, 205294, 90242, -896736, -768621, 153394, 433710, 853270, 91187, 396824, 652939, 92432, 256945, 919830, -380762, -274360, 949415, -700582, -504589, 263090, -374499, -474550, -48442, 537858, -702818, 102252, 645340, -769308, -19519, -716938, 250247, 156536, -281433, -112902, -566802, -806733, 631903, -560796, 282432, -458363, 458272, 181146, 758166, -767035, 371158, -491469, 456412, -491903, -777964, -502013, 539036, 663880, -188478, -776847, 602307, 921774, 404983, -275273, 80633, 681785, -229820, 263920, 572411, -995392, -486143, -757565};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques691(){
        Integer[] array = {-512524, -852757, 146767, -160052, -5639, 682547, 246345, 214097, 710149, 574451, -673150, 483973, 526558, 639479, -411329, 992506, 244908, -581493, -498959, -508018, 288048, 914257, -735392, -477355, -85126, 768414, 340595, -209013, 696582, -573219, -135070, 313117, 334949, 628238, -161452, 12180, -782324, 658093, 435868, -265211, 268839, -981904, -174839, 14799, -969450, 757161, 918958, 852414, 457131, 423406, 284578, 487869, 680450, -779639, -656531, -219952, 361377, 838877, 847011, -261423, -424062, 136213, 97952, -96423, -813653, -571219, 723185, -110033, 205133, -124101, -847619, -216937, -835574, 476061, -803476, -198876, 384717, -661994, 461999, 867488, -766015, -370769, 987656, 428057, 513753, 908674, -282591, -141184, -760243, 695244, 272444, 889299, -609520, -846640, 268121, -716327, 197847, -155706, -714009, 121009};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques692(){
        Integer[] array = {504680, 947408, 828671, -52872, 213795, -799873, -911680, -883120, 732798, -578459, -196552, 506503, 890865, 699299, 492795, 55584, -374222, -222606, -378115, -662874, -803827, -698103, 499114, 776460, -916783, -250549, 956920, 747774, -690001, 738488, -508358, 270711, -333639, -771509, 850648, -71674, 898657, 448570, -182037, -934898, 52897, 748592, -151358, 450149, 404548, 723091, 763211, -306389, 319033, 219798, -891453, -889620, -476645, -735237, 236936, 784620, 295061, -258460, 355701, 17749, -843493, -752065, -452944, 167037, -596436, 889870, 514527, 265164, 707987, -775737, 729286, -853383, -547041, 126785, 429034, -788386, -79018, -129839, 375528, 466617, 616151, 370069, -113022, -832301, 155480, 210256, 96683, 943905, -436376, 253102, 124301, -314757, 833263, 184189, -317946, -415132, 100129, -757478, -360375, -427520};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques693(){
        Integer[] array = {-982705, -111226, 926514, -35882, -542383, -180671, 886621, -591760, -911656, -375951, 904759, 917646, 18336, 889480, -969560, -239345, -617141, -229583, -166299, 74483, -578892, -259821, 593512, 896714, 633677, 964888, -53774, -424699, -30090, 675545, 231907, 761919, 461589, 208424, -591176, 359348, -502236, -752721, 729894, 954326, -597063, -97677, 126512, -742320, -788069, 179922, 527529, 917284, 538741, -589650, -42122, 76739, 198180, 972166, 644851, -13735, 92723, -660411, -534841, -513292, -95270, -728133, -934929, 112284, 55540, -660778, 373825, -344125, 913365, 816114, -577803, -568926, -535228, -175745, -391624, -758220, -590729, 212612, -975043, 780844, -627496, -778437, -654669, -828708, 172314, -254855, -23810, -43265, -344940, 600448, 632475, 896377, 346606, -79826, 164300, -141944, -638679, -274237, 410663, -705237};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques694(){
        Integer[] array = {621708, -875721, -170586, 872841, 436728, -2379, 739282, -95520, 852560, 513211, -626828, -238129, -552206, -924657, 620708, 421539, 728991, 788174, 586303, 243222, 126758, -172945, 698208, -136198, 876862, -189231, 716884, -402397, -909010, 408782, 381240, 217751, -985673, 114552, -148305, 202297, -561632, 561029, -458886, -520088, 915961, 222656, -514179, 527200, -73302, -212617, -404620, 961685, 751878, -137276, 683909, -837824, -637098, 647964, 154349, 331626, -786771, -73854, -481876, 318237, -127998, -413623, 539015, -63018, -221721, -319069, 625082, -397920, -446397, 927514, 263513, 316896, -909363, 777952, -886495, -987366, -712233, 286364, 410537, -788416, 276289, -22901, 300934, 386747, 118514, -294628, -399695, -652839, 439158, 934315, 639023, -450829, -241342, 442015, 14560, -853668, -142434, -636663, 560778, 596162};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques695(){
        Integer[] array = {810551, 870337, -189285, -181200, 708184, -374675, -517135, 712066, -908212, 486663, -668986, -139319, -499412, 103709, 243999, -766417, 981013, -446174, 670611, -38672, -766862, -183845, -692523, -916113, 201352, -741896, -135486, -752525, -81328, -398665, 354993, 995975, 851018, 978798, -28754, -740772, -929274, -496914, 583208, -659641, -712172, -928202, 177162, 58047, -173978, 656007, 808364, -897805, -869560, -816431, -908990, -738764, 110550, -804320, -981806, 529435, 289855, 346896, -906941, 754359, -529954, -972833, -116326, 637138, 789618, -601609, 551467, 263410, 369845, 18532, -153529, -894135, 489151, -232773, 931977, -4256, -979849, 731933, -449214, 583785, 689905, 133335, -335074, -435752, -842505, -970013, 517390, -373007, -271546, -980687, -902967, 141614, -917717, -224493, -875463, 975987, 955115, 503930, -506504, -866641};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques696(){
        Integer[] array = {-158099, 871741, -148521, 271809, -524622, -890901, 425912, -784088, 8881, 746897, -865532, 908293, -505506, 410235, 406491, -469078, -886645, 212781, 613269, 608694, -453112, 672297, 982624, -415414, -637818, 967102, -119244, -885876, 680885, -283783, -766758, -33449, 346662, 835814, -832996, -91296, -698063, -230285, 784457, 646056, 311674, 224033, -364297, 658430, 406910, -119151, -909216, 914485, 262952, -407211, -549774, -238089, -222337, -959107, -945759, -883823, -982967, -42011, -743583, 930887, 856323, 603881, -761620, 587205, -391538, 177595, -599129, -377422, 576009, 314989, 564379, -671702, 556267, -402838, 272937, -196935, -658003, -573383, -877236, -296317, 433453, 616249, -520834, -984895, -517698, -144923, 738452, -384948, 776644, 135532, 801912, 36263, -361523, 257754, -389880, 468683, 909612, -395198, -734254, 276134};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques697(){
        Integer[] array = {-972182, -480228, -44930, 158414, 168366, -57248, -476580, -46552, -661604, 409334, 266392, 987872, -410738, -261313, 237919, 299201, 570570, -812826, 941831, 689903, -820618, 601089, 712608, -543906, 402249, 698074, -375660, 529098, -994908, -310106, 892471, 811650, -797346, -203910, 450698, -625495, 293815, -135245, 30369, -647151, -766512, -609383, 86187, -106686, 734728, -236450, 811784, 537487, 290617, 890188, -552162, 407207, 856842, 397104, 582946, -585035, 962416, -622943, 295367, 180390, -100359, -461742, 963192, 348719, 720005, -806228, -430126, -823107, -184126, 932532, 847123, 75159, -886346, -440675, 393026, 606496, -770188, 879731, 220964, 972897, -679896, -134153, -327462, 301093, -703907, 127744, 382466, -596354, -815575, -263748, -562881, -452920, -606016, -958434, -145660, 461403, -490242, -19931, 448738, -868810};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques698(){
        Integer[] array = {540082, 71719, 528827, -410716, -38344, -938715, -967668, 516339, 775066, -488473, -673512, -944691, -782352, -837101, 706659, -603644, -964706, 363032, 484900, 940123, -266133, 702160, -601432, 667334, 63540, 998705, -895429, -753936, 214670, 412204, 321566, 273426, -997740, -148395, -816278, 276579, 130377, 665952, -441261, 158396, -687114, -397242, -413194, 284522, -671437, 282945, -834685, 531697, -826283, -106269, -995211, 624224, 72405, 329154, -946994, 339952, -590010, 678872, -45580, 952572, -173140, 64320, -515223, 899254, 990378, -351903, 659382, -806274, 479640, -770382, -718270, 863807, 864167, -186611, -15853, 687901, -120976, 297979, -14771, -385535, -248351, -774608, 41690, 570393, 888955, 748314, -807974, -569391, -514917, -484963, -443635, 539099, 785829, 541444, 565501, 796299, -912820, 177581, 29431, -58290};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques699(){
        Integer[] array = {-140045, -21062, -557798, 505774, -50417, 737083, -588279, 735477, -592033, -638435, -507467, 369046, -979651, -43888, -261218, 885752, 88835, -899450, -436969, 67357, 871872, -591750, -386231, -21103, -808047, -674846, -534642, -916599, -564755, 909477, -812333, -367392, -504397, -395798, 140479, -784210, -959434, -662260, -347247, -86583, 569448, -772042, 42662, -761131, -691933, 28149, 362904, 954694, 915793, 279627, 679432, 777463, 914502, -944756, -242701, 724302, -520310, 1786, 652368, -602135, -506461, 60024, -133556, -395281, 54759, -729641, 231032, -564026, -848679, 493257, -559498, -718737, -466131, 58688, 397124, -765989, 647671, -879343, 47636, -468167, -760665, 401373, 726353, -815065, -459561, 110053, 619279, 351482, -850216, 647012, 889260, -224412, 996545, -812773, 572718, 976691, -163246, -296871, -595877, 159437};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques700(){
        Integer[] array = {201243, 565513, 270516, 148611, -696818, -300548, 493902, -80435, 911516, 753759, 48304, -250796, 371483, 422180, -155682, 559781, 984240, -838923, 780993, -460904, 39962, 428813, 13397, -871207, 332126, 486958, -233628, -177257, -768976, 355164, -414990, 785249, -84660, -39710, -426728, -74840, 424182, 396193, 76669, -967769, 759977, -365266, -186671, -547325, -285206, -220295, -938223, 517848, 206341, -711885, -153137, 921412, -647636, 760090, -724501, 434104, -414891, 843638, -469096, 962487, -975202, -14069, 464213, -844500, 325892, 212934, 406093, -766618, 870442, -865594, -350628, 639116, -626982, 116091, 369044, 476528, -27249, -776271, 909838, -439711, -637646, 364370, -48657, 953297, 179123, 371328, 15308, -577865, 7991, -116088, 52372, -213470, 45580, 852153, 702494, 330744, -968163, -484373, 481599, -433141};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques701(){
        Integer[] array = {28164, -441749, 834594, 255233, -954199, 54995, -377429, 849751, -801874, 806445, 340405, 160088, 995503, 500188, -424088, 369710, 351459, 853420, -643588, -896159, -362117, -973728, -161926, -575171, -961004, -269109, -762840, -337254, -702863, -282286, 788202, 773306, -941865, 772910, 853397, -984113, 752656, -331619, -873184, 207259, 979454, 165681, -690273, 318812, -160898, -464154, 200133, -658585, 287897, -527976, -720597, -199501, -229990, -343235, 964633, -944111, 965020, -749812, 940278, -145251, -109230, -385615, -457582, -680914, -511120, -961333, 702750, -274912, 907033, 716210, 399118, 705444, 5300, -158484, 560979, 936246, 680734, 679115, 667652, 756012, 266816, -506775, -205214, -706039, 259836, -791466, 991448, 155972, 73788, 865387, 352785, 77453, 811310, -893420, -245023, 278532, -355392, 393879, -970124, 612107};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques702(){
        Integer[] array = {318019, -73093, 596493, 413513, -788817, -577904, -590689, 360559, 41816, 10177, -519612, 292191, -680409, 413057, -471270, 540648, 334400, 869408, 758919, 583270, 327815, 781062, 532957, -543602, -814805, 278999, 238542, -592260, 615242, 612369, -958887, 345335, -350135, 140211, -14027, 697187, 599445, -57489, 908438, -402171, -630280, 179154, -576606, -327663, 148685, -795612, 349662, 952320, 271919, 908367, 831110, -752464, 282171, 275895, 622344, 673622, 642621, -858681, 799335, 645537, -835077, -821435, 61215, 897070, 726007, 70577, 207966, 320467, 948551, -283468, -452405, 34865, -24094, -719764, -185103, -880864, 319902, 393155, 582320, -708878, 941015, -263778, 758306, 331800, 527885, -231228, -392833, -690340, -411624, 308297, -481810, 950965, -85608, -922204, -485774, 146649, 568318, 809056, -185513, 514129};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques703(){
        Integer[] array = {616944, 211178, 521628, -900147, 900955, -665975, 798920, -583059, -760814, 973256, -693002, -476708, -540444, -188545, 722817, -814481, -404088, -306604, 874449, 50460, -326708, -287014, 298747, -468981, -330857, -580205, 787888, -904385, 836856, 923129, 689142, -451286, 947014, -718708, -479150, 376603, 308971, 67182, -548007, -133711, 572900, -612843, -967670, 185366, 732786, -356905, -802540, 947050, -874879, 831164, 699023, -163310, -63409, -377523, 836047, -136949, -364302, -341658, -667360, -992793, 681445, -2305, -805294, -774328, -948961, -732778, 996132, -191038, -126314, -300650, 862954, -298698, 173596, -816597, -299203, 991900, -146431, -431782, 941716, 294447, -51022, 84081, -25822, -991917, 894486, -616521, -663827, 387004, -287093, -263505, -884522, -751613, -243425, -557482, 783654, 235413, -838042, 761934, -633116, -246212};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques704(){
        Integer[] array = {-118754, -59580, -364941, 985484, 931715, 255649, 234751, -135584, -509648, -504812, -291442, -162208, 449080, -354590, 114106, 565688, 852653, 718813, -216598, 156887, -955529, -998716, 197840, -177669, 191136, 162503, -245964, 818971, 13953, 425637, 579525, -587463, 62426, -734332, 207768, 946542, -723781, -392288, 838065, -79777, -357108, -313800, -531397, 136482, 76347, 736227, 255004, 268986, 49592, 350786, 855369, -593587, 270465, -403179, -10259, -85527, 184107, -565050, 878967, -483854, -945060, -288139, -190992, -202608, 107546, 165847, 735800, 905812, 609057, 234714, -69914, -785207, 881687, 595789, -161647, 847757, 858672, -682008, -640866, -907024, 176667, 306174, -411400, 271956, -49044, 555002, 335719, 924648, -128843, -453740, -817374, 469525, -497008, 436118, 924185, -248317, -307787, 925532, -464467, -476839};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques705(){
        Integer[] array = {-714029, -933440, -490215, -13409, 370214, -688324, 427933, -849508, 801002, -993764, -444917, 849996, 918008, -663984, -434805, -228884, 226611, 561272, -489493, 98558, -596492, 208712, -111302, -746388, -794294, -715936, -659303, -256205, -578485, -116377, -813112, 796473, -379708, 760816, 642010, 657082, -418649, -316846, -194310, -60570, 275019, -930631, 442402, -89191, -584067, -590049, -778390, 784931, -648505, -715778, 696475, 50146, 858066, 746338, -968122, -119106, 995711, -27381, 605801, -589912, -337522, 978489, -284424, -934789, 658007, -859803, 894990, -261886, -632579, 16537, -439362, -853971, -58001, -233439, -215945, 369859, 709296, 407790, -958234, 933628, -82611, -47680, -562089, -936637, 145458, 273835, -153819, -725051, -394408, -736076, -191927, 762490, 8803, -256900, -451826, 837985, -267830, -496427, 743563, 705698};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques706(){
        Integer[] array = {-481888, 493399, -727705, 356932, -109733, 322087, -213102, 426064, -894520, 855307, 644718, 334268, -626354, -63218, -490914, 749120, 961090, 441367, -590986, -657354, 123997, -674073, 960, 409308, 139824, -670905, -514002, 198838, 611550, -963113, -651910, -297845, 186883, -615655, 316541, -75362, 835702, 454117, 770409, -113, 596671, -312997, -973431, -343482, -496100, 990826, 848900, -250588, -298836, 744851, -588213, -591327, 565934, 635699, 783292, 422284, -418838, -620909, -211520, -854895, 620661, -708272, -761215, 700821, 679922, -64850, 416935, -106666, 229306, 319685, 812121, -46076, -324813, 866360, -338152, 245637, -814876, 642763, -929840, -893485, -768324, 924937, 670, -78273, 681232, 554398, -455469, 890798, -558244, -715391, 493470, 156400, -88179, -154552, -503773, 945390, -840287, 524824, -56953, 734123};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques707(){
        Integer[] array = {918740, 382144, 174678, -51567, 413955, -406113, 231721, -825605, -577325, -189994, 284868, -635322, 703147, -440518, -98447, 296595, -293587, -781902, -995116, -545877, 382305, -967347, 832510, -63678, 774632, 515240, -983594, 474188, -726296, -655960, -868651, 5657, -158353, -814402, 495372, 453667, -72167, -170151, -618956, 468486, -723806, -324797, 369482, -796663, 740153, -124142, 841655, -182918, -111474, -946449, 432998, -393659, -789220, -187046, 899849, -104336, 537569, 906649, 390814, -325772, -683013, 551733, 359589, 518612, -602071, 487482, 175499, 311940, 646686, 405079, -142533, -468651, -89842, -574211, 819347, 698204, -309297, -522938, -321852, -218374, 457365, -849631, -157214, -326392, 999744, -580797, 58965, 406230, 551511, 90686, -923383, 104337, 579967, 670418, 603309, -455708, 97006, 295974, 897520, -380107};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques708(){
        Integer[] array = {913122, -686813, -616178, 560550, 94668, -841140, -313709, 469073, -360766, -636712, 277538, 798986, -241904, 495836, -454003, 993256, -850643, 986042, 377875, -645124, 448358, 150041, -762958, -570802, 957854, 57500, -925441, -490458, -742377, 792414, -779274, -215973, 744464, -977727, -859620, 252584, 612809, 425814, -389392, 827851, 238820, -295949, 799903, -881761, -52259, 823117, -798242, -775269, 171857, 981931, 459008, 467503, 849712, -349052, 893844, -183237, -352329, -286565, -591738, 58125, -870151, 447051, -33589, -376530, -632044, -560931, -35239, -228619, -883934, 940392, -923546, -849864, 105951, 266501, 124657, -369001, -810276, -279574, 560373, -722180, 648450, 869238, 683694, -393299, -534022, 450684, 649298, -675155, 950796, 672296, 470870, -780941, -257700, 149297, -248943, 359847, -867181, 762892, -830151, -422387};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques709(){
        Integer[] array = {-578011, -519149, 902531, -321851, -861531, -350597, -735081, -219854, -28517, 75008, -295294, -381837, 509427, 714090, -716942, 594282, 833000, -376143, 918379, -748536, 659185, -109336, 360397, 883961, 117576, 332272, 469449, 421550, 317734, 751456, 157281, 826065, 97542, 46308, 924894, -897307, 988080, 98367, 13841, -98805, 978743, 455756, 199739, 369326, 698821, -643072, -760964, 253347, -251842, 264784, 620791, 450372, -969693, 729078, 933962, -453, 116684, -949363, -213239, -769415, -57454, 634811, 731635, -314069, 657074, 64285, -430263, 626164, 486465, 856477, 33838, -551553, -691069, 59888, 48977, -826422, -821161, -236721, 782620, -304671, -111833, 164988, 919647, -552436, -549481, -684957, -614255, 963779, -837567, 634129, -13783, 622106, 357768, -739549, -872626, 820323, 119550, -208618, -341739, -128265};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques710(){
        Integer[] array = {-199164, -674552, -500161, -724632, 432431, -477135, 239408, 914059, 270336, -631303, 954914, -623526, 576950, -39617, -833441, -793391, -363948, 372696, 518495, 200302, 676071, -797496, 452990, -674992, -511028, 39750, -951853, 477594, 801481, -733356, -629776, 581795, -316813, -352730, -212695, -150325, -425248, 400689, 908081, 410439, 623126, 331653, -777402, 685879, -929814, 49794, -374691, -784777, 993138, 136314, -629422, 624776, -309978, -750577, 856653, -317251, 898662, 526497, -66204, -523338, -419539, -619008, 15288, 292412, -503716, -865049, -225471, 632213, -898833, 620307, 37055, -495894, -396473, 780484, 495512, -460000, 452355, -130916, -961228, -23282, -798804, 980110, 391406, 695895, -134122, -214170, -6856, 922582, -210921, 976318, 308753, 15389, -779180, -393097, 42573, -942597, 150326, 218744, -596134, 467645};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques711(){
        Integer[] array = {358882, -284484, -276213, -670665, 70921, -223966, -932737, -170819, 236345, -631644, -38834, -922893, 271550, 886522, 25699, 904512, 578318, 806309, -218300, 407660, 128330, -784761, 995255, 688514, -52184, -211196, -121246, 342708, 692730, 756236, -241392, 22053, 839154, 200600, -844516, -866320, 620745, -950791, 770281, -62216, -416925, -130907, 591199, -144825, -85233, -540478, -510353, -221774, -700602, 269358, -907640, 91657, 313480, 783627, 997950, 41078, -147115, 369587, -926570, -314374, -712311, -820462, -627992, -364050, 121042, 66395, -860137, -734948, 485032, 546619, 868380, -787112, 586909, -42484, 834870, -170120, 241314, 639745, 783888, 412463, -492370, -66636, 47182, 772256, -121469, -353967, -249095, -910241, -792149, -777814, -93335, -336593, -985792, 512569, 789380, -732868, -736682, -521048, 469423, -986320};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques712(){
        Integer[] array = {-206268, -754895, -209083, -441105, 860656, 364308, -643663, 964719, 13331, -437281, -511285, 328356, -191573, 430926, 150353, -70981, -586853, 175903, -859180, -806345, 786299, -824374, -183258, 521109, -297222, -665285, -992013, -237320, 143025, -223787, -717776, -830308, -792136, 106852, 95058, -374547, 522511, -93023, -354792, 106904, -977327, 599152, -287525, -744378, 955688, 7076, -596695, -860149, 596782, -419878, 51616, 414098, -367457, -957084, 43124, -783401, -743643, -279739, -584141, 216393, 709126, 224439, -226844, -264254, 152829, -482169, -727866, -677373, 502716, 574580, -196446, -548650, -501528, 320080, -249789, -141014, -638475, -18199, -753274, 543919, -427010, -296422, -439972, 988800, -288349, -664197, -365395, -202143, -409540, -666273, -614850, -458828, -58158, 925830, -719519, -145956, 108780, -314971, -523326, -691431};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques713(){
        Integer[] array = {309724, 738594, 816529, -593776, 550979, -174451, -391787, -658495, -360733, 35515, -114132, 159889, 522154, -547508, -559591, -490443, -141105, 100880, -862767, -896920, -815277, 710440, 349242, 849968, 491875, -856983, -275017, 491883, -395030, -900867, -570329, 241606, -279894, 175686, -343792, 193244, -149267, 909807, 993606, -325285, -803584, 697287, 780117, -95467, 465557, 124080, -988721, 29135, 941946, 87355, 860732, -911510, 725961, -865192, 632610, -865615, 771285, -730448, 113758, -170925, 287450, 551779, -328250, 961663, 278688, 890949, 371230, 461368, 626213, 996323, 763282, -547886, -733401, -730080, 619440, 506139, 943866, -586554, -887684, -628750, 835616, 486694, -417286, -618941, 558114, 574587, 589504, -227956, -555871, 385358, -225592, -609704, 280177, 219967, 504314, -286666, 293792, 165334, 535655, -251835};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques714(){
        Integer[] array = {210577, 193789, 581604, 245525, -139136, -521451, -342362, -608581, -873443, 567816, 132933, 696343, -600427, 555005, -727669, 771463, 259833, 36249, -444501, -104775, 595858, -72096, 158989, 30877, 639608, -536584, -261895, 503173, 119403, -3706, -244144, 245376, 357546, -381012, -167515, -711800, 51497, -169952, 613153, -171061, -72820, 171338, 41179, 547386, -859485, -392420, -482698, -80367, 182261, 306788, 480432, -769881, 913553, -542439, 631600, 777097, 362459, -722941, -138972, 587366, -889164, 144122, 657888, 471841, 306936, 175677, -981426, -250816, -259411, 308536, 714849, 765061, -215389, -690259, -199934, 692493, -54437, 335994, -296309, 638782, -851120, -50411, -352157, 704629, 559375, 353431, -622737, -297319, 845902, 988799, -767830, -629360, 950582, 268675, -140554, -750513, 950438, 42663, -409547, -605578};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques715(){
        Integer[] array = {-868607, 37306, 981945, -512366, 725153, -754035, 679702, -974539, 42753, -6687, 481004, 608590, 838299, 647321, -526346, -358760, 71469, 777940, 856980, 612807, 175931, 553933, -419294, 97715, -478262, -512547, -995766, 50114, 413825, 142470, 772514, -586734, 170218, 803412, 693376, 329969, -555262, -331605, -187503, -520345, -803785, -391513, 127656, -790772, 839983, -212509, 868618, -552116, 946072, 750475, 10493, 930326, -489430, 841107, -924785, 383702, -659674, -935806, 136830, -899735, 602654, 305384, 220763, 701146, 204799, 868878, -830216, -588868, 785398, -662162, 790152, -768418, -741815, 133495, 576032, -42747, -363326, -786514, -30300, 416828, -976547, -237824, -103831, -16842, 877035, 272484, 361366, -377888, 501662, -65512, 561049, 790132, -361717, -412350, 12440, 635281, 476130, 112819, 418966, -982877};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques716(){
        Integer[] array = {777432, -873365, -954857, -444018, -909214, -961185, -824408, -959702, 674906, 518862, -119479, 636651, 188069, 317078, -862534, 752745, -790421, 820238, 121306, 954073, -483077, 711931, -586617, -460402, 758299, -435570, -767460, -969163, -429437, -350624, 714941, 16194, 268960, 872869, 516426, 996226, 662384, -884311, 7894, 806129, -934882, 99442, 800444, 349893, 984905, -580905, -973910, -610358, -298125, -768992, -760002, 829030, 842691, 916166, 702118, -442776, 653770, -937751, -474099, 782904, -364479, 598122, -117903, -41931, -469430, 829342, 221102, 114108, -684564, 162564, -836594, 891051, 273697, -892427, -317732, -852646, -327886, 315341, 751795, -408628, -47370, -965426, 230196, -427201, 917740, -494101, -544741, -579154, 671679, -424579, 624820, -604179, 758843, 20397, -290907, -167212, -937659, 491793, -339040, -41844};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques717(){
        Integer[] array = {-731267, -900054, -882312, 263536, -375478, -571624, 919906, -624658, -766397, -906158, 588595, -62209, -873393, 846702, -106504, 141358, 281913, 820725, 565750, -281350, 679314, -479354, 831120, 750843, 951551, -125144, 94856, -486779, -426581, 155349, 778695, 969681, -204455, 322565, 370918, 145624, -938800, -573561, -346016, -517853, -816338, -828181, -140202, 21547, 114273, -898910, -188014, 908100, 590001, -229071, -768198, 265437, -635288, 152223, -24048, 927317, -779411, 748472, 209737, 392133, -677518, -46269, 73929, 21443, 126142, -862246, -486338, -814442, 94929, -535895, 123914, -677346, 907831, 217799, -839158, -129062, 124109, -150699, 314928, -773809, 393007, 375890, -600136, -668213, 581511, -775957, -500304, -54239, 695562, 460062, -259827, 524046, -439168, -154450, -618332, 539238, 854292, -724309, 377001, 775627};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques718(){
        Integer[] array = {-600249, 649736, -993477, -51007, -53057, 36172, 185053, -58965, -981812, 779718, 540232, 766619, -472226, 15532, -672864, -563841, -88974, -976576, 28633, 139180, 980246, -969968, -245683, -429547, 885421, -183428, -74876, 262636, 898185, -338127, -602547, -926062, 402513, 390335, -547936, -40860, -184857, 41565, -733937, 433328, -187855, -225114, -284861, -914314, -802501, 981472, 65514, 721458, -826603, -392170, -120562, 389393, 910464, 955769, -892083, 262923, 470297, 486483, -687394, -809477, 594374, 110781, -149597, -197279, 65264, -323662, -331665, -319822, -666906, 52877, 162158, 248702, -36270, -754977, -449335, 656807, 666960, 428249, -33973, -898727, -385562, 980303, -588004, -377536, 853624, -208417, -955934, 962155, -894974, 453396, -796428, 230474, -934183, 254304, 987801, -619195, 894941, -741705, 378930, -856343};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques719(){
        Integer[] array = {-189364, -84202, 503250, -443390, 804809, -847744, -160094, 377918, 709224, 602069, -86772, -2941, 903741, -725381, -663381, -381289, -295348, 970454, 11411, 382921, 253525, 894262, -932247, -957568, -83621, -127386, 267338, 547793, -386212, -585646, 378785, -315409, 155214, -499195, -410198, 269451, -811820, 646017, -793487, -660163, -239188, -996343, 551588, 576964, 392130, 382245, 551870, 531663, -360892, 603908, -114931, -75634, -987821, 871499, 505203, -266297, -49336, -509166, 771493, 967376, 222476, 15614, 16976, -520673, -40168, -732410, 846170, 979742, 143044, -260234, 788981, 784742, -961218, -606030, 966972, 781259, 167645, -325582, -1687, 585493, 608016, -938993, 236440, -38717, -941770, -782614, 900155, 521854, 733818, 452467, 353220, 800691, -687202, -135664, -826607, -526575, -767831, 92181, -970377, 740459};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques720(){
        Integer[] array = {916122, -916548, -420226, -497491, 421100, 857662, -504846, 271112, 781605, 63880, 992036, 624543, 42954, -165978, 168637, 60185, -976627, -408751, -503115, 208238, 864536, -938199, -602857, 448103, 394439, 207193, -482270, 210209, -124942, 863914, 546479, -893227, -960043, 330711, -547172, 471166, -383250, -534042, -305709, 826673, 777067, 931513, 784915, 121551, 677705, 972143, 843692, -255208, 498216, -830170, -514656, 929991, 842149, 895035, -575834, -118347, -304292, 413744, -272381, -683955, -691032, 464838, 671424, -498319, -184574, -168981, 964694, 917923, 758604, -886276, -903669, 4661, 803589, -62230, 633676, 776533, 184227, 165487, -94620, -485447, 602788, -114153, -364192, -218429, -737199, 634305, -933831, -41998, 374080, 930431, -628877, 183259, 329761, -908444, -98720, 546913, 518865, 164006, -541083, 960134};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques721(){
        Integer[] array = {601248, -289630, 314991, 653382, -951365, -234707, 927930, 242906, 837017, -218752, -701695, -913550, -441336, 320964, 687199, 641093, -71646, -133246, -340896, 641400, -851501, -450267, -541135, 697783, -222799, -695908, 168065, -513006, 157444, -565647, -770242, 629257, -383029, -142344, 841721, -315152, 152675, -584285, 475075, -590473, 450487, -624527, -869754, 204856, -222914, -473237, 369705, -231614, 458069, -495463, 93554, -785770, 578247, 778460, -223057, -464199, -964213, 745817, -96358, -226834, 639688, 475686, -134446, 463806, 570687, 759785, -955203, -260372, -179508, -579500, 432187, -766909, -418516, 493469, 870233, 812205, 728846, 182684, 470357, 994075, 652674, 159316, 676540, 596129, -947086, 743305, -522843, -436939, 528675, -243695, -281197, 345249, -922018, -192134, -790881, -353049, -539905, 792449, 839768, 487115};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques722(){
        Integer[] array = {-79314, 313825, 959465, -257055, 801490, 81597, 339125, -632665, -220492, -316491, 939175, 862574, -191857, 734425, -24096, -170759, -412127, -996724, 126515, -462720, -298975, -187948, 630487, -898971, 218079, 620220, 268207, 333635, -485270, -673598, -577403, 705134, -415649, -119600, 261249, 240466, -670705, -348615, -802992, 349429, -523784, -257719, -761778, -765541, 957955, -439319, 362359, 288491, 954269, -859593, 936910, 34456, 537277, 85019, 139026, -797903, 367218, 329066, -283056, 134436, -67983, -96252, -953081, -285372, -263253, 971484, -278657, -519092, 728162, 546405, 573285, -572120, 346636, 695918, 754461, 890420, 10703, -461965, -635078, -767912, -586997, 820579, -963749, 558404, 324953, 657942, -613932, -56149, 960612, -889337, -679535, -736919, -769556, 987156, 486186, -632084, 178243, -738592, 921811, -561030};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques723(){
        Integer[] array = {819183, -819571, 809278, -964054, -722472, 634909, 609417, -157400, -725939, 74717, 229010, -995893, -90830, 455144, -235642, -472344, 800249, -225022, 167145, 307680, -660940, 997462, -549279, 147752, 861270, 249721, -881527, 515634, -534399, 238018, 829265, 527773, 189185, -107607, 239961, 284839, 197545, 465163, 121776, -517039, -506501, -391922, -635085, -560438, -11175, -570056, -545417, 104074, 33924, 596557, 561947, 88454, -49653, -347412, 631084, -835652, 765178, 662525, -693110, 394498, -146759, 832723, 569182, 614711, 533305, 617838, -887543, 190041, -297471, 554050, 301975, 511215, 77561, 26010, -200564, -674360, 481516, 65012, 571686, -650372, 63404, -626571, -759453, 94953, 742619, -992364, 339446, 29537, -501658, -20885, 257450, 696827, -412175, -44147, -598087, -329217, -400860, -310292, 371231, -798131};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques724(){
        Integer[] array = {907671, 513629, 630317, 940241, 560695, -895224, 497287, 917345, -18478, -210339, 621790, -669977, -846922, 751086, -584359, -5155, -425137, -900878, -453426, -517923, 510518, 580609, -354176, -218806, -667617, -370289, -883252, -816818, -192944, 558296, 247651, -590380, -480312, -86942, -681518, 98854, 249321, -751788, -687271, -716936, -427351, 991662, 768746, -257776, -33044, -520840, -24907, 755217, -326333, 72004, 512175, -210709, -201634, -983901, 141445, -790704, -526041, 906580, -856824, 119068, 884984, 775680, -757104, -96942, 47790, -867374, -811032, -489743, -480045, 229519, 64399, 502535, -830779, 884520, 788743, -918816, -423985, -545995, 852092, -577765, 161752, 28732, 162160, -501036, 533814, -912764, 427035, 983219, 335443, -446033, -631598, 418017, -524, 886908, 571103, 498098, 358050, 526555, 479162, -615697};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques725(){
        Integer[] array = {-360377, -730350, 432372, -682350, -670876, 234532, 206524, 82309, -225433, -781454, -489849, 565903, -175451, 641879, -541206, -570444, 82772, -281489, -946561, -966360, -102521, 835968, -90817, 301166, -496134, -541659, -92071, -782752, -63245, 223217, 571280, -881048, -300791, 114476, -284147, 125955, 907131, 859358, -83016, -895398, -198963, -383878, -148113, 793286, -566494, -54130, -649364, 564815, 521270, -849125, 782096, -78993, 145153, 635087, 716845, -15970, 239816, -250383, 659774, 645079, 747539, 119695, 452086, -961230, 200894, 75897, 745860, 369030, -409577, 203721, 198662, -328532, 117782, 200643, -928567, -718517, -224281, -958070, -714863, -943597, 357752, 868232, -296105, -859135, -933099, -46393, 638208, -569381, 61789, -962554, -130756, -156274, -990068, -349218, 22225, -325319, 142501, 117344, 445, -318222};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques726(){
        Integer[] array = {-197896, 776917, 137221, -127060, -980959, 159253, 342816, -83577, -112961, 311420, -979714, 835319, -490729, 337654, -999288, -179202, -961598, 433083, -976249, -498727, 317078, 900498, -251491, 860741, -38787, -517249, -210503, -818772, 658848, 488763, -458094, 969404, -968342, -322119, -724683, -528940, 34427, 240407, 210350, 115167, 809538, -983619, -212540, 40156, -289440, -855455, -531511, 929998, -630174, -839362, -822360, -970422, -637882, 153133, 713468, -302950, 368127, 481361, -940250, 390391, 84117, -423528, -999599, -333072, 400533, -425182, -298762, -566092, -811287, -993981, -206047, 747173, -793758, 866430, -363251, -553082, -317072, 523278, 650166, 743859, -401546, -616315, -812681, 460346, 310441, -689113, -472802, -898166, 514308, -39346, 621326, 579318, -293331, -848074, -492848, -41727, -286406, 298475, -491090, -369221};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques727(){
        Integer[] array = {498144, 145996, 586089, 372126, 537791, -660832, -40858, 778413, -117293, -10237, -225040, -911133, 955053, 852354, -716279, 218452, 29691, 801099, -216574, 235430, -625050, -348621, 726072, 240766, -723537, -490318, 329894, 811984, 97015, -72165, -69950, 6939, -173768, 725740, 546072, 273515, 315581, -364356, -595999, 574343, -27154, 73415, 476467, -971528, 710051, 636825, 116352, 865302, -168161, 643822, -382881, 748532, -105382, 37571, -866488, -133550, -70052, 18076, -111610, -536521, 87987, 999440, -734489, 851144, -294412, 133221, -450517, 680808, 345186, 856036, 713610, -907840, 344758, 44156, 840446, 530951, 147014, 772574, -930647, -246810, -410895, -344747, 399863, -813085, 697466, 664849, 721699, -153188, -443773, -79343, 418293, 290052, 209040, 396137, -101150, 920594, 755455, -899165, -277038, -665150};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques728(){
        Integer[] array = {-87471, -284232, 128042, -971682, -741303, -578592, -331865, 797562, -394439, 22748, 741281, -334408, -217872, -184351, -747321, 30243, -838299, 698030, 683497, 276012, -829790, -781467, 680814, 301186, -829292, 636391, 873202, 344179, 689211, -917955, -10852, 432271, 47939, 394637, -743836, -590831, 631788, 402626, -879786, -960966, -450070, 352267, 618181, 851047, -383047, -630044, 344814, 912949, -563504, -119128, 621746, 149510, -866216, 816929, -26137, -427481, 287096, 923887, 329815, -668822, 37879, -596444, 13225, 695219, 422534, -637868, 609243, 50976, 963350, -191344, 37491, 706352, 867850, 793207, -916067, 79410, -129480, 186254, 44100, -112586, 967896, 147481, 187413, 47010, -814299, -385267, 198698, -302558, -177339, 287907, -753586, -10639, 753099, -894410, -152151, -675909, -929694, -745705, -454484, 867511};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques729(){
        Integer[] array = {173931, 877954, -534758, 669757, -307868, -734420, 445353, -552880, 625785, -993467, -923203, 430534, -525343, -189, 112518, -37839, -478466, -140264, 941470, 108294, 566002, -468707, -665929, 713209, 939325, 768134, 193179, 484299, 711593, 605732, 125757, 794948, -804254, 309247, -820380, -124638, 790080, 559172, -315038, 443695, -987190, 493475, 303338, -934741, 468736, -376156, 342590, -969793, 347312, 947447, -209750, 659419, 76699, -57491, 205607, -424513, 526307, -922138, -891086, -867760, 235824, -749861, 777399, 694422, 979693, -382069, -233576, 797445, 38684, 665690, 241645, 358200, 833615, 247154, -528685, -980995, 753367, 830390, 807235, 415079, -389058, 116470, -364005, 514737, -767483, -909753, 103068, -463862, -859674, 527835, -615759, -16045, -243106, -750469, -844219, 662226, 966207, -163234, -993833, 32948};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques730(){
        Integer[] array = {18516, 782295, 239630, 773413, 547843, -256555, -821124, -83361, -193505, -861708, -207763, -498015, 20941, -469192, -642854, -675896, -410048, -755359, 91, 191061, -160164, -618705, 96926, 125313, -977727, 801777, -795085, 995045, 428725, -913285, -282712, 487956, -786721, 433209, 850951, 979543, 964673, 646747, 687862, 633834, 266248, -330612, 114393, 546910, -593828, 999769, -181980, 137257, 162419, 230907, 288955, 684760, 356259, 753994, 676558, -410353, -607803, -331588, -715262, 883517, 550600, 557181, 989968, 484849, -633575, -455655, -312003, -561480, 591889, 364796, -115549, -572514, 828080, -415028, -752483, 787038, -654144, 6571, -170124, -707628, 544249, 919399, 626647, 515597, -151635, 593265, 756033, 558428, -97861, -384063, 800348, 753190, -431242, 887084, -655451, -528508, -212311, -643913, -644344, 334364};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques731(){
        Integer[] array = {-362306, -662274, -703272, -195979, -476512, 357042, 372076, -521909, -776078, 132060, 839865, 433667, -472441, 768370, 850899, 482715, 270583, 724662, -374922, -570830, 288146, 706899, -150501, 982878, 119822, 901469, -600714, 858876, -513804, -829888, 163851, 317794, 7979, -170729, 687575, -76910, -633320, -123498, 242182, 972753, 445276, -888782, 802949, -750059, 989692, 243659, 911821, 909399, 742496, -299576, -538885, -6500, -582814, -731066, 549344, 186052, 224611, -627572, -962802, -113516, 325613, -279578, 231744, 900716, 226715, -695863, -928523, 692554, -221439, 555610, 902880, 240739, 820115, -62509, -168067, -671639, -30013, -669679, 456603, 738984, 158514, 609814, -945855, 536355, -669131, -348124, -104254, -767531, 527429, -821111, -125746, -235641, 223355, 861366, -775516, -416382, 244947, -756839, -262497, 144532};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques732(){
        Integer[] array = {678437, -341743, -404240, 647539, 278903, 759836, -812126, -764836, -258654, -163918, 120048, -528516, -794415, -295864, 18739, -561445, -390910, -171229, -22525, -520167, 459800, 568420, -807054, 732672, -209433, 690988, 876247, -448423, -593987, -545728, 825917, -5805, -167134, -57947, 754962, -263969, 624231, 729604, 555528, -663219, 588504, 600401, 93189, -248978, -159644, 184351, -305074, 170358, -640787, 274308, 730679, -448013, -53261, -16297, -587610, 364954, -980404, -618131, 147397, 229195, -31160, -541684, -557271, -963330, -800022, 666336, 770846, -710303, -91186, 60314, 293199, -107454, 667551, -291825, -119002, 543960, -680075, 984663, 324100, -2123, 585793, -503088, -813912, 802159, 617144, -240156, 290599, 94728, 96219, -336233, 627546, 886177, 627833, -271512, 551532, 868252, 171267, -643869, -235302, 785866};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques733(){
        Integer[] array = {676457, 81107, 74409, -189013, 334243, 770671, -744014, 521661, 261732, 502051, 837414, 915573, 67354, 857261, 919182, 561507, -334332, 621207, 444460, -931528, 951449, 461061, -468988, -280001, -736653, 17951, 854783, -51991, -918891, 356252, 519732, 752894, 601382, -170519, -51825, 823884, 268210, -866293, 721309, -903642, -986428, 386763, 690212, -112675, -336618, -160886, -150483, -664790, 166481, 322517, -441138, -76402, -550435, 690872, 507567, 67569, 153451, 10731, 440681, 314574, -693156, 146699, 817050, -330043, -778779, -179680, 682238, 262747, -368255, -499987, -679178, 955840, 552436, -367874, 718609, 699223, -971086, -232294, -828745, 324578, -926269, 629906, 879133, -445839, -127461, -41930, 355986, -795810, 103748, 589000, -397354, 219849, 467647, -456526, -568544, 466698, 106257, 668025, 380165, 613680};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques734(){
        Integer[] array = {501836, -685002, -1784, 831449, -615739, 290906, -511332, 26744, -521771, -770907, -906839, -560007, 283588, 996432, 774284, 861450, 968773, 412996, 314124, 212138, 582176, 418900, -190957, -318279, 514907, -865642, -900573, -504991, -357053, -460256, 635908, 67641, -28268, 734174, -603367, 47250, 113520, 244122, 384012, -625763, 906111, 253751, 685495, -91789, 827413, -639652, 458650, -54193, 377002, 663028, -876401, 1008, 65961, -953661, 213220, 411067, -656758, -29204, 1292, -557154, -93789, -44431, 587151, -918270, 994362, 695004, -247402, 117239, -999820, 902549, -619038, 297678, 883211, -667488, -455565, -183673, -145952, -99595, 443265, -463143, 681440, -655777, -473659, -231450, 445681, 47081, -655756, -851064, 689468, -970844, -18163, -720347, -48944, -652120, 385040, -831124, 817518, -24583, 867254, -859990};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques735(){
        Integer[] array = {-257059, 809533, -833686, -318106, 866868, 728877, -815048, -158851, 163186, -627027, 400724, 28972, -224885, -319469, 159190, -216168, 773706, -564831, -185950, -810495, -662409, 438465, 578350, -450289, 841848, -450515, 946922, -861976, 386190, 432224, -477450, 501675, -276880, 870327, 396972, -558879, -639633, 781249, 462718, -740008, 183705, -559442, -949749, 482013, 982338, -691815, -270342, -388559, -540449, -407424, -649260, 120594, 969054, 8735, -531332, 476537, -821858, 396407, 151124, -772707, -853202, -366733, 486439, -886924, 197298, -556026, 270298, -918259, 866989, -978130, -775807, -109837, 634704, 224218, 529173, -891602, 109510, 402897, 894345, 804041, -464265, 801541, -353225, 348253, -718391, -304868, -974070, -678604, 811206, -551193, 725238, -33773, -386684, 509948, -50582, -424016, 829574, 235341, -377657, 629089};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques736(){
        Integer[] array = {457103, 611780, 652719, -78671, -493673, -771952, 269566, 825053, 614108, -610007, 87114, -828275, -185569, -280674, 178065, -975466, 366684, 825801, 276952, 66925, -287498, -878092, 664019, 579294, 185707, -644967, -163883, -108703, 175567, 441400, 797727, 401087, 182131, 282998, 815001, 757687, -881795, 615398, 423323, -867070, 21937, 427609, 974085, -239707, 809450, -435621, -119130, -546766, -196633, -45598, 118858, 259059, 849542, 998788, 827224, -484670, -956614, 452154, -693681, -32650, -810693, 299195, -132989, -187422, 39530, -735536, 633865, -975810, 138109, 637371, -661897, -20464, 470012, 15802, 179758, 374626, 489651, 581308, 285659, -973024, -444782, -270613, 222783, -554833, 56089, -146581, -345371, -253927, -509878, -267795, -375562, 313339, -836616, 787257, -141929, 837143, 37705, -262341, 989369, 73944};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques737(){
        Integer[] array = {169167, -396531, 139826, -909004, -205518, -296361, 874652, -205882, 538629, 203480, 792213, -553014, 360317, -360579, 982859, -472533, 735466, 976611, 458300, 814665, 405428, -332627, 782427, -433345, -207664, 316707, 330679, -54641, 629497, 892729, -66610, -803528, -741544, 758598, 959904, -447010, -233051, -294676, 680376, 995452, 847135, 682975, -192871, 47153, 605373, 204277, -361246, -876565, -595538, 279328, 621178, 796205, 617122, 215410, 786522, -298236, 718750, 617542, 238099, -703798, -39954, 462466, 136673, -675502, 804204, -848840, -942570, -577450, -866257, 959712, -87185, -683771, 123616, -301486, -52963, 76925, -659853, -228320, -167511, -183580, 775247, 990213, -517718, 931298, 578753, 564263, 68813, -669999, -137446, -124032, 521451, -340769, 499800, -464699, -764566, -323965, 394934, 20025, -180669, 9119};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques738(){
        Integer[] array = {324213, -985666, 662131, 474169, 767033, 19043, 475047, 307136, -270382, 974551, 823412, -514195, 139824, -758869, 462483, 260154, 252622, -804434, 512103, 634858, 929847, -817190, -96989, 685595, 601521, 508863, 984481, 642203, -860506, -370647, -893490, -453956, -679164, 586929, 954108, -298075, 666440, -930840, -262986, -442721, 285135, 103148, -498597, 344402, -705268, -190094, -740017, 38438, -857131, -169870, -849161, -687357, 352712, -69533, -133891, 681432, -728378, 673826, 680389, 244485, 176151, 484667, -354033, 685473, -476504, 448924, 30068, -341360, 54589, -378030, -507313, 478889, 253854, -503962, 99567, 58342, 556919, -822480, 760933, -317752, 622033, 79577, 693276, -763688, -73355, -984769, -722115, 90118, 9712, -184232, 220508, 925993, 976983, 134920, 762139, 620775, 630295, -98283, -197494, 382012};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques739(){
        Integer[] array = {-672556, 863837, -976596, -584223, -849054, 480855, 75965, -303686, -823201, 682970, -75990, 812491, 240320, 982339, -3766, 824839, 708220, -441658, -61615, -268307, 746567, 440071, -429540, 859969, 71617, 994830, -143094, -49795, 385444, 491313, 200515, -418296, 394412, 2819, -220613, -108168, -833588, -997829, 844264, -168543, -346181, 689490, 252687, 962429, -597718, -928199, 186477, -21864, -673799, -964335, 312995, -862588, 982634, -29909, -897042, 504250, 737614, -402070, -963964, 596353, -911429, -726601, -466253, -300576, -209323, -419566, 366425, 527182, -480091, -729750, 11445, -684626, -590019, -767611, -407591, -40041, 561183, -761752, 800152, -329628, 207211, 389955, -163536, -694552, 151100, 484925, -154727, 415892, -584068, -335091, -645687, -232049, 404035, 82358, -106910, 775183, 54109, 40688, 717830, -383203};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques740(){
        Integer[] array = {-777430, -418642, -617812, 367017, 425003, -942638, 603857, -19530, 564484, 955037, 822603, 100554, 70688, 564305, 810384, 567526, 398844, -126685, 781047, -464263, -788634, -22925, 175239, -47429, 372714, 494984, 501725, 288159, 77002, -780312, 13351, -922949, -199909, -285367, 846650, 346525, -179194, 815525, 544992, -109703, 979012, 584984, -658929, 226873, -250768, -38133, -546325, 661577, 474689, -984376, -611517, 203907, -716950, -682330, -867596, -219075, 157495, 853057, 15464, -172066, 870086, -121842, -710108, -515468, 185330, -651182, -979773, -62252, 327787, -443550, -173281, 364725, 511338, 911124, 646486, 250345, -795232, 26212, 853194, 382276, 633774, 855429, -834694, -413872, 477876, -850389, 759329, -505006, -585932, 643504, 21370, 832462, -186705, -420308, 906213, 246271, -836322, -628905, -786981, -212458};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques741(){
        Integer[] array = {782521, 847592, -329093, 889074, 756320, -912852, -962695, 85366, 948286, -348097, -314208, 28733, 635840, 639789, 13702, -942529, -162411, 878129, -225348, 552816, 709556, 991138, -687843, 158624, 116979, -68843, 500039, -103576, 651271, -996041, -212890, -442398, -74769, -99062, 666846, -64628, 403572, 535093, -11914, 924483, 25065, 200826, -865005, -151265, 167317, 913458, -939661, 964933, -591778, 34602, 796480, -199082, 943322, -189704, -525821, -528207, 464320, 339513, -837312, -645811, 384797, 192240, -925828, -219019, -885376, -69809, -619604, -104565, -433494, -70403, 100274, -242107, -614360, -47713, -322984, -803936, -159349, -53034, 935685, -245728, -802808, -521120, 615524, -46565, 927243, 48508, -450078, 648294, 91274, 301593, 18319, -240960, 716289, -345228, 909936, -934091, 484192, 185391, -837623, -438782};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques742(){
        Integer[] array = {133345, -126589, -291468, -539596, -898274, -188474, 403839, -939294, -333533, -686305, 679599, -383604, -286915, -245404, -876864, 168322, -582810, -618628, -756675, 9872, 290779, 582292, -57280, -572295, 187698, 947954, 328215, -350669, 727884, 820616, 312347, 130711, 317698, 91938, 808973, -779704, -265184, -593415, -168897, -619507, 673280, 205817, -59727, 897305, -793412, 493070, 518593, 792636, -687411, -173714, 554706, 104724, 185166, 940381, -775046, -411031, -732553, 909432, 707591, 2985, -703147, 26968, 166743, 328143, -527062, -634289, -535748, 406847, 780581, 286598, -855611, -350361, 760747, -691369, 402935, 351330, -548903, -193144, -270207, -787845, 837954, -93959, 4997, -556149, -872714, 901629, 53400, -298946, 541587, 302467, -181173, 789153, -455979, -136935, 733153, -390178, 783617, -399383, -291744, -357260};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques743(){
        Integer[] array = {743578, -353541, 313223, 679736, -342092, -806108, 207369, 951192, 199538, -12790, 520474, -401978, 467655, -83356, -494537, -607137, -991433, 943775, 892778, -533954, -527287, 83565, 669437, -539684, 262689, 530181, -395784, -471713, 253262, -532171, 503170, -31531, -602429, 310985, 252497, 797151, -920092, -271089, -283242, 640402, 381892, 542526, 674489, -430885, -450340, -96450, 914189, 359821, 751609, -171031, -897961, -495050, -33030, -909774, -675659, -323768, -786403, 704305, -464115, 514527, -584041, 513682, -856013, -669056, -670203, 128421, 840686, -110585, -65722, 606559, 157934, -91508, 177719, 311391, -857583, -681130, 412239, 316292, -163938, 320780, 109769, -991699, -260781, -50818, -963332, 941924, 470260, 946129, 455520, -867659, 725417, 147449, -201266, -647933, -874337, -241439, 397113, -892254, -145648, -986493};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques744(){
        Integer[] array = {722011, 335277, -536017, -207910, 723809, -111959, 335024, 361057, -782869, 786225, -593835, -243122, -306944, 678283, -76728, -294865, 448423, -5355, -598699, -551751, 368543, 353364, 375618, 97402, 66847, 595368, -973110, -982749, -922763, -447415, -63132, -571717, 597700, 592962, -383994, 734366, -17599, 499305, 999522, 371526, -496111, 911151, -639864, 899311, 937772, 178447, -631781, -390721, -877130, 55160, 934818, 194486, -270074, -150956, -38369, 1458, -52890, -839883, -791950, 252103, 554180, 501380, -216373, -915960, 330014, -193360, 489475, 754619, -881366, -283978, -47322, -475221, -224435, -244959, -721785, 957955, -489711, -565839, -752405, 229826, -191042, 576847, 384459, 707155, 550579, -415671, 64917, -420660, 409394, 15136, 411209, -73762, 209567, -86068, 338375, 914818, 230569, 557350, -843622, -150692};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques745(){
        Integer[] array = {-446172, -436127, 796423, -712633, -310002, 887483, -215442, -929346, -656603, 506924, 950392, -863913, 485778, -478038, -959492, -387417, -891629, -757750, 650220, 328419, 42156, -692918, 598449, -576588, -441368, 785255, -479117, 360506, 201995, 750280, -305055, -465086, -443973, 748753, -603111, 737795, 358249, -294633, -564659, -247625, 453221, -342907, -529670, 245584, 816494, -830378, 601041, 785003, 111849, 824103, -251063, -248242, -74595, -39784, -313403, 695569, -331428, 885193, -378199, 389663, 92170, 305948, 318476, 376150, 49011, 566002, -773289, -492801, -914589, 572541, -371299, -553735, 756062, -59123, -550234, -309920, 84237, 492777, 140791, -245823, -428307, 416909, 973661, 859324, -272612, -886069, -488973, -424988, 316133, 643247, -138968, 887086, 902619, -974009, 691026, 111317, -918151, 944449, -327317, -217827};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques746(){
        Integer[] array = {-31303, 785834, -582295, -895901, 161244, 100093, 999864, 307979, 665051, 418744, -481294, 506934, 614604, 280911, 879739, -809206, 704587, -478913, 642389, 609495, -404722, -779793, -553462, -130670, 818892, 651326, -139615, -666699, -561547, 750634, -516170, -647711, 371806, 231176, 779212, 977820, -440800, 607386, 979870, 315705, 180901, -142896, 564041, 278349, -132383, -406530, 670711, -941854, -314785, 94863, -354721, 804758, -223395, -634462, -692967, 663489, 795034, -182628, -88024, -36546, 753650, -942447, 578268, 651286, -707540, -697740, 686684, -186147, 795259, 323616, -424292, 794590, 78568, 182707, -849817, -106414, 626412, -519227, -710606, -854265, 37155, 622087, 368794, -658834, -823542, -951831, -285800, -796989, -95638, -567694, 670000, -852251, -588130, 292826, 806543, 694253, -383815, 201778, -882461, -446435};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques747(){
        Integer[] array = {-593474, 338980, -353904, 441060, -278456, -71163, 720225, 71007, -764140, 575575, 693337, -95123, 768397, -528708, 946183, -741961, 43302, 295537, -648733, -762765, 104666, 246206, 301658, -514797, -51780, -436554, 7568, -880189, -340265, 661229, 674439, 381510, 184808, -652522, -340656, -174911, 366843, 338932, -328601, -348171, -266579, 255957, -650205, -875816, 227727, -629625, -476535, 905963, 925186, -694237, 357869, -937451, 147454, -365143, 839274, 839945, 312520, -830712, 114792, 344419, -411380, 483280, 444342, -40617, 774765, -864826, -878769, 327783, -608907, -835092, 395203, -833450, -606768, -373814, 393955, -872940, 464082, 456086, -111927, -180116, 282291, -217990, 300008, -51701, -104396, -502720, -219912, -936462, -782020, -727057, -316692, 953843, -200616, 111147, 51042, -956763, 963719, 688629, 175243, -934541};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques748(){
        Integer[] array = {-63393, 375867, 63764, 124761, 61004, -318542, -739599, 579938, -684432, 714293, -500579, -980904, 145979, -175846, 890303, 72498, -279495, -119415, 135961, -447327, -458272, -948723, -672851, -348074, -81169, -617216, 957165, -237714, 424457, -575754, -911239, -270103, -555421, 269847, 184302, 669701, -638885, -807951, -354600, 369221, 376313, -566743, 934303, 948591, 914763, -659560, 786005, -814564, -831451, -335209, -516533, -641300, -37221, -398942, -24028, 906985, 297688, -941748, -336708, 961905, 529156, -944876, -303976, -822139, -96797, -650279, -172823, 536931, 664052, -92291, 798624, -324626, -955435, 67016, 276469, -477874, -674127, -89009, 640104, 193958, 272626, 961396, -579080, -776367, -658631, -926316, -360080, -425972, -27439, -278994, 621387, 153604, -757053, -899544, -962936, -938422, 193107, -376597, -226090, 670895};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques749(){
        Integer[] array = {-507790, 155701, 597530, 425866, 635784, 838028, -963048, -915702, -550008, 345598, -206526, 317033, -24562, -518627, -674955, 830844, -163171, -960749, 37312, -867842, 922707, -878946, 458408, -585075, -458062, 710849, -489107, -779513, 979904, 515530, 120305, -567551, 483752, -313720, 663539, 129731, -858395, -215083, 111051, -533333, -458315, -855227, 767054, -629096, -867339, -388167, 325654, -269693, 923737, 846686, -608947, 889852, -722736, 34504, -946557, -392439, 601379, 487969, -769529, -344720, -800784, -744165, 588369, -836366, -399935, -983864, -503580, 925953, 694677, 573436, 51780, 842842, 738638, 688125, 900635, -980431, 320368, -325789, 973761, 856003, -273054, 825988, -486438, 111216, 340667, -954047, -747806, 560825, -609085, -947208, 985436, -126586, 627229, 594396, -593825, 283203, -323947, -936967, 7999, 598932};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques750(){
        Integer[] array = {591710, 321961, -681629, -301088, 742292, 798498, 629111, 161790, 649285, 25257, -716963, -707658, -273834, 401565, 838950, 178064, -946548, -475738, -866663, -410420, 653641, 205403, -98567, 398234, 813945, 657419, -416812, 518533, -819447, -126436, 228022, 665231, -722688, -848544, 890612, -420844, 292502, 930799, -929003, -685469, -468093, 732906, -123436, 143933, -5721, 998765, 304043, 192873, -986880, 582691, 414033, -108891, -991693, -241804, 999910, -872606, 984324, 561268, -580166, 549549, 141595, 888833, 15889, -67661, -181686, -369771, 490227, -287172, -848717, -245584, -661494, 169691, -787980, 750003, -784130, 832066, 622291, 596609, 185273, -915529, 423914, 170542, -181517, -642988, 202777, 78765, -896719, -936922, 240390, -389548, 589522, -591517, 262269, -634118, -797239, -745186, 634522, 466176, -366724, 581482};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques751(){
        Integer[] array = {-722438, -924224, 129082, -91116, 602672, -521700, -572351, 400844, -96424, 242728, -438855, -808634, -220722, -400675, -895214, -250134, -649765, -83835, -715762, 815678, -956055, 414205, 993682, 122013, 221745, -762908, 431945, -696615, -899373, -295156, 897881, -241996, -334255, -953209, -914621, 709486, 908660, 596187, -513089, -124205, 155460, -492800, -723149, -416348, -613574, 759978, -589843, 191277, 37781, 238394, 801440, -496594, 146599, 381372, -259859, 11632, 755756, -810432, 898913, -79092, -810722, -440758, 447696, -523075, 839368, -541022, -109147, -814396, 783286, -196427, 536242, 991018, 520591, 105412, -464277, 595328, 722511, -680430, 883271, 194227, 776325, 868567, 40227, 87749, 101694, 709679, 338093, 44336, 15013, -795201, 920526, -754031, -890491, 426856, 261970, 621621, 807700, -74610, -161731, 163762};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques752(){
        Integer[] array = {-795153, 336323, -647097, -896973, 767594, -385650, -125691, -942524, -546874, -264403, -996926, -955831, 979567, 453015, 657346, 957637, 95516, -872150, 910911, -606925, 373633, 192797, -840526, 176526, -803826, -44988, -887923, 772771, -922495, 265665, -403867, -930122, -51746, -278980, 590524, -323726, -987388, -465240, -525758, -141992, -836076, 609553, 910449, 858577, -947515, 217981, -954339, -58976, 560323, -558595, -767727, -85184, 486124, -810986, -384718, 337278, -603579, -584377, -897895, 792523, -54834, -639385, -62468, 61847, 116657, -344786, 891568, 801687, 205031, -443695, -856357, 169569, 951338, -67032, -629618, 82233, -889441, -362706, 300930, 969473, -827307, 60376, 180417, 63645, -435912, -852388, -199451, -786256, 244914, 444319, -902252, 562770, -777449, -224484, 114750, 594696, 926637, -255987, 438585, -903982};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques753(){
        Integer[] array = {514652, 343468, -63978, 239991, -130774, -895760, 222216, 567199, -501641, 539236, -397725, -54643, -344941, 450244, 32170, -225414, -348004, 677147, -775648, -177821, -897913, -528873, -820127, 647829, 559256, -432633, 681667, 622948, -651642, -189153, 701298, -167991, 435730, 22440, 250350, 475330, 68726, -156653, -582657, 237001, 215601, -831098, 687075, 848567, 287685, -886114, 628432, 245379, 441188, -562329, -699647, 204417, -127224, 201529, -411120, -525052, 506699, 251396, 113924, 313317, -104529, -492644, -193555, 254091, -495929, -268270, 562749, 714503, -82288, 374256, 171587, -806538, -999505, 244165, -53296, -820014, -600065, -330151, -118819, 672444, 656124, 334118, -937465, 123718, 848781, -894892, 178834, 321431, -605139, -930102, -703605, -875073, -434391, -132952, 110022, -510802, 73488, -467765, -29480, 561553};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques754(){
        Integer[] array = {-744523, 44632, 919485, 537265, 263920, 175591, 360800, 486685, 528404, -692730, -378247, 128840, 590176, 918304, 402897, -24445, 473720, -753545, -198399, -264471, -791899, 682191, 409295, 309276, 418272, -103970, 709932, 862952, 851225, -515458, 498217, -282590, -903593, 163636, -53722, -127635, 555473, -587094, 530731, -374430, 322974, 286938, -227876, 157191, 283366, 614821, 255175, 625607, 702996, 675198, -829202, -782355, -802650, -590322, -22719, 367507, -512429, -132092, 835087, 325161, 772331, 520001, 650392, -183324, -65756, 66233, -278816, -127841, -466374, -595225, 417842, -856085, 917106, 408810, 541620, 937736, 743613, -999274, -207918, -840299, 359147, 740529, -983900, -896076, -475108, -924511, 934669, 755226, 71822, 213345, -139929, -864750, -950193, 767232, 42712, -840664, -443393, 321305, 441196, 590734};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques755(){
        Integer[] array = {-726048, -862437, 850993, 153393, -874710, -504183, 956736, 357526, 574768, 348818, -888736, -187274, -893209, -856625, -738203, -989426, -892076, -250520, 873615, -833605, 181806, 91163, 933322, 640352, 505676, 466772, -443503, -504457, 859178, -226536, -120204, 24389, 628145, 827678, 424005, -751545, 217370, 779601, -557790, 510468, -776444, -977850, -587199, -284782, 501554, 947968, -248679, -428770, 625762, -167421, 172262, -895974, -101920, 773093, -297746, 55982, 802110, -30227, -222130, 993636, -663658, 399724, 747367, 664511, 552535, -505858, -761310, 980802, 389402, -696684, -700798, 81675, 728481, -302769, 295144, 776171, -556587, 222475, 672412, 72643, 66972, 963556, 816257, 358792, 962069, -165145, 368548, -177044, 540589, 619107, -311743, 653983, 879838, -242740, 705588, -192969, 135963, 164436, 999240, 669118};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques756(){
        Integer[] array = {-643261, -909881, -76906, 818001, 820325, 657013, -512852, 464448, -908156, -22072, -421583, -695473, -234834, -505192, 508102, -746170, 446900, 861991, -71323, 404687, 283097, -189447, 100190, 767735, -590628, -865495, 456569, 25913, 743983, 53026, -175794, 403694, 852759, -571992, 730020, 492507, 875291, -376610, -501014, 350358, 134927, 325328, 268836, -397098, 717404, -924056, -243288, 470778, 835164, 748153, -885004, 343717, -776859, -213420, -222918, 276447, 363673, -539185, -217851, 676088, 914963, 43019, 163275, -293532, 961039, -825684, 586461, -414712, -119448, -897354, 431871, 54161, -363121, 815445, -393689, -81658, 414407, 364056, -354980, 754130, -523904, 101168, -633230, -607005, 958051, -272536, 110738, 7505, 12605, 315472, -667110, 445141, 858611, -388576, 192678, 749770, -709277, -745877, -74127, -952718};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques757(){
        Integer[] array = {-315424, -419936, -154833, -821671, -351438, 110998, -235774, 382454, -397267, 776293, 206944, -152802, -188442, -348381, 270676, -337521, -69139, -620857, -44844, 322684, 153401, -602244, -160106, -304313, 639746, -13544, 566909, 644598, -543059, -955058, 122956, -720354, 98960, 633995, -852109, 100098, -816416, -387621, 943740, 260193, -481020, 437963, -391205, -198286, 264955, 121562, 401015, -667676, -970185, -57278, 527236, -249257, 109458, 721361, 535748, 91228, -557379, -664279, -408309, 318904, -510014, -246084, 25903, 68768, 231236, 283551, -603897, -778521, 816494, 26976, -609185, 908192, 323722, 994179, -855775, 871176, 347315, -846739, -631138, 976499, 43663, 533209, -700775, 160542, -773581, 560868, 513707, -981994, -203189, 27995, -690593, 586578, -807511, 152793, -714539, -41089, 587716, -866335, -951664, -93247};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques758(){
        Integer[] array = {-545535, -307124, -373744, -488137, 841183, -72886, 603543, -700229, 316650, 3520, -315506, 653341, -785121, -629020, -961642, -259387, 426962, 157961, 57356, 130692, 602847, 628081, -606395, 62530, 482364, -101030, -185173, 327211, 425703, 586840, 674190, -96820, 537144, 771088, -700902, -106018, 6424, 881587, 373047, -396499, 609674, 601292, 275282, -996207, 968223, 957258, -18924, 976137, 794847, 486498, 128253, -795918, 782860, 713749, 996784, 703097, -217448, -304153, -624561, 946522, -930811, -774100, 976123, -978184, -380150, -862066, 62257, -282060, 7470, -992744, -185173, -866320, 815547, 336357, 673340, -235925, -85284, 239736, 421069, 663941, 45168, 561548, 766253, -875792, -28440, 625122, 578578, 435596, -16315, 430363, 955256, 885115, -499371, 640648, -538716, -698542, 182412, 528950, 872587, 748832};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques759(){
        Integer[] array = {120206, 687825, -455027, -159519, 88819, 214471, 722998, 620964, 783050, -212734, -784944, 543272, -132323, 830762, 928427, 618714, -352153, -596767, 104990, 14336, -254387, -275333, 498363, 915205, 806930, -19978, -152253, -835569, 935698, 51664, 180013, 716723, 312173, 644508, -241423, -861975, -274416, -135325, -366737, 339813, 23405, -59555, 112397, 208894, -772343, 384327, -716534, 77555, 667882, 141604, 270500, -301399, 892307, -689890, 88387, 710671, 777043, 767216, 503904, -904876, -697013, -40304, 659128, 187524, 727878, -593246, 97883, -356053, -391947, 287502, -206140, 674435, 20495, 882563, 560899, -782248, 73174, -897352, -105116, 738142, 513771, 229432, -709163, -898687, -548760, 22696, 506713, -470124, 792024, 937643, -189452, -831024, -626793, 460614, -700664, 811884, 916394, 358261, 321596, -11356};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques760(){
        Integer[] array = {162248, -738737, 179948, 15054, -361956, -507627, 745686, 461582, -722889, 928453, 464926, -71829, 654285, 754719, -338717, 785776, -574813, 59211, -178048, 622344, -674082, -171506, 495208, -44756, -578650, -659101, -577255, 265544, 150496, 906330, -445695, -941488, 458464, -127265, 882337, -945375, 715289, 752689, 247990, 846590, 297814, 356225, 82795, -548883, -957007, 953778, -142653, 268663, -574276, 655536, -520182, -574523, -274768, 771496, 179125, 677998, -795712, -752921, 320954, -97593, 64521, 733457, 639248, -826379, 51565, -857656, 63805, -186761, -979319, 371254, -923291, 65024, 131311, -542150, -810105, -454616, 229031, -327499, 903173, -638152, 793898, 706968, 593730, 440679, 199747, 737795, -459330, 799317, -270168, 363082, 368107, -691099, 866903, -261358, 18271, 467045, -985216, -499498, -845818, -492376};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques761(){
        Integer[] array = {-978432, 796645, -811388, 767542, 430386, -31512, -598776, 682560, 63850, -661301, -556838, 869139, -13131, 784214, 432223, 847238, 52951, 81039, 150692, -265015, 218044, -934277, -32683, -461367, 903266, -588839, -539579, -579566, -321640, -879409, -436597, -879573, 835639, 879855, -73550, 445414, -785087, -860531, -297046, 625620, -654508, 706335, 973601, 970208, 812988, -1820, -611042, 27463, -325372, 466839, -546548, 663171, -694255, 911765, 663859, 979537, 282423, -900421, -34553, 153444, -473559, 287690, 205603, 51001, 727966, -611811, -925330, 813086, 871076, 382374, -869830, -976726, 551649, -236036, 273612, 497356, 101078, -385706, -643874, -698805, 580400, 947378, 615538, -325601, -646939, 540219, -41286, -443836, -49630, -274941, 311924, -496710, 68382, -614843, 193848, -782863, -337355, 597595, -544932, 3786};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques762(){
        Integer[] array = {223211, 139099, 655896, -389634, -248221, 386739, 370927, 767243, 633941, 675334, -154000, 177809, -773572, 207762, 337597, -523454, -270924, -11330, -569389, 656080, 397304, 121584, 532228, -510502, 249883, 843477, 660977, 201514, -366305, -180068, 543916, -243285, 191391, 827971, -185727, -610140, 325021, 323751, -762211, 155265, 27683, -726077, -300645, 845781, 319574, 734642, 425613, 902863, -219703, 237065, 888591, 54788, -874017, -837458, 869403, -775632, 263282, 340742, -838051, 75387, -641422, -132767, -125687, 637762, 728931, -887704, 93457, 650055, -282470, 767148, 60631, 842477, -139049, -148842, -625456, 620132, -97544, -885230, -240823, -986341, -536010, 876026, 550507, 773791, 933891, -635445, -966109, -945284, 604480, 865013, 28317, -188701, 868713, -841442, 142148, 579920, 244277, -938220, -891997, -938817};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques763(){
        Integer[] array = {528576, 678718, -743607, 268819, 268906, 428121, 489780, 165839, -614294, -535638, 538355, -829056, -712443, -209545, 699268, 841143, 322081, -872984, -818460, -626404, 621150, -793790, -899878, 687744, 750620, -109669, -451547, -287573, -666633, 865588, -520244, 175974, 161351, 466114, 819191, 170446, -15516, -516120, 432115, 657853, 694836, 701420, -923283, -907767, 419227, -283213, -420123, 272196, -638489, 932600, 795522, 136588, -615404, -89851, -82910, -98603, -310030, -586947, 681938, -737601, -754635, 796404, -8348, -389992, -685266, 980291, 237431, 726082, 547727, 633151, -60175, 370277, -301694, -429565, 611524, 97045, 590005, -488949, 31756, 969770, -284768, 441922, 291006, -664116, 404602, -403601, 545683, 821182, 545805, 556059, -744231, 832947, 846196, 348978, 949774, 93606, 168333, 876463, 572223, 225918};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques764(){
        Integer[] array = {330191, -807949, 522153, -671435, -597385, -90600, 590922, -7676, -188043, 755832, 931085, -928870, 21072, -184909, 558792, -158443, -570765, 925575, -621112, 539443, 652408, -300355, 320345, 556242, -847428, -128380, 179759, 852024, 485063, -959578, 206579, 6050, -532281, 738272, 689617, -801066, 119171, -145930, 962068, 297564, -690877, -198615, -80879, -562275, 716383, 934817, 123140, 161702, -460801, -984156, -245841, 730163, -246944, -880809, -803137, -261061, 378764, -927917, -496172, -715985, -845238, -167262, 410740, -974617, -943869, 397324, -801284, 915625, -559170, -766637, 159967, -261046, -830917, -617919, -258735, 740479, 57061, -230651, -500445, 870781, -331623, 522257, 129117, -663209, 818031, 146673, -288234, -449183, 729345, -146898, 414521, -254793, 750643, -249983, 122831, 128877, 817974, 18355, -70939, -381834};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques765(){
        Integer[] array = {791174, -901657, 146770, 580064, -841577, 754922, -550340, -537874, -911965, -261784, -737121, 94239, -604701, -883899, 265687, 83006, 516700, -847912, -525223, 514215, -116936, 850406, -730619, 540746, -926533, 659359, -438394, -614448, -513833, -300849, -792751, -367426, -474750, 32065, -404770, 762960, -329779, 24361, -350985, -233931, -243783, -768563, -220923, 398056, -152632, -191403, -843917, 183038, -539074, 856647, 166203, -428549, -258447, 174175, 510228, 278774, -398386, -430222, -662847, -304941, -865276, 406625, 301756, 418742, -227205, 518281, 607132, -598298, 138783, -853390, -286515, -870668, 133910, 482765, -181289, -62407, -131984, 696855, 482899, -300580, 736374, -659940, 45275, 138646, -826893, -97961, -239539, 736936, -292638, -928532, 86615, -404244, 779790, -790965, -230047, -320729, -5103, 249583, -299474, 807560};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques766(){
        Integer[] array = {449989, -684910, 635980, 280662, -588474, 642335, 732772, -480238, 568261, 89140, -89515, 82685, -590807, 146081, -177090, -477949, -208733, -762284, 103564, -260424, 504846, -245766, -730553, 800400, -849743, 355296, 348653, 662291, 421185, -653375, 511858, 888253, 549702, -278118, 257326, 842399, 189026, 384221, -873542, -837596, 456403, -216584, -162173, -673979, -129932, 811629, 351124, 145042, 170468, -912958, -334800, 226828, -85507, 112512, 622290, -20981, -421815, -438539, 703289, 196007, -305410, -178921, -874296, -662441, 620157, -428652, 632965, -584691, 18346, -265739, 468861, 984986, -793864, 904137, 622413, -700550, 173835, 510190, 301457, -691180, 914803, 880616, 1435, 688456, -503599, 832005, 67425, 904920, -291002, 769546, -624681, -521261, 724125, 996794, -324135, -868477, 193414, 71369, -379204, -541161};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques767(){
        Integer[] array = {544774, 442966, -548486, 704346, -858603, 903365, 68284, -429118, 875205, 789346, -448107, 377125, 251251, -310968, -312101, -841170, -567314, 570457, 368606, 248432, -948133, -794915, 688797, 379936, -265701, 882424, -57369, -591589, -733400, -811919, -825977, 249210, 974769, -461829, 728090, 127512, 433072, 908654, 791607, 413144, -366623, 72753, -42718, 397025, 423370, 164142, 518396, 679972, -842167, -926925, 121881, -566521, 113911, 276264, -241750, 73713, 941805, -752663, 854362, -488117, -277190, -955087, -2015, -939782, 167274, 682393, 153480, -656669, -962949, 22581, 916833, -82423, 474380, 359580, -109483, -601042, 579839, 85421, -833568, 385069, 714281, 164734, -103066, -158212, -216868, 955859, 333194, 519663, -4770, -278103, -994210, -389367, 55270, -988433, -884293, 928512, 423035, 561410, 795605, -423393};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques768(){
        Integer[] array = {-718492, 835145, 91524, -472032, -213604, -787251, -710617, 734997, -644280, -535667, -439075, -74038, 843179, -507309, -117766, -921103, 117681, 927277, -215237, -896690, 662313, 40327, -988689, -760768, 896496, -160224, 257954, -739924, 400902, -903004, -489320, -253802, 385208, -533346, 393520, 766693, 314100, -397914, -77910, -345578, -558742, -611871, -81055, 523086, 147573, 660788, -499051, -565605, 643082, -600388, -884221, 983364, -365252, -240669, 389477, 925126, -47990, -616629, 558297, -863464, 911599, 102852, 659189, 978282, 383842, -881032, 576505, -98961, -222240, -759458, 593297, 926502, 663788, 690946, -990297, -162520, 877814, -289482, 393966, 741831, 865022, -191303, -276444, -829453, 407428, -46801, 232277, -79756, 310955, -121259, 180235, 27024, -282233, 570641, 513417, -50574, -58481, 673951, 679286, 319869};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques769(){
        Integer[] array = {427666, -755354, -274203, 500762, 935186, -181859, 801201, 249840, -458167, -130090, -829870, 387263, 661309, -86311, 95176, -345699, -545358, 929304, 51121, 346381, 880548, 460601, 959781, -396595, 434868, 533582, 47941, -427799, 480662, 779951, 920810, 607718, 976523, 723153, 601282, -395024, 446135, -770516, 686011, 337425, 867186, 236891, -67400, 215417, -162459, 985016, 929837, 782541, -622882, -836713, -525075, -314242, -853379, -835213, 940977, -458055, 861872, -820092, 478345, 576782, 868931, 938546, -673666, -987001, 20195, 534855, 81699, -742254, 210498, 881543, 474321, 800346, -918567, -732410, -943568, -737730, -567713, -965425, -957436, 248931, 136777, 643549, -198587, 379453, 327099, -881661, 29788, -122650, -649081, -389795, -190654, 504480, 225476, 13998, -405702, 720938, -407174, -978158, -163210, 656080};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques770(){
        Integer[] array = {465055, -15961, 880853, 548461, -986764, 151257, 669093, -234945, -72452, 79128, 473163, -166416, 193044, 175258, 919780, 292094, -625559, -364275, -585292, 112638, 526551, -166213, 901038, 346740, -382552, 492229, -357695, -580173, 24358, 591408, 137179, -58283, -243670, 985894, -616511, -420335, 278785, 784224, -568797, 649723, -944186, -843965, 382572, 912697, 563370, 12206, 267769, 882272, 60736, -563602, -937289, 127139, -857612, -618641, -171405, 141567, 954567, 889564, -677914, -774705, 743661, -27106, 835759, 638973, -830012, 142733, 945038, -446891, 346715, 516489, 335192, -201906, -163187, -631359, 839963, -634163, 413774, -347541, 534760, 779696, 564003, -806957, 456953, -556327, -573532, -423482, -349793, 281832, 75207, -665740, 387642, 642334, -912795, -40554, 621928, 210597, 600509, -325159, -16351, 702006};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques771(){
        Integer[] array = {277745, 793415, -641834, -761044, -385632, -291213, 489667, -841742, -129673, 108160, 975787, 810785, 369084, -280425, 80965, 376824, -263998, -255951, 783042, 107199, -763802, -615546, -895033, 210140, -40249, -860472, 891209, 813703, 789918, -300940, 948030, 926749, -562119, -848936, -793154, 442765, 345798, 774529, 776039, -502256, -688959, -158912, 745208, -164171, 536291, 21349, 808460, -449934, 611806, 472997, 356790, -65383, 411546, -535869, -437133, 722027, 953908, -125149, -876556, -429891, -477398, -202842, -377883, 528664, 233121, 406326, 273003, 595262, -844853, 9904, -68824, 657959, -920470, -621144, -599015, 802408, -177536, -342970, -844945, 93470, -54546, -83986, -951565, 224764, 718755, 677441, 208657, -799824, 180591, -30031, -924126, -164899, -989295, -97181, -388827, 221658, -35668, 611444, -795160, -829617};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques772(){
        Integer[] array = {320158, -968987, -837574, 147324, 769443, -456032, -974359, -182324, 224532, 879606, -600044, -898529, -35209, 694696, 228964, -86189, 283012, 530256, 634434, -662837, -417229, -744527, -139216, 818504, 179834, 723767, -493958, 973199, -891387, -198789, 897922, -584476, -629261, -670066, -830735, 346868, 828499, -26113, 371509, 575211, -268568, -846790, -154216, 173974, -516707, 170286, 31845, -6188, 286668, 923011, 419656, -83539, 236070, 489172, -607450, -814187, 26161, -988442, -134938, 543814, 79715, -231224, 837518, -203461, -989507, -146283, -522117, -366948, 598861, 633650, -325226, 773012, 152819, 900612, -177677, 573682, 616637, 169515, -939818, -28727, 35825, 790753, -273740, 473436, 440222, 874175, -14692, -139535, 676873, 52331, 3744, 31630, -977279, 776123, 947809, 141347, -327672, -361045, 441659, 306886};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques773(){
        Integer[] array = {448330, -485035, -835315, -868868, -669410, 644704, 352900, 365766, 751600, 778091, -814715, 105948, 243754, -604089, -740642, 771245, -313787, 512841, -870105, 603136, 257400, -126294, 773037, 811532, 234680, 360981, 864512, -770713, -516906, 77117, -261638, -466661, 607442, 105426, -670735, -647504, 791212, -342648, -356503, 352312, -528704, -58085, 798929, 696588, 546053, 847400, 389054, 89718, 554110, 897868, 19855, -82333, 532201, 747766, 127490, 630888, -650054, 378744, 719756, -90178, -89715, 619050, 625298, -548656, 15751, -937999, 222697, 862308, -74287, -234899, -46398, -350992, 440075, 785102, -642634, -947926, -936512, -930534, -352741, 520090, -967592, 686886, -443769, 317176, 135414, 592226, -795941, -463236, 11963, 356938, 668545, 349755, 462493, 429660, 656191, -313042, -159210, 323917, 897491, -769795};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques774(){
        Integer[] array = {-34043, -653548, 900279, -169981, -228776, 386418, 287230, -315373, -37263, -539847, 451223, -332639, 100078, 79368, 729899, -680967, -176356, -50111, 406555, -163973, 240141, 375757, 456075, 260392, 286089, 999227, -493438, 673200, 218699, 815481, -218138, 761340, 902632, 631377, -489280, -605516, -198502, 94617, 878944, -652048, 801267, 950843, 329980, 460778, -400901, -323617, 24818, 1340, 506705, 795227, 895515, -77114, 363681, 918210, -496449, 953919, -199214, 615164, 294552, -730278, -445598, -368533, -299566, 963383, 231567, -906747, 72649, -709146, 836405, 688400, 992492, 642036, -381054, 979842, 823166, -958286, -800937, -300136, -895442, -66797, 614335, 631096, 3111, 460694, 493187, -710925, 72606, 602526, -183872, 35093, -991939, -201288, 963079, 25185, 760934, -161478, -697706, 99272, -685130, 635854};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques775(){
        Integer[] array = {53166, -627880, 902384, -378417, 144438, -373819, -236632, 186285, -237867, -530537, 410385, 251602, -792363, -684533, 910096, 117553, 729583, 306554, -767775, 789292, 919438, 67666, 914842, 786441, -873759, 937951, -932668, -789288, -792323, 54379, 856981, 60262, 446772, 987357, -433145, -269907, -665001, -499174, -608474, 549627, 295535, 680677, -306091, -399826, 852749, 842882, -909096, 433123, 694639, -233348, 625813, -897342, 423772, 612352, 538375, -242025, 717930, -565209, 487380, -648517, 633929, -144846, 36458, -862499, -594258, 219049, 963780, 160213, 639051, -461037, -226644, -347420, -84723, 940719, -330460, -360393, 160021, 465282, 999148, 664581, -791166, 496087, -431376, 447213, -704064, -472095, 989110, 839104, 341390, 892574, 981984, 885184, 499608, -225985, -664900, 456540, -124269, 93532, 320308, -58356};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques776(){
        Integer[] array = {-124527, -82320, 819625, -363746, -336122, -397407, -343062, 17573, 273241, 297183, 134995, -918743, 139747, -366095, -490975, 929322, -462333, -607954, 839936, 476728, -233258, -210972, 831886, -694572, 693276, 455152, 348598, 261579, 596204, 473815, -998396, 561380, 213728, 126373, -625469, 391007, -123336, -647661, -126922, -53830, -848636, 691325, 612422, -56583, 258755, 6124, 467966, 332570, 760391, 43948, -333714, -48801, -862920, 517362, 819360, -481838, -251593, 253103, 482644, -733826, 830048, -445418, 296254, -927025, 57188, -340681, 355223, 876363, -845289, 719711, 153829, 252041, 931190, -700620, -728091, -903587, -260724, -208515, -449784, 781919, -759935, -16416, -122338, 772449, 88810, 675198, 534373, -249746, -366220, 964322, -138074, -880480, -270925, -939104, -589663, 167892, -553563, -230008, -710631, 525328};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques777(){
        Integer[] array = {-187742, -647702, -646295, 531466, -747522, -743969, -961693, -339513, 168509, -451359, 659780, -692695, 176187, -438608, 125964, -801231, 504190, -773965, -172131, -551952, 837772, 868520, 67943, 490891, -49981, -380511, 883752, -287201, 443691, 819224, -46531, 577340, 660850, -303867, -578767, 576622, 682263, -124904, -575854, 599873, -695095, 422471, -506264, 849744, -803541, -830535, 144672, 214997, 454476, 442120, 865387, -799135, -822308, -816007, 102245, -153746, -212556, -666713, 881524, -326990, -298857, 131358, 512685, 93179, -422737, 875016, -429496, 45897, 398776, 396586, 453902, 647908, 22043, -887291, 933610, 34427, -161300, 49044, 438212, 133123, 251115, -63032, -476949, -245815, -826428, 541400, -217, -736883, 65408, -960407, 233354, 8260, -720396, 731052, -32374, -689317, -135307, -277846, -253720, 56506};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques778(){
        Integer[] array = {418119, 600100, 626014, -753609, -138867, -239422, -908911, 766356, 311899, 371390, -956988, 141539, 373424, 49314, 977596, 188061, 451462, -181957, -596668, -367282, -172192, 517287, 862247, -957966, -606577, -233884, -285325, 644945, -559378, -973319, 857147, -823780, -388359, 871482, -523563, 396045, -664440, -43121, 201035, -150807, -78740, -912567, 725486, -211749, -198127, 15998, -923451, -350847, -841547, 826793, 28150, 231872, 92605, -289428, 958530, 749788, -982930, 722811, -603196, -711903, 187830, -739780, 555435, -369926, -288224, 226390, 98066, 875467, -646586, 323616, 584907, -263483, -142971, -159824, -733682, -55023, -626826, 3050, -435380, 34749, -737388, 117172, 681076, 140321, -753805, -510762, -828554, -379465, -819745, 609019, 392272, 930476, 797296, 197072, 265870, 907763, -235672, 717798, 442521, -31555};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques779(){
        Integer[] array = {584696, -815047, 83137, 512379, 840994, 361497, 997474, -905452, 910410, -125823, -934656, -736368, -570224, 712513, -746097, 338594, 473562, 552852, 441937, -931882, 35630, -905412, 843921, 484272, -138393, 927002, -116041, 7983, -59567, -987421, 192745, 861410, 520878, -872805, 167094, -921124, 777518, -694401, -525889, 441907, 413428, -165330, -125850, 341043, -777933, 865857, 301916, 520152, -206462, 461682, -620577, 380129, 226906, 396493, -487510, 156159, -839424, -542593, -711821, 594051, -860974, 828201, -348041, -466177, 912889, -725032, -759655, -973729, 164839, 257174, -97983, -75158, -371512, 174275, -778053, -821237, 947754, 990537, 517027, -467478, -260264, 109828, 651515, -944156, -688252, -375445, 346772, 233598, 794171, -994977, 67904, 181752, -366749, -762847, 431325, 404935, 95855, -553896, 306919, -289197};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques780(){
        Integer[] array = {-668553, -220030, 90886, 452188, -768410, 83786, 34070, 594821, -260834, 333346, 106258, -763758, -201932, 386356, -364706, 419922, 238904, -414579, -661301, 536675, 463961, -924834, -228717, 540057, -87500, 517594, -156911, 936379, 529870, -124252, -772682, 327093, -361744, 235407, 622643, 944981, -395230, -817646, -440236, -122713, 41541, 138686, 159712, 211470, -101074, 155375, -451865, -538570, -890663, 486655, -596844, -549359, 423425, 66368, -753696, 726474, 644401, -842162, 766162, 45213, -101835, -826121, -446219, -739384, -923685, -686803, 826673, 678674, -546683, 529554, 184682, -438492, -65692, -211375, 262233, 688332, 75963, -805106, 420408, -673553, 287004, -131194, 543097, -181654, -785516, 865407, -850674, 178033, 135019, -214854, 712432, -447439, -716691, 141218, -694557, -741048, -256745, 231437, 115132, -94736};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques781(){
        Integer[] array = {-599079, 956962, 84577, 607204, -779759, 387057, -133199, 428911, -687836, 723913, 1136, 986485, 945494, -711034, 892874, 919964, 495212, -540557, -843456, 532167, 433743, 454265, 641130, 53090, -82770, 608117, 32001, -923588, -712739, -597515, 48200, -334777, 589397, -493830, -453224, 996391, 358136, 321151, 905663, -663190, -771999, -283573, 934515, -482032, 926880, -573205, -941928, -296350, 600491, 448659, -503012, -277984, -658126, 104636, -46489, -931260, -980597, -69964, 845274, -826248, 744949, -27939, 862904, 935079, 965604, 622583, 219880, 683207, -173762, -599857, -973991, 354521, -831167, -977833, 971042, 169669, 709861, 838178, 580254, 905921, -835207, 865305, -477400, 269229, 641092, -234562, -432730, -534943, -643819, 123048, 577539, 470620, 635664, -234993, -391599, -690641, 675811, -297273, -656630, 947710};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques782(){
        Integer[] array = {-859710, -373504, -160790, -15988, -389744, -905805, 395359, -462635, -743408, 312259, 585088, -693104, -68346, -996997, 217325, 652720, 473029, 711460, 206032, -452913, 846117, 450398, 510273, -731360, -500856, 89660, 990753, -745315, 199918, 695785, 902165, -16080, 790512, 751917, 773324, -62931, -626699, -631480, -91693, -777308, 347606, -393, -325019, -696040, 865122, 403847, -991278, -151392, 56466, -968682, -525343, 811859, -332694, -869866, 373997, 681761, -92499, 642243, -266649, 751207, -981738, 818761, 172432, -660485, 990700, -139579, -717626, -425269, 92673, -585870, -336333, -613645, 330180, 938066, -492762, 733449, 848048, 758224, 346274, -73629, -812753, -945521, 757459, -266708, -501917, 187964, 46565, -216111, -465711, -381258, -227513, 445399, 469666, -140265, -645514, -172364, -40774, 43896, -82895, 219768};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques783(){
        Integer[] array = {371647, -262831, -924514, 793033, -155511, -453620, 182205, -923029, 993891, -630411, 804035, -517095, -206121, -142231, 851599, 441417, -421193, -928942, 758404, 924369, -549489, -965500, -117800, -294541, -94527, -283571, 874582, 555856, 414438, -388530, -642912, 29478, -707373, -616482, 758715, 721133, -702948, -312890, 336057, 601114, -317287, -10439, -325954, -442303, -956361, 348753, -827128, 869459, -3690, -680813, -183003, 668983, 60392, -144889, -257492, -91364, -658261, -625762, -463775, -252466, 256593, -87974, -59029, -25635, -919122, -365428, -514906, 608553, 419288, -723983, 386203, -309444, 582204, -371741, -575066, 363116, 372292, 98017, -876674, -691679, -641527, 219342, 833785, 725381, -183669, -887758, 508101, 17286, 525286, 858530, 85379, -932696, -92582, -929871, 77326, 512248, 146898, -461439, -54207, -181919};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques784(){
        Integer[] array = {511537, 233859, -223162, 349385, 59318, 829385, 106681, -400743, 256181, 793050, -21657, 189299, -31441, 241483, 247412, 646963, -95879, -905052, 990467, -346215, 821735, -181773, -418018, 185825, -451510, -904998, -265001, 820128, 610041, 708099, 202987, 970568, 260175, 824621, 834129, 358961, 172816, 595963, 678635, -814076, -842403, 202297, -628074, 605534, 118104, -355659, -256041, -689317, 89662, -299867, -691554, -958369, 311125, -387305, -755729, -90941, -75221, 881318, -233476, 761136, -477518, -922207, -513864, 97553, 769108, 982450, 276903, -527266, 808016, 631173, 200936, 539843, 322806, 938859, -904295, -875161, -932729, 569639, -296031, 177122, 840326, 423828, -894067, -239591, -779081, 228154, 813733, 720185, 600424, 310582, -704572, -12823, -60364, -72066, 308790, -111186, 593811, 508408, -842356, -564698};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques785(){
        Integer[] array = {-857890, 882584, -533124, 427262, 709346, 224042, 231435, -168544, -834338, -957588, -729462, 323702, -914201, 250864, 599474, -582069, -917236, -263053, 621867, 214349, -777783, 732273, 427483, -768020, -210715, -739255, -19739, 958919, 94586, 140787, -877384, 854962, -817574, 727739, 948654, -257756, -3059, 66837, 428602, -544014, -796233, -758686, 306684, -64180, -614286, -484684, -215631, -298689, 101407, 884456, 338422, -771049, -851844, -718729, 746302, 267526, -492510, -528051, 938075, -296922, -587778, 672759, -963626, -977763, 289155, -152103, 155694, -805899, -731242, 505911, 90311, -200100, 495822, 238055, 825230, 280320, -641023, -222863, 527077, 701244, -17089, -958926, -537832, -405990, -75864, -383104, 641068, -450628, 165695, -773952, -275076, -57305, 216728, 999783, -896845, 212905, -827241, 807966, -122226, 55970};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques786(){
        Integer[] array = {-565504, 160040, -28827, 691530, 892530, 936660, 867241, -998026, 638839, 449429, -870286, 724257, 738079, 810813, 145968, 439121, -633059, -229303, 894075, 279407, 562092, 324340, 316412, -297357, -881911, -138137, -757317, -596420, 922610, -328124, 222532, -892411, -136057, -204561, 469913, 391999, -633860, -12730, -882712, -169426, -664079, 777787, 906539, -888364, 841677, -173821, -978486, 522539, 435094, 731927, 866091, 581773, -215803, -546347, -949203, -648157, 108188, -511158, 993112, 887318, -415707, -264983, -540807, -782157, 375480, 407743, -242560, 535102, -659213, -828717, 104699, 262673, 874905, 663227, 8391, -944466, 904429, -269305, 446255, -682143, 578003, 523195, -289980, 333160, -880036, 417439, 715262, 282932, 474268, -405859, -967796, 735815, -832699, -619550, -317990, 406899, -640960, 630780, -968585, 737489};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques787(){
        Integer[] array = {102252, -83832, 343059, -681554, -309578, -108285, 226775, -351088, 963312, -863657, 185733, 16260, 332619, 191945, -241838, 395327, 755352, -459769, -982360, 135496, -446594, -96266, -444638, -715480, -452135, -686212, -383268, 174076, -4733, 262308, -913613, 976073, 581973, 363188, 745944, -900149, 577559, -242977, -98130, 350213, 160186, 930477, 266445, -442591, 108567, 623764, -371791, 512629, 177704, 22847, 511781, 108434, -613006, -837734, -331468, -655914, 558930, 910824, -944942, -12050, -934334, 6431, 879868, -638927, -943605, -360857, 880180, 948513, 797714, 890604, -734245, -344840, 928842, 292104, -506684, 766402, -78049, -141561, -474491, -565166, 670551, 627485, 938990, 742903, -724680, 295712, 726566, -194144, 861644, -533366, 371907, 767724, -365100, 761361, -791964, 137278, 281692, -564918, -656866, 347984};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques788(){
        Integer[] array = {368498, 159040, 134078, 172186, -723103, 753502, 635967, -508455, -145567, -636358, 470574, 456077, -559926, -274698, -356740, 82240, 607060, -251203, 571170, -435219, -784299, 832926, -62005, 521605, -148844, 229545, -927221, 254107, 267474, 977964, -464536, 721107, -901357, -174865, 535077, 353292, -562911, 455853, 247368, 499852, 194135, 64183, 234377, -192737, 493932, -150645, 590036, -451096, 911269, 714058, -11876, -701513, 131723, 681546, -122084, 481615, 547263, -502548, 648539, 927200, -978560, 5798, -653385, -740028, -754662, -559897, -911237, 532924, 150163, -28678, -174419, -257700, 581069, -916639, 934979, -690087, -605769, -69159, 483018, 356881, 895267, -859758, 354381, 422126, -74202, 862846, 996713, 75222, 19055, -240922, -746873, -548794, -676964, -325039, 423035, -822077, 278975, 657864, 852346, 166746};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques789(){
        Integer[] array = {-218643, -812536, -918036, 113212, 515514, 123764, 951689, 370732, -222158, -928154, 813303, -520318, 852963, 719468, -869151, -603861, 859815, 10816, -173114, -635360, 336128, -839523, 3535, 135875, -78040, -365018, 267369, 644094, -663144, -53184, 800401, 372719, 300256, -162526, -582627, -253251, 207213, 96937, -831720, -897510, -146989, -780217, 235617, -445332, -335787, -393832, 794254, 621822, -430671, -89687, -972231, -127689, 750622, 103925, 957684, 848379, 177713, 273860, 241770, -368033, -674782, -762240, 76703, 145236, 21517, -810294, 442065, 794381, 727369, -80160, -14396, 817965, 244630, -153074, -728511, -458865, -748660, 360413, -2020, -403875, 784123, -477946, 284934, -809549, 834251, -293237, -133425, 211390, -88866, -125784, 328499, 746072, 201954, -444446, -372874, -632200, 25780, -461952, 64102, 485011};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques790(){
        Integer[] array = {85559, 262923, 671703, -35095, -680406, -50262, 542777, -690823, 692430, -315598, -797358, 175082, 37498, 69560, -15231, -88542, 712894, -390159, -513859, 790642, -25836, -444531, 963431, -5803, 454631, -671066, 953555, 601842, -614079, 718119, -915116, 280041, 499075, -889512, -590543, 89591, -881355, 825436, 525772, -602760, -435726, -312252, 638917, 621082, -92056, 941837, -686103, 19408, 736524, 88444, -989620, -283083, -792354, -154343, -803002, 630366, 36291, 118813, 767623, 21038, -507979, -32356, 774031, -33629, 73567, -651618, -804632, 696373, -61696, 24310, 860689, 381565, 673449, -319741, -460612, -51832, 235341, 503710, 12648, -832217, -613470, 427316, -305952, 870461, 635685, -79456, -671566, -704829, 576722, 808410, -374096, -601560, -807279, 800561, 800481, -249373, -905346, -578172, 839234, -200976};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques791(){
        Integer[] array = {-587798, -520459, 828131, -810188, 742050, 162261, -525125, -359319, -610418, -363791, -930274, 974032, 195705, 817167, -671466, -257666, 919417, -740470, 947741, 466227, 716431, 612306, -413892, -545279, -396486, -507147, 104680, 254081, 10836, 611033, -621628, 43141, -999503, 257554, -654821, 18855, 307824, 92572, 826664, -897734, -427086, -358552, -435157, -603968, 774171, -838402, -273508, 432020, 185551, -186595, 780651, -710798, 331184, -950318, -310256, 332503, 793837, 78217, 732564, 507181, -765455, -629934, 40840, 363901, -606331, -822843, 656728, 835776, -670799, 556912, -254864, 119714, -204117, 657835, 717246, 317470, -337201, 917479, -547900, -914657, 147771, -820635, -14379, 555880, -253283, -87529, 710197, 224344, 28579, -979711, -251286, 136359, -743008, -862659, 875122, -650958, -138585, 304293, -608797, -16806};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques792(){
        Integer[] array = {-803826, -905869, 878948, 878819, 383654, -545735, -94911, -998432, 411942, 867268, -992753, 691603, -927167, 696456, 423002, 669268, 331251, -315737, -396474, -573200, 829609, 103978, 676155, -774535, 933695, 938096, -534988, -980959, -153111, -71655, -73142, 441455, 199908, -57151, -776243, 269162, -282711, -108198, -6355, -392519, -797057, 574667, 615210, -905346, -200269, 371954, 818725, 582054, 971894, 340835, 344308, -67928, -776451, 117814, -254268, 456357, 272282, 239291, 385037, -134028, -19545, -924456, 86134, 850588, -370132, 234649, -455295, -668091, -515210, 470154, -929706, 543000, -64580, 957725, -936439, -759629, 601232, -912047, 360446, 858181, 159321, -351970, -680643, -169713, 190840, -750891, 831383, -446347, 410611, -742743, 499583, 968445, 587877, -308523, 940488, -78812, 303283, 75234, -665370, 647616};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques793(){
        Integer[] array = {-577413, -404443, -763357, -227773, 674562, 438774, -304399, 322930, -438530, -643146, -912433, -780555, 637844, 400276, 761235, 918078, -855155, 627565, -55382, 169887, -300015, -740265, 966855, -790676, -332983, -192665, -214676, 923688, -361681, -620541, 745351, 86486, -153783, 914892, 394043, 380496, 708853, 760717, 458583, 3556, -663841, -314951, -237001, 134602, -336128, -224302, 40005, -159561, 711554, 440738, 379404, 929933, -590827, 458664, 536907, -759466, -759815, -152897, 374299, -250665, -740329, 433767, -114576, 288466, 146019, 757754, 328425, 731533, -192842, 598012, 235256, 626546, 714727, 335905, -153237, 177812, 614781, 657342, -303294, -26506, 160716, 772520, 509358, 793407, -642088, -960791, -297924, 369908, -525185, 93039, -56070, -19291, -720055, 811380, -994488, 21514, -582832, -679883, 68242, -183829};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques794(){
        Integer[] array = {835765, 617551, 762933, -696010, 950328, 924602, -775460, 901719, 495561, 137686, -410478, -963150, 433130, 509780, -634679, -674554, 712438, -402901, 63655, -855878, 565450, -51367, -804521, 887267, 158289, -701269, 807921, -831089, 645138, 945886, -898313, 483524, 773088, -193886, 204702, -584885, 820430, 375871, 834879, -634931, 79455, 616045, 674403, -721419, 436859, 478255, 993643, -687468, -225972, 573173, 671895, 986626, 606603, 384121, -298115, 991647, 621377, 371613, 748970, 516642, 822083, -576706, -719471, -416431, 528670, -105904, -412070, -47955, 475232, -111256, 856844, 262828, 579924, 664434, 579306, 670977, 509553, -832951, 273402, 847644, 51471, -765902, -364075, -887324, -478287, 582862, -461986, 189443, 506127, -509513, 522676, 880288, 976769, 644958, -663322, 78383, 279936, 510033, 338289, 907724};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques795(){
        Integer[] array = {-382718, 507521, 877505, 186231, 589397, 434659, 20342, 398103, 824167, 565309, 866785, 282482, -2804, -866583, 910508, 846073, -164659, -217686, -623145, -246451, 112700, -989932, -211716, -902784, -279508, -624076, -843784, -83997, 473270, -516835, -466266, 85563, -239901, -905903, 756107, -166013, 819776, -465030, 848925, -35351, 70568, -64108, -310229, 290905, -290625, -79406, 796244, -752541, 481561, -38453, -55742, 963922, 342303, -705866, -975234, -548819, 620906, 478063, -394307, -321521, -509943, 883038, -657885, -845064, 672750, 3207, 451230, 796232, -583302, 227815, -818157, -181802, -435364, 107261, -454182, -607165, 927207, -674559, 618311, 56681, 558765, -942181, -942036, 560469, -876809, 914580, 266514, -932189, 166665, 649121, 611237, -459404, -110648, -507456, -814197, -879184, 773298, -288906, -610100, -594931};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques796(){
        Integer[] array = {-612746, 918329, -821055, 847534, -790569, 446776, -198818, -255755, 438857, 952010, -984945, 518644, 946296, -820142, -822365, 497352, 365990, 988167, -837351, -517460, 735921, 938761, 101351, 209460, -561340, 354309, 9519, -462121, -505123, 821856, -52900, -883390, 234733, -918488, -356673, -521399, -574296, 37177, -160720, -498320, 639485, 11273, 191705, -529266, -11932, -253069, 738187, -546208, -261822, 897749, 995324, -85176, 992751, 273458, 878006, -876144, 342038, -20603, 244138, 690133, 164195, -798677, -13408, 805615, 156589, -652601, -978381, 137638, -738066, -229482, 410404, 729404, 239663, 79969, -894685, -548377, -444760, 867949, -888430, -963993, -381670, 466315, -616644, -417675, -259202, -201341, 873533, -879682, 515502, -803502, 70263, -738906, 943299, 183502, 888066, 346830, -384569, 967750, 288697, 185576};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques797(){
        Integer[] array = {-417044, 684736, 657646, 802793, 12996, -279674, -150810, -936785, -385379, -410733, 636948, -703534, 337694, 509266, 174446, -35663, -226535, -724253, -754229, 779930, -777147, -588129, -242654, 414872, -177748, 267592, 818634, -993844, -983840, -206154, -781464, -713736, -625654, -667567, 638025, 945476, -596542, -904147, -624976, -586793, 882099, -231872, 287984, 579011, 682643, -516903, 78881, -920034, 518985, -174781, 533386, 991906, -467597, -169594, 979215, 261585, -592575, -334996, -457482, 88176, -628969, 855593, 616963, 248722, -938038, -621194, 285567, 635739, -284139, -466950, 495486, -836378, -812031, 190237, 717749, -74393, -222474, 977909, 463288, 81641, 72751, 22915, -47806, 675922, 952455, 266026, -335717, -581419, 920194, 428384, -441978, -892822, 525831, 978005, -337738, -612006, -451470, -62690, -345724, -125185};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques798(){
        Integer[] array = {162460, -194144, 641292, -686386, -739533, -637037, -473747, -991232, -710550, -909905, -908988, -363281, 161368, -297600, 968878, 664157, 89251, -503334, 520455, -248175, 422931, -129517, 999839, 9616, -519076, 868646, -897183, -514828, -331530, -146020, 470124, -889475, -249253, -850251, -228894, 826393, 969046, -386761, 916709, -999041, -711007, -54330, 582389, 859334, 472748, -283846, 928775, 391748, 347875, -25974, 874608, -1153, -239985, -61739, -405523, 903585, 493872, -498813, 864292, -878631, -607438, 457594, 730750, -886482, 488001, -417880, -397452, -154798, -541611, 326584, -52833, -790318, -639199, 613488, 50291, 249189, -214409, 526233, -619098, -99811, 757602, 119634, 112148, -285373, -810037, -832345, -425393, 263336, -273431, 381410, -592556, -183143, 965259, 334016, 211345, 136595, -676565, 563407, -603117, -882416};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques799(){
        Integer[] array = {978734, -811576, -703449, -776363, 958327, -525708, 260494, 484964, -259226, 294962, -549898, -158475, 466391, -88722, 784692, 936412, 336132, -218041, 732809, 786125, 461545, 799073, 766150, 377624, 277302, -410268, 510089, -221352, 342918, -483988, -656288, 393893, 72118, -175047, 712188, 391955, 471867, 672280, 474765, -97243, -29118, -790424, -528757, 790393, -993072, -495365, -288186, -127925, -97714, 863034, -516453, -393672, 983885, 94780, -421289, -14151, 90312, 538874, -115196, 443640, -364428, -230425, 283148, 883955, 576801, -648232, -244268, -472543, -532161, -651989, -27961, 116372, 595019, 166359, -781039, -325677, -93361, 90288, -882908, -115710, -610724, 96984, 31174, 812836, -98032, -158745, 735442, -189769, 617145, 424536, 185814, 93485, -612280, 265717, 588678, 673203, 22321, 30842, -195436, 84827};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques800(){
        Integer[] array = {290940, -79310, -548370, 747418, 58668, 675859, -76737, 203184, 526034, -591572, -713928, -650901, -961514, 83641, 135346, -8075, -753957, -87916, 769926, 256543, 847523, -943055, -790852, 261125, 820400, -140683, -964365, 140100, 800072, -284694, 393922, 350287, 633266, -826453, 592322, -291131, 518594, -462270, 884326, 511626, 465378, 619618, -627518, -335630, 921760, -361814, -344394, 268893, 631987, 179660, 56396, -173202, -366914, -661586, 438387, 261618, 989822, -422851, -807773, 120292, 792735, -194234, -713961, 34496, 87119, -827468, -91056, -165962, 67123, 846511, -438072, -537564, 258259, -848336, 864117, 445116, 233662, 629775, 203292, -833688, 500575, 337437, 402352, 826330, 676943, -564110, -47656, 33055, -820455, -259785, 586256, 133076, 817137, -516663, -43261, -441970, -417328, -282774, 891931, 810220};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques801(){
        Integer[] array = {-293557, -640332, -715274, -815182, 765735, -129071, 953537, 515339, 348131, 105998, -625878, 637406, -933924, 304918, 565063, -67966, -717234, 594934, 237259, -432912, 533460, -415942, 45327, 832228, -601168, -284094, -332991, 704266, -152273, -237634, -295522, 829199, 581330, -749718, 355482, 195795, 720358, -769740, 534512, -691224, -12391, -584054, -391397, 987959, 27097, -748989, -452711, -634401, 619199, 655716, -196752, -888627, 711212, -265462, 9670, -157645, 911209, -427834, -265508, 770206, 129245, -277395, -787715, -602777, -858443, -103113, -8697, -368900, -58977, -230949, -301913, -361460, 572469, -78186, 467484, 647901, -979015, 483157, -743781, 303444, 980306, 610933, -875726, 748327, -251646, 976087, -902713, 131732, 231848, -172745, 39653, -283091, 570757, -309243, -466328, 731491, -899677, 676948, 102723, -74948};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques802(){
        Integer[] array = {-804277, -709845, 839617, 476023, -117813, -837852, -998757, -75810, -830169, -333788, 228568, -35033, -286178, -615523, 315273, -64985, -777350, 269814, -323766, 317253, -820428, -974794, -84614, 448287, -287447, -20210, -782175, 1159, 772886, -60885, -260431, 537975, -29425, 755609, 880564, 721625, 512092, 311807, 320548, 425408, -803085, -405499, -130173, 83663, -760913, 37849, 210338, -193727, -462308, -221062, -247232, 158551, -346193, -512517, 915334, 650730, -136295, -303879, 657811, -425212, -189794, -991991, -277898, 727270, 214988, 683399, 110521, -556541, 952918, 377614, 420544, 790012, -83579, 241926, -385358, -500014, -205211, -395729, -728853, -533385, 886339, -620686, -217780, -807404, 706290, 226026, 568717, -622862, -620969, 850109, -904952, 558533, 832088, 904397, 404088, -703493, -291288, 937683, -390134, -400081};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques803(){
        Integer[] array = {-580063, 975690, -862876, 328060, -547718, -721506, 85959, -324919, 324078, -927600, -381287, 270155, -291796, -372661, -405406, 407077, 947418, 349366, 843865, 256080, -675597, -547014, 625488, 909248, 762935, 143917, -693804, 555859, 257099, 111847, -34281, 488525, -807137, -936682, -934679, -409120, -452876, -527457, -594977, -669392, -609302, -443216, 441167, 27458, -804754, -183629, -670313, 696403, -482256, -392579, -982765, 22053, 720658, -787780, 409256, -788786, 526498, 441701, -35361, -284385, -895395, 51391, 5439, -863272, -637968, 501525, -103367, 124567, -806770, 180003, -83837, 361973, -254641, 699413, -140758, 997247, -159536, -152281, -919925, 107176, 772725, 78960, -132852, -37012, -675367, -37292, 398726, -511724, -991971, 792413, -39212, -595939, 100013, -337332, 11911, 669451, -915816, 672484, 668256, 281588};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques804(){
        Integer[] array = {482452, 904433, -51990, 388636, 263954, 705130, -871319, -231614, 146300, -988797, -476199, 912962, 960926, -635865, 592771, -61617, -324528, 541834, -474938, -904634, 575457, -169299, -70705, -426602, 859956, 137828, -202324, -44274, 85539, 795533, 159848, 893622, 397951, -893831, 695652, 290267, -181128, -742096, 486621, -423218, -413397, -235005, -408855, 369481, -549526, -514436, 455039, 933483, -825017, 229088, 34183, -263632, -69271, -497872, 415149, -380049, -901877, 247894, -330410, 106502, -866650, 627461, -276339, 985130, 158455, 881406, 611220, 111814, 187720, -501285, 610695, 80607, 906261, -672590, 543661, -641596, -192562, 293582, 229454, -999559, -123244, 611970, -869003, 729365, -159169, -380255, 187885, 166226, 166639, 786691, 679015, 642896, -986651, -116944, -167475, 228140, 905050, 615044, -762351, 847391};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques805(){
        Integer[] array = {-512922, 395309, 307230, 261738, 527375, 870792, 555076, 865247, -521191, -704764, -947500, 954936, -325989, -577703, -498615, -157884, -311505, -269717, -279494, -64398, -244321, 761722, 574627, 148929, -158634, 328836, 187800, 80534, 776001, -185699, 347355, -44687, -88967, -74632, 319806, -127258, 279078, -25362, -881613, -578186, -130540, 436507, -773403, 534767, -217455, -270237, 868649, 991834, -237052, 146701, 767083, 140001, 418813, 96315, 224106, -36034, -321338, -922774, 186006, 553680, -855485, -914941, 901046, -897235, -455213, 757867, 967631, 186444, 550284, 146030, -67042, -626037, -520053, -433284, 778188, 998586, 229685, -736067, 518698, -702757, -148886, 283099, 149438, -130370, 928936, 173496, 650283, 162981, -178677, 907980, -463624, 798627, 139698, -765021, 295172, 955231, -62512, 741625, 835261, -532918};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques806(){
        Integer[] array = {800384, -299015, 432922, -871811, 487834, 28384, 586786, -755520, 24593, -256752, -665670, 506979, -628983, 289809, 413637, 608597, -912606, -996296, 162775, -647253, -717965, 585306, -358145, 855020, -65257, -185979, -690667, -907985, -376273, 194144, -605573, 366874, 385873, -789049, 292329, 522156, -992773, -602794, -570165, 463127, 32519, -240412, 796099, 93885, -557397, -729920, -707382, -967849, -193639, -935686, -562386, -125759, -611490, -820114, -846627, -808058, -902517, -398600, 509584, -163245, -84601, -218495, -236196, -873461, -706534, -727447, -907321, 566336, -840530, -603027, 686197, -219495, -516659, -584297, -536586, -72652, -960304, 207195, 595093, -665028, -170271, 681701, -19896, -605266, 930169, 828083, -989321, -101365, -689843, -487328, 524964, -78659, -303247, 129778, -274585, -422867, 284532, 164152, -403261, -111095};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques807(){
        Integer[] array = {2425, -484378, 863023, 396395, 183053, 957401, 843429, 43672, -972579, -848432, -289842, 254526, 471754, -930530, -415480, 450731, 356448, -158259, 689203, -140571, 508414, -640477, 68206, -585413, -537998, 468339, 847576, -620831, -953960, 411792, -93886, -835560, 671608, -389398, 980915, -863697, 216836, 599966, -775853, 374404, 848553, 147801, -774546, 283835, 314885, -929676, 707375, -991968, -903337, -18212, 259048, 82367, -363373, -769978, 862759, 382184, 840163, 860047, -699634, 235681, 633150, 93144, -310471, -666125, -73256, -647208, 208187, 722034, 244017, 954247, 143761, -512510, -384001, 505001, 829852, -393225, 16647, 510152, -841950, -700028, 25262, -618172, 385777, 485680, 796578, -500047, 83249, 892261, 175934, -237341, 858552, 52128, 280458, 189868, -939316, -449091, -524337, 227361, -812718, -202331};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques808(){
        Integer[] array = {-183777, -741166, -738754, -292092, -244440, -912611, -148414, -91966, -952594, -201656, 283968, 592208, 380105, 901810, 678538, 926025, 855084, 925004, 984223, 125425, 225222, -281746, 28442, -936695, 714947, 939742, 856725, -332508, -633047, 738933, -369739, -558154, -899361, -334284, 752341, -582574, 741958, -788973, 100478, -696888, -939738, 511099, 471711, 406013, -741362, -268142, 802833, 426533, -843444, 143242, 557864, 721432, -574639, 305754, 66505, 126369, 794668, -989808, -20844, -256937, 379559, -658980, -788414, -606975, 804904, -673878, -30932, 825864, -347245, 95161, -865415, -43922, 328300, 245926, -264697, -866977, 680841, -783590, 473124, 718659, -967635, -891168, -113442, 578357, -149242, -830534, -204237, 287005, -300528, 395793, -801309, 1919, 790935, -93708, -803379, -663092, -276859, -784313, -463732, -507776};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques809(){
        Integer[] array = {-25891, -437754, 749317, 374048, 678878, 289315, -602633, 293809, 845481, -6648, -862002, 606681, -592243, -67043, 701174, 12733, -877613, 36528, -59044, -273913, 933961, -595161, 459038, 621491, -141339, -409379, -197406, 400931, 525784, 664904, 862526, 707797, 594654, -775953, -618130, -594592, -889490, -53006, -914890, 816679, 921531, 42011, -493482, -261896, -187900, -246825, -291478, -573039, 808795, 631775, 176260, -60061, 404359, 422349, 8484, -58195, -816536, -773320, -367606, -615394, -4846, 604787, 770797, 44882, -591042, -89957, 568338, -962057, 130058, 870819, -607944, -253909, -942855, 152684, -141214, 970811, 130600, -737822, -649156, -579742, -537077, -279457, -606249, 147207, -796734, 665560, 299717, -162373, -609725, -293498, 257724, -909535, -658169, -377688, 993347, -708267, -690801, -822159, 969805, -298874};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques810(){
        Integer[] array = {909745, 672019, 750918, -702647, -587364, -29160, -870155, -523053, 248132, 185631, 351330, 314555, 111489, 189612, 965383, 870910, 890719, 985567, -947267, 820286, 166577, -756580, -133398, -781592, -812294, -444825, -483054, -490361, -398953, -459473, -759710, -317487, 651213, -969059, 366257, 191043, -488278, -276109, -956308, 825201, 779318, 830320, -967928, -26905, 5948, 740318, 653898, 145976, 265718, -41454, 273407, 96608, -795400, 443450, -509053, -98776, -305764, -968066, 995469, 238053, 121793, 458044, 426845, 557508, -477229, -866978, 683557, -207487, -769232, -370575, 655936, 368806, -236886, -422468, 804520, 351749, -23284, -91240, -860311, -901666, 911364, -840327, -603672, 822182, -672447, -825247, 501291, 177979, 341297, -503539, 804228, -128974, -449901, 860583, -533529, -699325, 120316, -383723, -503967, -261887};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques811(){
        Integer[] array = {544589, -181433, 915377, -202904, -305941, -429281, -879393, -81242, -902337, -436689, 326384, -288788, 69289, 255286, 479615, 360608, -722637, 659583, -979065, 458722, 431809, 668963, 121805, -136273, 442671, -879826, 752433, -500166, -350375, 745057, 947393, 295689, 294300, -111424, 684417, -97243, -298344, 186660, -503215, 609344, 187188, -850979, 173748, 491664, 411498, 176088, -787907, 255844, -419754, -783787, 868761, -691190, -82498, -576736, 173866, 214444, 359561, -19565, 352868, 705819, -568265, 51966, -984866, 738659, 191624, 62267, 622911, 138243, -884755, -37261, 237690, -643743, 368429, 159245, -472220, -196236, -859124, -309424, -828695, -272407, 13754, 203072, 965825, 162519, 196846, -535294, 355271, -524204, 220785, 659660, 689866, -210272, -375736, 737111, 574560, -951453, -462608, -796353, 739655, 27972};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques812(){
        Integer[] array = {2675, -600959, 856596, 553608, 157197, 165013, -300354, -22716, -584910, -306475, 620270, 134754, -522789, -365955, -725427, -151258, -684146, 899967, -554007, 475116, -650457, -729680, 332444, -943532, 836777, -460883, 772694, -327250, -32994, 128309, -512769, 883887, 502111, 180702, 835200, 871433, 664608, -787879, -391479, -887551, -418723, -516103, -177106, -705554, 275901, 720546, -77423, -145673, -417272, 551099, -82971, 608394, 750699, -265219, 423510, -422304, 867168, 243638, 250721, 55430, -397108, -501242, 760671, -142737, 322470, 108524, 469538, 138481, 266681, -768307, 32037, 990049, -297008, -707955, -289772, 788548, -681277, 988054, 968546, 999393, -943648, -820008, 116235, -497693, -889137, -318384, -514259, 254517, -995757, 279083, 33889, -565878, -492211, -114936, 140127, 493953, 369581, 396714, -654000, 773085};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques813(){
        Integer[] array = {695458, -487184, -854507, -505372, -748186, 891320, 148602, 189626, -748934, -783378, 228305, -673164, -630318, -917324, 649484, 858143, 439375, -264782, -141906, -878819, 725035, 489194, 889607, -819299, 17352, -708760, 152870, 584916, -536656, -257647, 627509, 121682, -753415, -348920, -39257, -839622, 323390, -242788, -54046, -659288, -476705, -356675, 975487, 425898, 245157, 955426, -155064, -298692, 488562, 716991, 164602, 825638, 550694, -819359, -940440, -245641, 494613, -222695, -936592, 761042, 246685, 860022, 469820, -506379, 806493, 742754, 618209, -780041, 687312, -779938, 972553, 900586, -777825, 468885, 149024, 871055, 446025, 419764, -180952, 176816, -449433, -228787, -433562, -323270, 498087, 670125, -425484, -523903, -515748, -90544, -677673, 227661, -7224, 404791, 753951, -487691, -79387, 72486, 437722, 536569};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques814(){
        Integer[] array = {507957, 481195, 608451, 635102, 592496, -433972, -329729, 810172, -597161, 526225, -816853, 781279, -395591, -731162, -857488, 33846, -587481, -934418, 661823, 988944, -924625, 450132, -308641, 63578, -152173, 672434, -905911, -297652, 598933, 100124, 775949, 414094, 49872, -384074, 490191, -726494, -578517, 412680, 668432, -141292, 624657, -514379, 125303, -359616, -452368, -431028, -943175, -397893, -82845, -589040, 168639, 280591, -795719, -528120, -959934, -305514, -601988, -785313, 104106, -961190, 136002, 915331, 633909, 389201, 919215, 824941, -774756, 541037, -648839, 307404, 750742, -176310, 489140, 454906, 662185, -31607, 144574, 757472, 566322, 25000, 542506, -984217, -646741, -959039, -824777, 75150, -272707, -981547, 65024, 828708, -188545, 37683, 400638, 579438, -472012, 933501, -682690, -425537, 162429, -490791};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques815(){
        Integer[] array = {700709, 290267, -757654, -284073, -696785, -451422, -55463, -12738, -291624, 212812, 828403, -275764, -241972, 641161, 2027, 662095, -108220, -978005, -397286, -193160, -413657, 288584, -263752, 291587, 647984, 268746, 832799, -83657, -382115, -470590, 21090, -256326, 201616, -431435, -373330, -104448, 459079, 750861, -481689, 434244, 292355, 673235, 970048, -334531, -982836, 420038, -212390, -11399, -140612, -645461, 527714, -368354, -685734, 441804, -137028, 341053, 783040, 67828, -771262, 991211, 981160, -764804, -41719, -882148, -899830, 607408, 461416, -755369, 287019, 250535, 72389, -701959, -855616, 654248, -219752, 387271, 374203, 679798, 895431, -523656, 364632, -160814, 193161, -802860, -542097, -896446, -574749, 611108, -448092, 745705, 964551, 148128, 233631, 87821, 560790, 910278, -85466, 775738, -477512, 648280};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques816(){
        Integer[] array = {697601, -169795, 32347, -188341, -399916, 379444, 646169, 453303, 681464, -338850, -703176, 110565, 536707, -764180, -641252, 613331, 789639, 409111, -376439, 104388, 517678, 783055, -35251, 522936, -286365, 983361, 688242, -403841, 419060, -132322, -873040, 108208, 110466, 944534, -601851, -700610, 249960, 351205, -154636, -383764, 76783, 557981, 795006, 454003, 32446, -365068, 970454, 145256, -341906, 568004, 242416, 493873, 844401, -980400, 571804, -934611, -262151, 944057, -644159, 421894, -291607, 302881, -196840, -790097, -523960, 655208, 736381, -198791, -317221, -107079, -941413, -315839, 761418, -273866, -778339, 316392, 198285, -33356, -940022, -597415, -225985, 514572, 655948, 973461, -639070, -936850, -579642, -996480, 509289, -290571, -474044, -112025, -267357, -803751, 550418, -405116, 291588, -528246, -31345, 839471};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques817(){
        Integer[] array = {-493518, 371909, -343325, 575098, 601200, -2020, -438917, 711148, -344655, 507841, -653260, -387109, 348768, 308757, -981625, 692151, -488342, 452198, 563185, -418976, 602939, 34663, -987557, 330715, 85711, 691498, 831525, -920858, 960812, -869876, 870414, -561374, 448974, -460329, 541659, -328413, 554607, 403775, -214580, 622378, -848492, 149375, 84236, 269805, 746781, -537100, -69985, 66793, 708903, 422513, -342246, 235137, -176406, -866481, -157035, -764804, -847939, 922970, 281204, 592523, 422802, -765093, -93254, -681579, -738774, -912650, -288908, 524612, 2568, 414243, 491890, 817151, 320633, 890824, 626385, 184214, -136537, -241325, 955506, 269029, 819941, 608702, -698829, -552069, -508425, 570620, 493248, 743844, 31260, 821355, 540150, 146436, -878277, 518546, 843987, 203315, 860579, 250349, -594579, 870559};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques818(){
        Integer[] array = {-842246, 582042, -894933, 216002, -295229, 526195, 672997, -454316, -338792, -148781, -711642, 65512, -751438, 295993, -648064, -882565, 443320, -822547, -475541, 783931, 169003, -167597, 107384, -56051, -336647, 952764, -73882, -303229, 301588, 896659, 576781, 486619, 533740, -169708, -523598, -365319, 596134, 673993, -330393, 653371, -764448, 253749, -278568, 892865, 552054, -282700, -101509, 420238, -953890, -987014, 136456, 716115, 956479, 3240, 94558, 992843, 755084, -393745, 141842, -492073, -737476, -427951, 862657, -322652, -175059, -952160, -12632, 787407, 345376, -837909, 774578, -883538, 273891, -226666, -258691, 71222, 878814, -385997, -404211, 73894, -259270, 760964, -310024, -500669, -243607, -1961, -498188, 450099, -305473, -135800, 811477, -791107, 985507, -92872, 753661, 153430, 977611, -188058, 269226, 281287};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques819(){
        Integer[] array = {613230, -297419, -506857, 3315, -640219, -703174, 63406, -194510, -422298, -868775, -104054, -516303, -474077, 896415, -973036, -218844, 513820, -833786, -144959, -997395, -907296, -228661, -570347, -322304, -517912, -741020, -63698, -367479, -625526, -321824, -58063, 877789, -68566, 350440, 26654, -808680, 747039, 573368, -756984, -469846, 770688, -372109, -197527, -729310, -152953, 426397, -899697, -100357, -270456, -62195, 264428, 422450, 403506, 388282, -148248, 57428, 575301, -844210, 15743, 976760, 797989, 656662, 526344, 509542, -170066, 497265, -983697, 284598, 78175, 700971, -740827, -128090, 602232, 182163, -874686, -147367, -125957, 180071, 196714, 816282, 947113, -947344, -437911, 144754, -147201, -525101, 267410, -525801, 195693, 13492, 851083, 775636, -191947, -184146, 151722, -568465, 123807, -793866, 235384, -887209};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques820(){
        Integer[] array = {375933, 394506, 991815, -564397, -869991, -674591, 692466, 797116, -322757, 636168, 90965, 16891, -991482, 381444, -363740, 210316, -19733, 386249, 381577, 105758, 555623, 92111, 703595, 54861, 984521, 342713, 775380, -809081, -24050, 855036, -835362, -734882, 597350, 810386, -132296, -800722, -460854, -207850, -468920, -94798, -815585, -542399, -337525, 218339, -206875, -34337, -273123, -80680, 435322, 873785, 851121, 483336, -862944, 775067, 633016, -44719, 394203, -538798, -944520, 308555, 123899, 649510, -396852, -610320, -468960, 297146, 714657, 679829, -937244, -189699, -638571, 389768, 96796, -113851, -450542, 528027, 179961, -585829, 480784, 8340, 704054, 719514, -270607, 800577, 238885, -221573, -564354, 219787, 109221, -371664, 416571, -663552, 420280, 404733, 725235, -388904, 750925, 248857, -398548, 578396};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques821(){
        Integer[] array = {412369, 967984, 496909, -621846, -394237, -854147, 297390, 221614, -177717, -670308, -253194, 604783, 959975, 400701, 98005, -321571, 514247, -707317, -796797, -403940, 119946, -848825, -579552, -802044, 459617, 13468, 782824, 366288, 926111, 292200, 300516, 571056, -93070, -804249, 620136, 164976, 783738, -536866, -851825, -746785, 782649, 738122, 320825, 791558, -3516, 371803, 477953, -346828, 115985, 705694, 669635, -436013, 823155, 680855, -583863, -812498, 83086, -716226, -990302, 763934, 699312, 372229, -917194, -196135, 355402, -771410, -761312, -879293, -710826, -755532, -509895, 467547, 783160, -786026, -831421, 204213, -333857, -221034, 99419, 6190, -878997, 768439, -455639, 24811, 758716, 146026, 157880, 399369, 881023, 166856, -341658, -287368, 649139, 164287, -100053, -799692, -411807, 73803, 333014, -352052};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques822(){
        Integer[] array = {262176, 337478, -595376, -861236, -112839, -940040, 305200, -492795, 267187, 647048, 172890, -623706, -48390, -975498, -45013, 702533, -179076, -917542, 860975, 525489, 843851, -823163, 584709, -432694, 484607, 59161, -107597, 840579, 585541, 468727, 777202, -259312, 765582, -746499, -405780, -380443, 379369, 418785, 161319, 141548, 130002, 127980, -972979, 805379, 405690, 584647, 111472, 679001, -878657, -653773, 532177, -507412, -669150, -567554, -539293, 335202, 152989, -314084, 718172, -754284, 170585, 940127, -437153, -935239, 81880, -344705, -484834, 686208, -293262, -934171, 194322, 43767, 488087, 358740, -114627, 191322, -51087, -330788, -990145, -277095, 546171, -171487, -583521, 884811, 395731, -649479, -321807, -471561, 866863, -708971, 492727, -326126, 337115, 175468, 364575, -771488, -584954, 957587, -355989, -869636};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques823(){
        Integer[] array = {-997216, -279684, -901277, -21387, 115931, 975784, -157787, 149856, 230356, -74620, -127161, -714391, 81327, 274070, 815209, 769190, 265082, -663070, -602928, -416952, -354487, -29064, -118741, -928478, 238471, 497528, -14638, -434037, -351850, -44104, -138304, 928465, -183036, 154385, 854644, 361919, -743459, 58490, 79398, -384913, 875021, 52877, 573931, 294792, 850571, 895435, 643200, 23911, -663544, 863704, -88500, -564668, -673678, 289323, -35986, 669697, 500555, 719802, -646247, -46746, -349221, 606997, 803089, 584436, 495351, 877152, -639330, -216854, -7185, -251475, 734148, -348410, 204386, 601088, -232632, 746594, -739003, 846222, 245799, -317903, 341275, -701413, -29907, -15727, 59039, -146880, 602067, 14436, 705710, -530618, -569535, 9621, -6888, 868871, -370302, 368055, 381559, -320862, 603738, -682025};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques824(){
        Integer[] array = {-320019, 618211, 227409, 964528, 795890, 335692, -558093, 197568, 306394, 922658, 229415, 687927, -43097, -410013, -134826, 140935, -997464, 982062, 548703, -977861, -446950, 136162, 38755, 801119, -185860, -603961, -502007, -433474, -147767, -347141, -963707, 65498, -885471, 413135, 461287, 129560, -767504, 6995, 286243, 486041, -754017, -89658, 527169, 74104, -197711, 922762, -327312, 211095, -167482, -956063, 452013, -987525, -752130, -943133, 543575, 933996, -93232, -604990, -535465, 494628, -560663, 315030, 506394, 120731, -355346, 346709, -807405, -294072, -637557, -80528, -122748, -46323, 699262, 276952, 688605, 724401, 731505, 312003, -682198, 147693, -154553, -29580, -416159, 780922, 411507, -888714, 489355, 339716, -684774, -56651, 511221, -547468, -416284, -505142, 494300, 203536, 421657, -867373, -565063, -472392};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques825(){
        Integer[] array = {603801, 116501, -713513, -172421, 52052, 995914, -439917, -455522, 940308, 89523, 713345, -214833, -333498, -575855, -798128, 752391, -696093, -756483, -640773, 144241, 79264, 566098, -281701, 110377, 966100, -7891, 128389, -376689, -550686, 604734, -827622, -990209, -873779, -578969, 492765, 299142, -554208, 226555, 485934, -289554, 439310, -400610, -844218, -21876, -670673, 449123, 777280, 703153, 103781, 944583, 691990, 459191, 407223, -390311, 143558, -353439, -236157, 14739, 208783, 911101, -432049, 681246, -310989, 20941, 499826, 293161, 327454, -469641, 11015, 946698, -21110, -808268, 196343, 772442, 614499, -102281, -851674, -114457, -918007, -698811, 34159, -182002, -796851, 219564, 360829, -283751, 658138, 630022, -125857, -350946, 635119, -371641, 811629, -744556, 295401, 107487, 979637, -437704, 207490, 696348};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques826(){
        Integer[] array = {-238606, -377886, -480910, 50909, -784431, -84285, 799957, -643637, 682671, 771257, -948095, -913305, 256926, 474449, -222574, -225807, 240572, 127909, -662810, -170965, -399415, -561851, -975447, -645998, -402599, 835944, -114754, -477558, 822027, -562489, -340452, 49811, -304070, -361943, -659641, 205848, 616851, -988175, -320247, 27203, -716108, -354874, -537685, 390813, 102341, 348552, -647510, 739962, -995548, 172241, 457184, 39548, -306061, 644615, 768949, 100037, -196992, 739551, 230797, -249892, -755054, -826266, 442379, -965294, -797181, -44120, -427551, 242567, 550826, 710547, 951973, 9294, -699775, 44528, 549676, -742536, -873039, -707823, -620839, 186939, -528939, -259381, -493082, 969611, 988381, 575726, 894150, 189479, 54646, -79249, 40431, -815596, 315689, 905606, 620582, 616037, -839174, -159668, 525900, -416297};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques827(){
        Integer[] array = {-635470, 214680, 251748, -533514, 740906, -616363, -700971, -257701, -968338, -852690, 418137, 889453, -916973, 595027, 991209, 424719, -421184, -802028, 298053, 370149, 208025, -24214, -74921, -460212, -58521, -120867, -945081, 161624, -673526, 112140, 502718, -802978, -524189, 526631, 898965, 835298, 999341, -529362, 140286, 45110, -204236, -320904, -385401, -229717, 522289, -795317, 913543, -167675, -732605, -784193, -310689, 540497, 799027, 811652, -646915, -265719, -696158, 14258, -994327, 617634, -304882, 735463, 70001, -477288, -832818, 413569, 232810, -930042, 691712, 628951, -240609, 244678, 292452, 94550, -527298, 529981, -970720, -632806, 728461, -519059, 277901, -893557, 698074, -370113, -384043, -461479, 783650, 624505, -274125, 840473, 624949, 122254, 269459, -655948, -324456, -859545, 275763, -716804, 250611, -513244};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques828(){
        Integer[] array = {-587760, 446657, -110368, 374909, -341413, -20287, 481847, 947167, 513750, 628498, 371385, 532435, -889147, -475703, -959210, 122428, -800876, -656576, 933820, 314301, 660181, -872498, -753583, -824027, 253999, -961498, 766884, -391914, 819142, 938415, 299400, -422054, -577580, 797879, 60313, -629553, 901309, 456821, 424823, 797346, 420379, -703757, -263953, -513714, -203626, 450890, 587234, 453684, 839881, -924016, 449526, -790434, 455193, 263348, 673767, 26041, 312906, 364272, 388157, -401763, -899735, -906309, 295, -11423, -603937, 842962, -780279, -389055, 102818, 486224, 277175, -785206, -814832, -878748, -888327, -714126, 923950, -620298, -58970, -860566, -751235, -970823, 483278, 826430, 323220, 243135, 541909, -493600, 232669, -783370, -323114, -966839, -120790, -846944, 510096, 243738, 132106, 881797, -834661, -985960};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques829(){
        Integer[] array = {-125215, -426302, -408771, 79704, 632542, 484896, -60856, 134950, -498415, -367567, -865518, -360932, -733988, -917998, -657507, 89326, -813963, 89185, 252374, -239040, 102476, -634894, -521028, 936257, 271541, -407928, 999481, -884653, -568587, -543316, 674095, 528530, -69287, 646939, 592639, -175515, -495326, 299171, -147691, 516205, 910727, 751470, -450067, -148664, 289966, -761922, -118182, 627017, 925896, -153805, -941033, 696878, 638625, 718700, 745759, 742578, 204829, 682030, -254734, 666664, 574568, -60565, -989039, 195793, -737667, 594474, -477627, 594776, 941469, -461388, -530795, -370629, 169339, 637815, -900647, 435085, -255272, -940923, 496315, -505503, -547544, 447235, 912894, -867226, -585227, 494041, 28822, -454199, 868678, 652527, -34528, 693409, -243982, 559154, -623831, -123912, 984291, -664217, -758022, -134543};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques830(){
        Integer[] array = {274634, -850833, -121655, -308463, -920959, -671242, 566933, -580429, 672955, -466407, 535587, 133679, 480159, 543424, 747554, 449074, -906309, 443029, 738517, -316253, -861936, -360095, -30808, 389348, -337587, -772119, -699493, 736778, 246200, -295166, 459387, -383769, -945765, 67650, -429923, -413515, -826847, 461866, 613782, -537277, -348817, 417001, -842612, 191045, -123446, -786607, 811225, -718852, 963765, 34875, 947041, 54930, -606988, -199750, -544602, 96140, -809481, -183261, 436748, -419473, 153462, -601789, -550070, 509875, 754983, -474676, 2715, -681920, -577593, 805281, 644812, -999984, -730452, 963340, 615632, 732740, -520518, 680050, 658570, 693258, -855967, -474525, 825253, -76123, 75158, -111109, 163004, -979057, -710056, 924497, -598293, -600098, -992058, -391877, 455191, 856559, 268584, 734312, -818862, 132682};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques831(){
        Integer[] array = {-6093, 62244, -856491, 874803, 534111, 866989, 771232, -347751, 18098, 777454, -409736, 268653, 168289, 115246, -85995, 827140, -628682, -126995, 873241, 813572, -630070, 539851, -763680, -290975, 958886, -102625, -443275, -742919, -448908, -804836, -473946, -973146, 927867, -463579, -464315, -319005, 944306, -7111, 12719, 700128, 702580, 756409, -714539, -126283, -512148, -681785, 725395, 239691, -39729, -57631, 354488, -687729, 519512, 920957, -426759, 818587, 169219, 289683, 448, -202939, 101253, 296575, -45813, 826789, -767106, -443229, -192482, 846447, 8641, -25678, 101762, -339915, 496372, 841158, 884113, 965071, -6307, -223055, -368082, 685921, -144747, -13984, -189667, 162092, 830948, -887918, 164172, -508976, 321836, -884869, -905282, 473103, 521217, 680298, -701560, -272854, 260263, 397352, -534190, 730766};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques832(){
        Integer[] array = {-490879, -89521, 501808, -442935, 297914, -781944, -107387, 344735, -399077, 249574, -658762, -432072, -592331, -201360, 155239, 303234, -117128, -752289, 474431, 259876, 915657, -32079, -647669, -757562, -359533, 392832, -318144, 202195, 145904, 570936, -578187, -998009, -347067, -681735, -559929, -9532, -391795, 745775, 279960, -886615, -446321, -169829, -428442, -10687, 407634, 819656, 286107, 626915, 990923, 730345, -309669, -715591, -689319, 317415, -557796, 286758, -228653, 18116, -593249, 474282, -419791, -697199, 896940, -144308, 356172, -947517, -846538, -466202, 167635, 104021, -481165, 732832, -530735, 595468, -480956, -800734, -947428, -896835, 752532, -324553, 396711, -511319, 814399, -762691, -321539, 867553, -812820, -950277, -989835, 246580, -348809, 236126, 316627, -725697, -708317, -407042, -276128, -476765, -537457, -296473};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques833(){
        Integer[] array = {227584, -272934, 222832, 800366, -992325, -724701, 869459, -840346, -819894, 467838, -281, 711495, -559815, 592595, -614102, 550048, 190330, 491812, -289411, -929431, -884446, 916873, 399172, -598805, 329461, -915915, -165281, -379936, 228281, 898364, -926378, 588282, 74329, -207963, -591844, 262765, -615096, -392582, -142845, 579631, 463590, -895065, 651697, -322468, -223778, -61367, -277205, 670196, 946098, 782169, -402288, -332285, -643182, -701402, 830292, -326735, -830696, 783995, -978303, 737358, 869594, 969855, -599414, -269121, -949197, 162527, 735444, 865503, 405602, -272565, 459206, 355936, -747424, 917268, -768177, 56587, 71823, 540783, -519480, 792550, 818855, -221831, -560957, -545477, 156528, -510354, -723636, 576781, 790709, 74454, -475275, 179401, -333057, -524242, 339396, 789237, 332761, -276149, -993970, 380222};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques834(){
        Integer[] array = {375942, -319801, -261472, 648803, -739140, -912762, -38564, 231710, 7385, 653733, 80805, 978444, -248274, -291096, -844615, -836635, -379647, 810081, -758625, 951161, -626417, 802408, -549094, 859478, -862025, -858648, 431031, 705963, 358353, -828501, 46196, -422458, 479845, 119231, 136397, 804144, 983766, 140641, 501787, 857513, 297604, -794479, 795482, 605409, 389895, 717769, -290528, -187843, 532121, 665145, -849165, 562792, -70954, -39862, -548958, 100914, -969144, -209918, 380059, -762457, -172119, 522345, -382250, 427014, 593768, -785956, -252120, 883086, -4318, -845605, -33721, -851351, 426096, 803463, 285217, 658613, -331374, 511234, 178591, -655178, -604778, -588304, -174815, 15414, 663493, -69917, -308653, 257164, -257620, -510143, 623859, 265404, 559060, -222919, 732193, -351462, -880246, -807188, -788834, 233338};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques835(){
        Integer[] array = {296002, 241684, -212267, -355535, 324809, 230077, -58670, 816411, 41157, -346414, -373844, 258878, -282771, -578842, 351548, 172482, -738721, -891909, 393369, -122045, 435898, 637870, 901049, -770160, -319864, -479133, -989973, 263703, -841033, 959620, 780471, 961607, -393397, -444977, 646562, 115235, -203516, 175947, -861628, 954540, 812282, 43861, -281873, -825053, -72358, -126778, 25558, -980223, 292016, 927144, -606700, 87044, -118731, 694364, -103376, 66735, -483675, -347297, 738580, 892540, -173380, 533198, 821612, -567471, 738504, -265002, -311139, 204311, 957402, 481264, 865597, 434594, 107961, -567368, 592350, -421796, -402709, 190124, -473423, 431736, -874022, 531014, -91732, -693706, 79528, -899754, -395077, -816790, -293242, -238015, 659466, -54283, 40971, -809042, 104860, 40193, -925371, -546972, 361764, 384179};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques836(){
        Integer[] array = {-133366, 289453, 211843, 77285, -957878, 693951, -694944, -946136, -396013, 791343, 642053, 137448, 811940, -953679, 360372, 723247, -885114, -496572, -548586, 885617, -190704, 337179, -431850, -418164, -76531, 23008, 531360, 134338, -643379, 414532, -901700, 664284, -807186, -972826, 587834, -642446, -472606, -169968, -431983, -703179, 837391, 362071, -267164, -518878, -366, -788417, -745866, -38086, -684939, -274362, 317707, 27945, 591931, -51839, -738245, -517540, 852970, -585108, 786846, 278131, 279900, 223770, -588420, -124609, -166308, -353815, -648041, 136106, -2432, 976508, -5156, -469129, 39067, -171212, 459540, 645062, 657230, -472319, 846974, 6787, -58141, 615799, 78122, 616099, -993786, 2652, 995394, -426070, 386742, 154786, 281077, 954821, 650695, -288118, 522203, 895084, 655442, 301100, 569303, 895700};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques837(){
        Integer[] array = {-77674, 369995, -625983, 850480, 170541, -436221, -512582, 23647, -816655, 619781, -560695, -807396, -852018, -544734, 997583, -301446, 626451, 634825, -436552, 108341, 305717, -586583, 280472, -300694, 929106, 970923, -399642, -333884, 268766, 274627, -40701, 447549, -391477, 357867, 432886, 242657, -44720, -771791, 768961, -384516, 535960, 633515, -597015, -536077, 425171, 847130, -975570, -252608, -826093, 303259, -240053, 110278, 972855, -836486, -702590, 444220, 263424, -286412, -221604, 240472, 619573, -391054, 998109, -92610, 628504, 266210, -739901, -416711, -460504, -630372, -447282, -917374, 90655, -301014, 341342, -413916, 664203, -664737, 699468, -44241, 196083, 253300, -292883, 137466, -544931, -273053, -682721, 132489, 496440, 18011, 349592, 121818, 765379, 930736, -991766, -945117, -222085, 52301, 382556, -888598};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques838(){
        Integer[] array = {-919152, -568146, 60510, -705288, 767721, -435254, -395370, 270755, 808742, -532768, -51996, -901956, 123531, -968374, 728577, -628751, -941876, 716429, 906714, -594663, 130193, 51497, -595945, -658245, -269256, 174954, 546225, -672572, 794343, -279943, -245985, 601896, 504175, -899428, -423611, 238076, -463797, -166649, 340861, 144763, -565955, -234207, 864093, -238391, 205884, 600132, 767158, 294236, 341832, 608545, 943904, -257378, -989653, -919517, 225397, -416742, -540217, 943668, 205682, -203493, -325697, 704499, 625442, -763958, -809415, 371026, 977909, 923667, 475564, 762978, -341101, -309378, -32773, -371380, -472215, 931450, -336668, -478567, -674676, -1025, 225475, 452096, 588895, 763948, -825364, 385014, -70872, -166609, 214976, 359227, 193806, -751693, 9600, 902331, -798106, 916112, 617774, 594189, -361917, 970018};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques839(){
        Integer[] array = {96726, -648019, -476654, -148299, 192024, -633824, -976653, 236569, -691404, 717876, 84600, 600377, -462862, 124362, -397877, 427048, -243041, 591064, -180684, 196930, -233327, -403546, 10587, -775338, -667440, 260331, 23177, 536196, 830713, -14671, -766555, 494433, -118458, 50950, -170057, 411136, -958588, -396838, -136287, 947051, -741109, 445911, 45827, 839431, -648074, -418538, 403494, -295096, 539745, 731922, -19227, -568230, 653025, 12267, 81767, -347882, 878302, 866054, 667748, 750419, 835412, -214710, -496054, -933407, 883659, -894533, 255112, -569529, 529383, 814545, -191686, -640525, -816840, 156449, 438887, 8048, -879297, 264232, -519374, 980333, 579634, -185117, 205083, -491848, -332727, 676117, -998209, -884387, 792785, -141494, -663273, 944611, 330184, -509889, 812810, -578013, -184193, -423131, -482333, 887454};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques840(){
        Integer[] array = {-327380, -301945, -768120, 931130, -525686, 558526, 284504, -150755, -743588, -455379, 78755, 405918, 640510, 390455, -325335, 59914, -326945, 955402, -677244, 144779, 39206, 405015, 538627, -961245, -509383, 167887, -118815, -626200, -292407, -118370, -755415, 147335, 659709, -775930, 630528, 403285, 743006, 664015, 621965, -157229, -740347, 37762, -702012, 514038, 104530, -676173, 888662, 307794, 161752, 137215, -920119, 267057, 945497, -169710, -737176, -87868, 942066, -153855, 406049, 376907, -282759, -626053, -27940, -450598, 375049, 476880, -872866, 840700, 232112, 234316, 626296, -319177, -70616, 262844, -327820, 359605, -296552, -942878, -78099, 954092, 498652, 812519, 176163, 510020, -693255, 167765, 37184, -231130, 735305, 441872, 538251, -152750, -123512, 336455, -237061, 950226, -587902, -64361, 587785, -165857};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques841(){
        Integer[] array = {-38957, 283883, 842600, 980978, -727270, -9519, 7329, -799897, 636796, -139342, 401199, -550123, -888022, 653275, -471630, -81763, -909053, 850745, 248397, 432542, 745143, 480027, -243318, 766727, 425308, 916220, -870747, -119923, 967104, 403316, 943252, 808706, -930254, -23457, -604340, 297265, -736491, -466073, 197531, -760471, -732233, 254271, -582737, 265379, -313983, 762202, 626803, -477220, 786918, 670736, -886669, 249783, -741003, 896311, -92042, -281036, 462177, -992066, -151879, 752175, 519538, 387402, 211049, 116425, 941360, 297857, 622432, -880327, -578729, 319248, 55941, -156360, 757900, -597075, 331514, 45222, -998904, 596994, 508055, -646942, 356807, -110721, 206828, -231020, 879318, -580035, -708190, -416559, -939480, 84855, 637069, 993401, 30799, 708344, -287614, -361240, -735912, 292274, -138169, 823796};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques842(){
        Integer[] array = {-37725, -220880, 189934, 320856, -894072, -205472, 756198, 911071, -388409, 240887, 679537, -35131, -203111, -888479, -968961, -228814, -20671, 731512, -582910, 272663, -935214, 990824, 918483, -503005, -68977, 158750, -322482, -508972, 415865, -131940, 898425, 366949, 818072, -469831, -482457, -20350, -595508, 436171, -425799, 89929, 180145, -341570, 557716, 641652, -506467, -587076, -489037, -546892, -693068, -691873, -676758, -781402, -808410, 392808, -678419, 666888, -56782, -809344, -131637, 321240, 7704, -760834, -564165, -555450, -121976, 384537, -75624, -7993, -722206, 179391, 276426, 709688, -164187, 357428, 380513, 781161, 51220, 828944, -496606, 970640, -573972, 961980, 245600, -487607, -218427, 121478, 842866, 626273, 46616, 975114, -822988, -938881, -282237, -624240, 34629, -341864, 608522, 330646, -328001, -240052};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques843(){
        Integer[] array = {-735197, -465414, 719578, 888443, -373621, -582380, -918153, -430449, -888641, 331968, 657920, -31252, -381841, 308134, -292252, -385266, -959310, 893594, 41488, 30195, -548095, 584098, 337042, 725243, 219605, 300673, 715122, 200883, 123922, 97877, -27963, -592168, -483295, -859608, -357349, 622451, -802408, -259063, 422310, 507235, 715668, -326903, -265593, -624849, -379857, -631658, 480964, -994971, 308435, 734971, 784034, 614857, -5863, -987746, -446242, -914523, -622940, 462329, -653835, 473451, 61121, 877983, 916045, -385168, -392814, -61732, -542731, -193152, -605163, 842824, 432559, 998841, -648988, -702752, 870170, -668331, 149058, -148855, 649925, 245961, -534107, 384351, 363661, -75236, 953734, -47883, -26961, 13114, 351075, -472232, 708317, -573009, -182292, -987247, -129336, 323985, 14070, 272453, 81048, -705397};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques844(){
        Integer[] array = {-180778, -307249, 62926, -172108, 575561, -77680, -106795, 567633, 879972, -294929, -947466, 860307, -404917, 528493, 69240, -427370, -235430, 736568, 480152, -914973, -799178, 96736, -126840, -921888, -231276, -166877, -136346, -379472, -855644, -995916, -712273, -206141, 188909, 752503, 811431, 883462, -713269, 719946, -60525, -665920, -223582, 677797, 192844, 482810, 372634, -573774, 674121, 944115, -160187, 900707, -527776, 788325, 567723, 733861, -659601, -210976, -835791, 337842, -186783, -960118, -851821, 839853, -950801, 67440, -112362, -793025, -466724, 128114, 327821, -79550, -293941, 427544, 980673, 898734, -777538, -298636, 541253, -747992, -556204, -172162, 682073, 113331, -336444, 643468, -413345, 579652, 696471, 911625, -555164, 761904, 228918, -37053, -20868, -825282, -52406, 933590, -622239, 181496, -63449, -758760};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques845(){
        Integer[] array = {-747313, 215736, 13708, -818621, 177812, 226516, -921650, -402416, 164111, -412917, -343626, 280136, -697323, 301596, 198436, 902193, -548879, 245781, -251656, 937650, 555389, -570869, -660108, -324168, 371992, -938306, 962994, 862186, -869921, 740976, 875588, 13347, 194371, -897417, 251562, 82650, 787952, -767698, -785282, 696742, 84107, 632489, 786025, -663400, 211092, -822165, -684476, 209491, -712244, -891871, -601994, 594691, -98360, -115353, -961297, -735239, -830020, -658488, -631957, -715944, 656129, 164769, -806156, -715257, -445019, -140434, 403800, -345517, 568656, -14141, 102436, -731786, -959683, -517621, 104995, -407678, 325664, 767113, -12705, -246501, -656385, 633070, -851407, -315028, -670537, -811662, 768338, -825533, -163188, 685839, -394980, -36753, -879161, 302723, 166258, 136161, 375592, -889037, 730946, 509242};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques846(){
        Integer[] array = {196433, -886130, 456394, -949393, 666146, 826566, -119050, 404577, 255974, 148140, 702535, 469710, -608746, 986230, 168871, 583449, 551082, 262184, 552108, 686345, -994107, 552004, -973254, -158728, -917138, -239668, 8054, 585597, 793531, 209196, -915084, 829802, 431809, -873182, -236725, 168395, 572084, 907932, 770791, 932587, -986259, -318687, -288173, -638713, 454053, -121183, 447308, 61423, -232166, -639198, 348145, 194056, 25207, -904000, 601791, 21418, 801497, -349950, -693707, -64386, 575227, 621544, -329097, 550639, -156096, 979213, -946721, -590213, 583769, -626234, -574015, 313948, 991050, 473715, -990832, 47943, -33379, 137353, -813484, 135220, -522417, 319599, 984795, 975671, -109055, -539035, -393101, 461504, -393802, -653989, -303072, -268103, 626058, -713828, -371162, -631090, 952771, -847146, -591919, 630422};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques847(){
        Integer[] array = {950074, 781606, -7628, 695361, -853361, 860330, -31017, 715412, 810735, -27255, -885646, -44792, -51686, -372443, 908799, -932596, -486182, 359568, 990439, -135325, -796493, -79003, 95971, 912109, -668770, 445918, -793508, 855968, -797149, 35041, 440869, -345000, -29693, 772244, 138040, -761085, -357841, 231588, 354242, -744752, 34149, -107661, 142033, -496024, -26256, 673613, -941468, -766545, -481274, 723847, -656315, 160526, 602700, -708677, 666414, -279154, -412189, 592920, -264918, 102179, -225256, 413304, -676746, -832508, 511187, -682334, -339908, 482201, 991626, -696583, -811873, -959946, -952044, -368957, 922778, 209218, 508692, -893927, 714085, 158884, 496251, -905300, -329993, -651934, 665773, -683281, 769638, 857158, -952409, 912331, 773337, -222083, -26399, -735390, 158246, -239203, 646542, 895828, 882403, -150264};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques848(){
        Integer[] array = {121751, 748657, 706229, -254361, 202379, 856536, 751892, 919642, -181296, 337819, -439279, -173984, 595256, 532369, -425018, 295045, -233074, -55306, 725700, -745426, -364094, -861246, -691069, -193037, 162518, -732848, 53992, -111091, 951984, -908001, 608006, 391311, 912277, -316035, 376917, -974824, 176096, -753863, -934747, -884352, -180806, 28585, -780913, 67548, -92572, 727560, 372026, 888220, -526664, -381436, 483313, -690897, -138670, -139763, -466312, -381419, -187984, 331193, 558207, 974324, 822872, -572228, -815222, 544557, -978874, 897275, 44183, -727189, -657746, -245761, 325748, -239055, 169453, 130661, -271858, 868652, 915869, -220083, -104914, 276756, -182443, 237396, -267969, -711284, 545409, -635281, 277085, -847263, -399187, 152144, 607687, -640209, 745446, -453519, -774565, -295901, -253762, 424993, -904359, -920790};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques849(){
        Integer[] array = {-15479, -215777, 571728, -858101, -177791, 302981, -209545, -18581, 954460, -613398, -985280, 530473, 432156, 567326, 601872, -277506, -412353, -406406, -417360, -991139, 134873, -558510, -784363, 80634, -559467, -167988, -601885, 26506, -267266, -181742, -887704, -299998, 666868, -703939, 717667, 23511, 657757, 376683, -835577, -715354, 529138, 898489, 993476, -975633, 286094, -667668, -767705, -236585, -185039, -69997, -855230, -238067, 77628, -805692, -562494, -291093, -846264, 670246, -15280, -692720, 56557, 309529, 263799, -155825, -437354, 203694, 967923, -946524, -653439, 470857, -941862, -632463, 100531, 732316, -824905, -10454, -83050, -224364, -462009, 918940, 890154, 788082, -821892, -938680, -42302, -802998, 125262, 459269, -588492, 202099, 507595, 73062, -220509, -261513, 142039, 916674, -921087, -48636, 984415, 424692};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques850(){
        Integer[] array = {-500539, -827900, 140245, -19984, 926360, -49842, 228885, 267730, 789576, 729359, -428754, -916260, 653929, -816605, 802158, 950186, -191710, -924909, -949123, -31952, 568300, 397166, 967132, -688982, -110281, -896217, -897717, 822720, -627468, -672151, 457465, 727566, 51035, -699726, -199248, -678080, -455343, -647531, -2150, -632731, 493518, 563332, 187766, -568646, 298932, 627044, 141133, 720712, 314513, -806607, -339531, -593278, -535000, 668959, -404713, -719085, -909624, -149678, -772928, -894356, 507004, 109260, -425648, -99540, 417619, -65792, -205470, -478158, 340315, 777083, -794990, 504517, -824662, 974768, 969758, 636496, -87741, 312900, -175663, -36454, -734440, 192006, 52757, 433147, -527343, -655317, -655602, -543977, -505078, -263363, 811568, 600583, -31485, 753026, -987742, 898518, 736745, 600428, -538560, -530293};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques851(){
        Integer[] array = {-500565, 415866, 617449, 469276, 309312, -897216, -108015, -948660, -549413, 170258, -711540, -916836, 672478, -128055, -129691, 270460, 851431, -304672, -436001, 1976, -385880, 323239, 848370, 766531, -619983, 938346, -918061, 627239, -224293, 265589, -647465, -214586, 224603, 316040, -676865, 690968, 542089, 441186, 724884, 864466, 187428, 495900, 247918, -189876, -310702, 993618, -418986, -663759, 989516, -377148, -473866, 344957, -277271, -783269, 553306, -921418, 830374, -297802, -27910, -717301, 575681, 639665, -968452, 598805, 943810, -213336, -415938, 723741, -25364, 764033, -601163, 716156, 732494, 464337, -812433, 525864, -903103, 191581, 331367, 793082, 797172, -578545, -449703, 830794, 52457, 38365, 956951, -984206, -195619, 675065, 247037, -929197, -407338, 535315, 48591, -479396, -401634, 344336, 856304, 283468};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques852(){
        Integer[] array = {866084, -296608, 70378, 909012, -214572, -787535, 434919, 154363, -331127, 632101, -504217, -645874, -202775, 202688, -684310, -177608, 88623, 130227, 815260, 884713, -222058, -235554, -33619, 40898, 917715, 321659, -124317, 324491, -258527, -152984, 358179, 563119, -423980, -12672, -179178, -807325, -3524, -119729, 341311, 323384, 209874, -675701, 362026, -326168, -484306, -799455, 527634, 585695, 94010, 183876, 259862, -732391, 388142, 600547, 653197, -530333, -919828, 500564, 443280, -745969, -876568, -898044, -274811, 41634, 275352, -518914, 868878, 263912, -631621, -193031, -885312, 722739, 484574, 290446, 97800, 793336, -215759, -336248, 262919, -149385, -875266, 91612, 668166, 673122, 461944, -413027, -305642, -461858, 714892, 508945, -190976, -613965, 500930, -484786, -486280, -176982, 316075, 494938, 219751, 993849};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques853(){
        Integer[] array = {-246443, -77157, 317207, -520044, -895136, -314730, 67642, 543663, -396158, 352641, -121147, 271039, 604221, -830970, -492339, 864419, -688800, -757603, 337866, 13510, 303821, -610526, 606488, 728109, 824605, 216546, -338601, 279058, -437553, -314693, -473413, 622530, 291110, -629038, -725847, -898696, -529167, -483356, -776262, -298072, -982581, -887808, -829122, -413927, 496118, 371642, -53320, 505563, 205466, -477426, 479705, 251666, 83926, -860411, -725337, 35240, -535566, 725206, -523381, 770431, 684856, 145842, 156495, 241345, 299367, 348887, -296668, -616359, -155167, -979154, 147367, 347183, 636059, -124271, 554081, -187458, -572645, 112358, -54556, 628863, -771562, -50775, -729829, 731727, 874856, 66725, 409473, 532422, -518155, 617991, -912406, 952690, -130018, 751192, 928575, -458938, 637169, 544932, -104304, 983617};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques854(){
        Integer[] array = {-635604, -815620, 642351, -478028, -275012, 96535, -532005, -70926, -671233, -546536, -813750, 125327, 934399, -257258, -570915, -846240, 144138, 319868, 655069, 911152, -510990, 419115, 82346, 711218, -475126, 326465, -125094, 836097, 180136, -716160, -566149, -248276, -56091, 948139, 354070, 151536, -247727, -35179, 123169, 344189, -778656, 630744, -413251, 972402, -263908, -512124, -444902, 140443, -96626, 724567, 554799, -451420, -531685, 9724, -291012, 53936, 207683, -227518, 209115, -548195, -523431, 732951, 616052, -113865, -216963, -424202, 865662, 238086, 517515, -492146, 981460, -296878, -914273, -558127, -584434, -7887, -633739, 115383, 976123, 998605, -752883, 263478, -533842, -780860, 683299, 285095, -530486, -40797, -308376, 803125, 335257, -345735, -213937, 388628, 238617, 266577, -837545, -59137, -610730, -960598};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques855(){
        Integer[] array = {691755, -275500, 584575, 106020, -886114, 558539, 837671, -487169, 977113, -494824, -551380, 90507, -315879, 557930, 816458, 331154, 476087, -967226, -332897, -877536, -389921, 969670, -998560, 629872, 914941, 669100, 758927, 687512, -257273, -952051, 138224, -807766, -183274, -371786, 804181, 749375, 737246, -167244, 131111, -175469, 805160, -407828, 49393, -183852, -962664, -347623, 784972, -519928, 125031, -101529, 33567, -854683, 389693, -380436, 247817, -871598, 830969, 525252, 563351, -240425, -876680, 297342, 32213, 966965, 591205, -799718, 955674, -172113, -949936, -301245, 969971, -201459, -827412, -938438, -483179, -2730, -161039, -958370, 505953, -963556, -873442, 692115, -778746, 735538, -405779, -935147, 887664, 2341, 794415, -710475, 511893, -45498, 682801, -330883, 636888, 936062, -481214, 15239, -777838, 809787};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques856(){
        Integer[] array = {981684, -154565, 651209, 443937, 967501, 407281, -383089, -885108, 277184, -128195, -509533, 480078, 709069, 356948, 852099, -413830, 824643, 476604, 32683, -373014, -381058, -47710, -576473, -898595, -595622, 747410, -591196, -181745, 706877, -526771, 345968, -84032, 432327, 542418, 116427, -426638, -427633, 589298, -129319, -587167, -936478, 440620, -793259, -408792, -911711, -367524, -763544, -261881, 575058, 346352, 806769, -623151, -130601, -421257, 954990, 545363, -211024, 770662, -708529, -23516, -208014, 623591, -560665, -95977, 29101, 335750, -614720, -155860, 91706, -410858, 661449, 867756, 416526, -567889, -435515, -987295, -766608, 612149, -456855, -574911, -231739, -900017, 17158, -990269, -444057, -189853, -595066, -866491, 648691, -411541, 643100, 962502, -732362, -291877, -69301, 136126, 458651, -178202, -189724, -205118};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques857(){
        Integer[] array = {-501063, 124295, -188301, 989904, -555294, 808393, 995545, -222306, 965453, 428916, -668073, 254271, -443110, 973847, -452533, 818438, -687214, 404698, 408313, 831388, -208314, -200357, -964884, 565860, -628047, 257165, -496714, -692746, -701614, 815315, -389052, -396324, -685197, -974963, 37634, 360805, 997463, 78900, 754981, -532386, -587366, -797586, -881434, -956858, 21254, 503313, -419448, -613894, 900509, -543756, 63938, -259318, 226249, 72238, 826316, 37944, -360820, 651368, 63006, -57638, 841562, -224648, -518445, -951204, -181068, -12732, 394646, 176869, 42224, -393194, 35985, -74664, -471758, -93887, -369940, -446675, 654456, 491049, -409450, 526613, 747956, 756395, 904409, 539470, 183798, 987217, 197228, -47509, -70284, -590808, -574334, -911855, 370241, -404082, -11847, -791445, 640660, 995851, -757091, 278877};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques858(){
        Integer[] array = {210250, 610723, 368940, 362701, 909968, -407304, 935380, -320390, 356237, 899280, 298196, -341422, 68761, -804360, -776485, -848967, 744377, 349111, 89682, -873433, -943345, -90755, -897831, 255939, 779960, -966434, -935430, -573020, -669999, 791728, -965649, 614959, 833584, -461909, 334477, 950694, 391830, 674153, -343942, 5440, 886667, -245560, 731958, -82209, -581514, -99852, 617561, -917376, 558309, -121943, 419101, 713518, 599198, -716975, 784325, -407964, -789625, 740129, -433021, -379929, -237044, 506187, -84530, 684261, -218259, -108638, 381487, -964558, 589161, 756874, 881396, -974721, -829212, -600307, -454985, -785297, -921084, 707039, 392719, 982111, 344996, -450501, -345940, 318527, -578968, 942312, 261792, 696408, -830396, 475493, 966620, -871209, -127712, -110761, -395899, 929882, 219382, -578930, 248190, 311494};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques859(){
        Integer[] array = {315353, -315342, 680588, 636902, 68703, -929704, -984101, 25554, 219155, -425026, 928001, -417951, 854143, 18490, 277517, -209537, 217202, -798871, 331975, 455355, 237383, 606112, 970525, -616409, -300957, 775383, 648010, 523709, -183049, 868725, 366476, 267166, -750802, 616032, -739121, -166143, 5705, -565732, -948156, -407430, 67361, -92196, -971301, -407050, 836726, -707379, -172296, 665553, -961768, 3282, -99227, 929217, 287217, -208104, -232720, -610578, 317983, 979106, 934707, 682503, 733422, -355220, 522446, 300361, -405450, 609689, -952474, -174449, -796043, -654103, -649268, 841201, 938085, -388168, -735471, -178287, 905901, -434217, 744912, -237661, 597147, -840105, -187004, 5707, 388591, 654938, 920724, -987950, 573118, -204485, -571008, -421683, -604745, -807, -824684, 382622, -30331, 981321, -568474, -700743};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques860(){
        Integer[] array = {-150063, 434282, -157387, -990717, 122483, -181937, 299803, -161475, -280205, -961556, -92346, -539058, 924050, 956352, -247241, -302910, -569535, -52159, 970963, -889600, -896032, 250913, -51099, 372240, 437189, -880355, 871459, 164930, -502221, -887420, -141856, -518526, 647024, 866454, -873433, -823258, -809224, -631050, -730979, 554285, -793930, 707303, 14241, -976102, -857001, 910875, -194006, 764720, 109111, -192276, -385142, 521458, 466002, -888165, 460501, 717013, 998773, -378302, 279877, 449460, 688757, 638327, 883771, -633762, -117723, -88847, 228523, 729708, -642407, -654031, 241162, -121970, -888703, -712617, -981639, 932683, -81597, -815459, 84138, 820214, -919272, -591491, -693405, -577268, 268025, 531547, 202452, 152409, -202759, -141557, -968236, 150457, -934048, 199860, 417676, -916754, -983837, -865169, -630984, -444493};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques861(){
        Integer[] array = {-423485, -453551, 16700, -933532, 242611, -426084, -500330, -937984, -778173, -240328, 201008, 772773, 108626, 49511, 841633, -491764, 442887, 779711, -398560, 875087, 835400, -996321, -601482, 223661, -623625, -67942, -422017, -109072, 523404, -871351, -437251, 365147, 755388, -947873, 350041, -38634, -658902, -838985, -394050, -289795, 248965, -207900, 299637, 849839, -577975, 924069, -707889, -649943, -287812, 786762, -821225, -560352, 499583, -610442, -185455, -451688, 784552, 969926, 408458, 328396, -652582, 334507, -476880, 445619, -954773, -791603, 954072, -554605, -110345, -564281, -818988, -47176, -903034, -149153, 594345, 370328, 302502, 160025, 60635, -397321, 410392, 280258, -233975, 31329, 916786, -470032, -814510, 327265, 346116, -934811, -857703, 544850, 930473, -91130, -86079, 857891, -16178, -772218, -291366, 656465};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques862(){
        Integer[] array = {-830855, -57130, 586271, -907807, 969654, -47146, 647507, -49360, 318285, -926023, -735140, -518583, 53800, 197050, 829900, -406656, 297237, -37684, -877842, -831192, 252932, 735572, -894115, 300169, 857334, -456556, 725467, -692011, 849594, -767161, 393394, -531597, -419487, 664863, -881937, 24272, -293588, -325087, 417034, 641929, 321467, 760080, -164608, -752117, 261393, 590762, 942044, -847487, 168651, -473349, -726609, 615651, -329403, 672949, 108554, -852661, -860807, -908739, -104741, -755373, -526649, 138006, 947084, -822025, -920131, 171556, -296952, -253233, -653498, 609456, 188434, -292552, -871326, 772041, -872812, 609329, 453710, 747666, 485810, 417421, -425776, 460043, 194580, 671308, 74381, -19938, -401422, -291237, 808236, 319774, -547895, 448263, 671627, -215533, 606928, -650552, 103740, 774266, 416134, -292926};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques863(){
        Integer[] array = {-173514, 574363, -795839, -47748, -842935, -615620, -144046, 492936, 440924, -717393, 715898, -409626, 659134, 773224, 576862, 625384, 497400, 796567, 961187, -524874, -264099, 738506, 601199, -615702, -157534, -32451, -613707, -117054, 961642, -281287, -866895, 637868, 744362, -860405, -737279, -340498, 588670, 6990, -499535, 725331, 21238, 218840, -54047, -742659, -950211, 202867, 123999, -547437, -836534, 507024, 36641, 386839, -21044, -608907, -461670, 747179, -154927, 261585, 220951, 966855, 964907, 649953, -964622, 585840, -775877, -858254, 751509, -806042, -950189, 596736, 512965, 93125, 724772, -962577, 571683, 476605, -472386, -758685, -846612, 25627, -252472, -543874, 518740, 912843, 159319, -21346, 634763, -921794, -80442, 563910, -194015, 315371, -912742, 896973, -430124, 355410, -532960, -279545, 276053, 290414};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques864(){
        Integer[] array = {-516924, 712109, -618279, -803196, 309718, -409458, -722780, -83581, -527146, 213605, 667204, 514621, -74079, 909406, 755948, -568774, 649848, -25594, -103032, -713226, 52115, -735415, -908033, 187721, -374806, -424003, -920122, 895418, 886687, 173586, 795027, -936889, 39959, -949716, -219136, 472376, 11010, 779268, -595968, 224767, 836281, 314733, 516127, 350696, -381476, -108357, -424290, -360874, -688977, 36324, -364475, 286272, 76887, -797404, -716113, 783732, 906353, 694653, -552195, 929972, -539481, -965396, 509895, -493201, -831682, -541204, 200086, 70728, -990599, 713911, -337607, 499543, -438299, 6529, -104560, -583023, 822440, -696914, 47263, 450757, 914442, 848590, -998445, 272692, 594232, 545594, -767791, -723480, 76657, -623337, 53383, -32417, 201759, 990637, -607216, -260031, -165410, -448762, 732335, -163351};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques865(){
        Integer[] array = {-50378, 947843, -13619, -404259, 919635, 89105, 539039, -794334, -324611, -798167, 63474, 739593, 279457, 74161, -582665, 755196, -856698, 693282, 595899, 986648, -570259, -497680, -901095, -869291, -231328, 242835, 367462, 930564, 796444, 598449, 578509, -634487, 260556, 830691, 422888, -147145, 364092, 117767, 37585, -611981, 858162, 50952, 4532, 455803, -751123, -365894, -513831, -109622, -34900, 867800, -789773, -130135, -261347, 343335, 550663, 702655, 365309, 468987, 134543, 938292, 146867, -782955, -897796, 773658, -86428, -866086, 370996, 507140, 491812, 443045, -930790, 365435, -554530, -739300, -448933, 205822, -8068, -401115, 457413, 174319, 962545, -946274, 677416, 107415, -179811, -59596, 88424, -320095, -678234, 359639, 335051, 558009, 517337, -727198, -772700, 594670, -138427, -238353, -236331, -40};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques866(){
        Integer[] array = {265535, 870947, -208646, -871977, -28597, -454624, 295436, -95829, 87259, 562051, -891300, -204397, -654369, 771943, -343677, 411795, 233928, 608803, -972128, 957031, 185174, 486385, -151972, 115114, 228149, 767752, -255338, -191668, -575907, -338736, -323854, -208655, -16212, 510832, -878191, -350765, -475119, 575031, 103643, 304090, 405662, -525291, 128664, 169121, 248174, 979506, 280853, -204824, 270877, 119889, 770845, -115205, -14748, 931067, -907226, -858695, 295230, -357773, -506287, -515839, -352580, 355087, 620511, 918771, 818894, 810380, -476840, 879203, -625472, 55790, -706519, 490228, 114315, 174358, -680089, -360259, -458619, -797404, -581312, -809105, -911659, 105011, -636478, -231449, 580648, -58120, 691755, -828907, -842864, 824170, -490190, -600554, 469433, -619873, -388943, -561750, 654648, 948528, 438557, -110356};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques867(){
        Integer[] array = {800949, -832278, 123004, -457429, -603138, 344931, 477344, 884228, 423199, 405197, -897964, 345770, 200924, -216083, 556975, 558679, 152519, -436997, -58038, 91519, -763248, -122716, -904234, 952658, -968793, 898067, 29477, 156136, -549714, -11020, 284961, -850969, 203108, -484354, -891043, 373337, 160467, -978111, -980635, 262765, 969598, -414911, -224917, -268544, -521329, 624813, 375622, 700734, 595013, -181049, 493092, -357415, 824600, 513173, -59626, 501445, 175774, -394042, 93410, 258558, -200073, 246761, -970594, -405964, 862455, 177185, -45122, 60210, 738457, 233952, -50923, -894589, 148844, 148108, -832879, -292679, -967983, -816177, -433878, 389461, -346974, -76996, -628762, 554793, 532862, -137791, 622410, 415124, -992115, 558085, 331073, -649655, 705962, -615980, 438957, 750092, 194774, 657945, 900373, -27644};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques868(){
        Integer[] array = {927298, -77870, 467197, 382352, -905180, -675889, -261843, -546701, -128370, 33157, 977472, 839834, -408769, -126295, 72774, -732867, -6644, -31240, -956160, -987471, -947309, 988305, 935090, 610554, 919771, 663493, -381037, -596768, 76891, -439491, 658815, 539853, -382057, -651246, -452236, 141554, -263589, -192980, -393890, -88168, 461514, 87753, 297090, 609238, -557459, 507992, 261442, -929859, 335787, 278484, -409754, 641140, 312531, -77838, 809424, -993165, -57768, 849307, -443656, -704805, 108813, 579657, -837044, -792912, 202378, -462411, 447625, -880649, -583249, 973419, -951576, 117311, -386169, 111254, -118472, 631335, -314496, -199506, -566229, 340721, -252434, -388796, 380353, -41162, -64933, -46167, -720957, -680426, 581956, -526069, -66648, 455038, 456071, 831008, -589830, -62761, -736186, -1192, -143948, -86679};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques869(){
        Integer[] array = {592033, 842060, 85231, -720120, 78333, 91530, -976722, -555585, -62027, -576701, -706033, 648976, 183371, 449117, 195178, 537069, 90319, -410260, 978328, -256214, 153290, 659461, 945228, 146641, 269136, -752051, 751776, -757585, -13450, 71252, -341554, -693763, 664370, -81175, 434946, 912134, -558636, -603752, 271226, 196244, -940025, -163615, -583631, -610951, 511506, -979391, -706194, 991478, -897393, -851737, 315910, 677643, 939923, -78368, 229775, 940087, 324022, -887063, 65880, 110775, -58190, -936142, 616167, 678106, -472412, -466162, -748476, 843961, -354880, -77069, 65251, 283002, 72366, 734487, 642280, -644860, -567769, 869819, 993302, -405066, -364509, -298400, -273977, 635573, -565844, 162749, -627116, 382127, 128165, 750966, -916367, -134543, 754104, 325006, 508105, 16121, -23983, -453701, -232769, 583010};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques870(){
        Integer[] array = {397057, 988943, -625560, -834614, -785438, -745771, 533495, 593218, 965308, -137153, -820329, 539884, -566919, -562949, -190050, 113787, -953376, 751168, 666687, 996504, -237525, -372226, -811770, 315978, 886509, 870295, -192368, 157837, 828207, 158392, 136384, -751780, 232670, -718011, 163500, 894120, -758972, 551763, -789503, 564843, -40631, -947343, 98069, -977225, 509324, -709011, -397641, 242860, 578508, 32710, 327208, 899636, -557288, 467561, -852991, -494633, 564313, 265929, 150239, 915668, 350042, -768793, 56467, 92500, -459859, 667240, -877877, 961831, -883387, 808877, 678211, -886358, -63849, 936415, -409446, -328041, 598234, 168250, -757713, -366130, -875175, 729152, -145242, -415923, -363724, -592352, -546189, -167419, -639283, 407849, -420740, -311905, 189652, 859210, 659231, 997154, -982976, -622129, 120819, 315599};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques871(){
        Integer[] array = {535053, 693020, -774138, 531876, -931998, 701743, 443146, -522279, 951443, -87572, -323194, -954579, 955712, 482917, -42797, 68677, -157394, -749120, -306035, -197081, 198211, 713127, 280511, -473555, 625559, 212599, -904281, -530029, 33137, 689399, -262371, -411215, -899745, -757080, -137861, -993951, 12399, 838656, -290495, 426540, 782636, 463208, -96008, 429499, 239732, 849823, 858078, -225796, 693072, 337919, -848031, 166587, -929988, -885683, -603465, 520181, -196049, -384909, 233282, 736146, -754991, -921692, 416232, 387298, -607186, -136881, 669322, 459006, -483573, 475944, -305017, -165498, 958593, -45527, -548661, -514691, 558254, 775189, 206026, 264465, 990330, -446905, -977311, -487394, -704538, -384961, 976366, 95566, -196979, -600465, -640253, -395268, -421522, 674339, 5395, -913478, 197761, 676336, -979425, 30851};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques872(){
        Integer[] array = {-495052, -612797, 452365, -718291, 644267, -678097, -867878, -212761, -891238, 311397, 623750, -835935, 823975, 229828, 217355, 101173, 869240, 130897, -537285, 259759, -493918, 314325, 809234, 50451, 148237, 741533, -509187, -510457, -341092, -472372, -351995, -546461, -505821, 658178, -901021, 764247, -849980, -691374, 182698, -611847, 664842, -757324, 627931, -336072, -228916, 798464, 290056, -589455, -937175, 818693, -522060, 185316, -530083, 97675, -103402, 311344, 186198, -434881, 786120, 992416, 694350, -675129, -780490, 829021, -776218, -584258, -940435, -429576, -345419, -18203, -362924, -262783, 385994, -150791, -778156, -963533, -261570, 163738, -123171, 285079, 135620, -259296, -913989, 250244, 155903, -273562, 508500, 857351, -558057, 321647, -163981, -464735, -694754, 173547, -525282, 143579, -851299, -828150, -631197, 420656};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques873(){
        Integer[] array = {-632152, 780571, -733804, 956837, -406552, -18002, 888415, -297763, 919180, 379716, 167329, 422370, 383335, -187942, -860224, -702081, -441304, 286690, 338506, -66345, 305860, -819651, 312553, -894582, -912780, 718794, -394841, -640943, -325690, 228282, -397844, 41331, -160063, 767192, 541869, 308213, -137911, 115922, -962774, 659688, 54764, -989250, -536227, -91463, 999427, 563192, 283140, 835146, 610311, 727578, 882313, 810074, -369433, 967801, -117375, -604672, -37429, -318835, -85119, 16385, 741639, 621544, 879083, -893600, -176458, 824892, -397895, -260940, -745557, 543973, 750986, 362385, -651371, -557069, -533910, 941696, -51921, -325250, 176691, 732488, 172713, 215824, -699861, -488472, -610666, 159726, 156766, 450533, -872482, 946256, 986784, -936217, 23935, 155739, -278072, -86760, 564506, 499297, -890829, -19766};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques874(){
        Integer[] array = {-339335, 517522, 442884, 986894, 827932, 144509, -684801, 486321, -449164, 401535, -681638, 444404, 880576, 835815, -463730, -589528, 210368, 116762, 995478, -807651, -507693, -384307, -367930, -282600, -35457, 820680, 645074, 373409, 627332, -610734, -493458, -790119, 178416, 38565, 195326, 563883, 995223, 785175, 231509, 619965, -387288, 152276, -591629, 278418, 696184, 659864, -666016, 552236, 779921, -67034, 528841, -532990, 855820, 516439, 813875, -569449, -484687, 364180, -140085, -425992, 927011, 950580, -680091, -106009, 933157, -796433, -636348, -227438, -281595, 908090, 929292, 834183, 968090, 424188, 30539, -465609, 567804, 83824, -352631, -482702, 753332, 155939, -567874, 34712, 743955, 400140, -642698, 607529, 312207, 747724, -613119, 485608, -761617, -931766, 629846, -867685, -558419, 258020, -976634, 93577};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques875(){
        Integer[] array = {-744329, 221663, -817012, -917339, 83154, -978739, -470855, 779244, 915046, -587768, -661206, 842934, -973243, -277458, 55430, 741898, -138365, 674479, 860373, -775013, 491903, -263768, 562859, 642092, -832188, -221870, 899311, -622306, -623243, 783905, 967669, 380759, -677137, -879094, 287689, -719100, 995618, -718213, -602518, 55435, -827203, -541136, 746964, 336339, -67766, -229664, -661087, 538721, -330376, -843832, 572609, 876180, 64358, -774356, -230770, 593285, 656257, 791885, 597024, 242254, 308304, 114358, -121466, -939562, -852243, -577372, -25458, -933698, 119084, 868886, -871920, -330018, 80776, 581192, 706570, -582990, -569929, -173993, 789651, 917651, -689851, 261695, 164512, 51837, -443148, 658688, -822727, -893302, -244641, 237275, -736344, 862144, -567515, -985023, 67599, 477802, 197326, -819855, -286242, 111731};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques876(){
        Integer[] array = {-885053, -36266, 750420, 908866, -820518, 892637, -523795, -843803, 382773, -90453, 718715, -16298, -271770, 142296, 60896, 306051, 366253, -658224, 172924, -591421, 391048, 129811, 584301, 427777, -621372, 768991, -958682, -601592, -274551, -509186, 642922, -848606, 934699, -39413, 280638, -566844, -130421, -543781, 258009, 437168, -345290, 51312, 482695, -310144, 446306, 416218, -607066, 705747, -441737, 24753, 918108, 713083, -753719, 527710, 78832, 459830, -560755, -126009, -927267, 684, 135502, -762483, -376624, 814625, 62083, -65369, 328269, 45725, 438785, -888509, 8650, 576963, -986809, -153072, -203309, 654356, -518951, -948200, -768996, 19757, 188641, 969225, -69972, -965594, 381562, -930636, -629914, 206927, -15636, -70384, 854648, -764284, -925181, 128771, -12489, -507904, -390366, -572186, 546376, -198097};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques877(){
        Integer[] array = {181876, -207485, -902810, 262258, -38806, 759173, -121571, 201694, 925235, 840926, 177093, -925600, -264096, 251975, 509135, -313031, -496164, 51647, 952437, 739859, 913141, -587447, 679891, 724067, -871888, 357078, -401786, 332066, -13682, -356679, -609142, -102325, -49885, -242355, 736683, -786091, -257384, 944269, 137157, -597283, 458673, -189678, 583881, 83233, 802561, 912842, -689437, 771298, -261680, -835069, 228847, -400846, -969630, 421953, 59792, -866881, -794876, -430955, 960407, 239137, -928862, -285538, 6911, -276630, 660982, -928084, -429545, -402903, 220562, -589495, 677721, 792478, -537266, -105926, 909779, -825167, -534186, -309237, 413219, 52679, 166888, 431286, -521565, -923783, -681092, -648978, -134018, -219277, -701239, -389648, 848087, 181017, -952873, -235563, -555011, 756127, -134663, 152047, -587865, 765213};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques878(){
        Integer[] array = {60719, 561675, 853321, 951589, 316893, -120812, 368323, 637254, -884159, -690998, 533121, -876353, -998740, -224538, 859079, -275094, -278437, 170618, 326763, 463341, 871944, 766679, -524918, 476026, -484155, -89332, 934928, -500674, -465071, 25710, 390452, -577321, 309998, -485452, -804321, -754800, -845481, 958241, 46309, -817316, -276493, -341508, -593209, 761048, -682811, -783005, 529789, -302841, 317047, 640009, 192874, 721747, 781761, 690717, -959791, -566524, 958781, 841142, 682018, 690720, -923998, 156075, -746422, -446596, -694719, -693312, -562869, 224740, 416462, 764431, -284391, 418969, -494057, -358975, -724490, -998481, 326984, 608515, -522867, -444656, 673313, 777774, 97406, -269232, -619726, 97717, 530061, -393395, 986542, 303421, -407393, -776292, -402238, -794903, 827845, 815960, 489601, 812013, 627031, 177683};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques879(){
        Integer[] array = {-519009, 377040, -908399, -138807, 554279, 142137, 647152, 738770, -245599, 366292, -106458, -110546, 798048, -202021, -206528, 539109, -505122, 485691, -404479, -760902, 693062, 229384, -458783, -163571, -44752, -336875, -893227, 938552, 408678, 506455, -865555, 814783, 803449, -308924, 99554, -784558, -708252, 179617, -331269, -984229, -891061, 306756, 612234, -406793, -818474, -310289, 9643, 340060, -768037, 600476, -125792, -862597, 699638, -998598, 382955, 457580, -556868, -65188, 830042, 721856, -626375, 609024, 96554, 425028, 969072, -229390, 279829, 761059, 447420, -500053, -375929, 602946, -197417, 371509, 196575, 644567, -208284, 861219, -173581, 334611, 359574, -932100, 593926, 319803, -568579, -747017, -605693, -789863, -491989, 723863, 169551, -269245, -289470, -209404, 209157, 649043, 718368, 407951, -553790, -44530};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques880(){
        Integer[] array = {-697927, 401725, -292676, -809808, -647416, 55205, 510723, -605163, -516008, 332896, 951686, 519939, 894241, 532367, 268751, 891183, 811761, -547087, 606634, -329771, -14926, 939863, 788206, 558361, 263509, 908869, 254275, 346875, 558362, 471900, 771613, 881927, -41817, -700903, -163326, 973867, -560836, -678096, -864934, 693285, -558533, 698258, 499409, 704268, 730702, -909801, -51628, -299366, 301588, 794491, 202091, -24896, -200561, -810136, -721567, -902190, -616395, 246819, -953417, 282227, -795197, -727240, -967053, 430827, -721188, 535441, 632482, -952610, 982607, 315646, -11266, -383856, -157356, 875152, -336421, -366216, 370379, 384894, -932818, 993072, -364244, -853725, -357824, 465019, 291894, 462159, 106594, -813078, 914419, 811866, 868298, -613541, 599507, -742100, 807283, -921455, -594433, -838481, 226313, -732876};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques881(){
        Integer[] array = {-836095, 279226, -999026, -441141, 775722, -339050, -697777, 63502, -460147, 37120, -227546, -838234, -468981, -144203, 888885, -180102, -420994, 470897, 647603, -835002, 841620, -526755, -570516, -962297, 24976, -389630, 931506, -624202, -586345, -958120, 878199, 848191, -238216, 180793, -243118, -395947, 716169, 665478, -135360, 876659, -362809, -764564, 143791, -663271, -19810, 860122, 605092, -998213, -343044, -887757, -878749, -201091, 396774, -444124, -339604, -364144, -951999, -672045, -586967, 54541, 893616, -53216, 980678, 582703, -857099, -61252, 170109, -237383, 600079, 470334, 142851, 298486, 414811, 826446, 928087, 914497, 927268, -721403, 209390, -54461, -677565, -842013, 35093, -749886, 841219, 690660, -244994, -776369, -694894, -682983, 837580, 874973, 722526, 440771, -335009, -685640, -817881, 471430, -611345, 687010};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques882(){
        Integer[] array = {268399, 339002, -434936, -107076, -301012, 953254, 142055, -330230, -732524, 672188, -810158, 845734, 985505, 90388, 994962, 758191, 656798, 78109, -595139, -11209, 545382, 931109, 248190, -153801, 713345, 193908, 758158, 663003, 862514, -145802, -902304, 203583, -198684, -407583, 486045, 477183, -935721, 760284, -353394, 143880, 128147, -900101, -158357, -178571, -667626, 797656, 640733, 342746, 541541, -213113, -389689, 295578, -484733, 664829, 1297, -906661, 58829, 563217, -691470, -722273, -546032, -632123, -780308, 329443, 511114, 774685, 149091, -772628, -416510, -289550, -868721, 113133, 58191, 472420, -986778, 961830, 453417, -984779, -210536, -574956, -828110, 12813, 369255, 704078, -119038, 481331, -147275, -428352, 50074, -744588, 84394, 877246, 156089, 445927, -856175, 140351, 109492, -362263, -914376, 471292};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques883(){
        Integer[] array = {795499, 504444, 710322, -216283, 968363, 137059, -784986, -667953, 19381, -274713, 193117, -389365, 186036, 185903, 119244, 18043, 863564, 171870, -819563, -517015, -674554, -325244, 602897, 824098, -756077, 557581, 914635, 837727, -962901, 639935, -518625, 748784, 668493, 667751, 795609, 214391, 17035, -150636, 926375, -270638, 547559, 150605, -420228, -159273, -918689, -975887, -163225, -270880, 873211, 173396, -403157, 12946, -803238, -478454, 795309, 338730, -509157, -843343, 925523, -973695, 59196, 759442, -70148, -665862, -917298, 551688, -675533, 582409, -421269, 395843, -78039, 154799, -494550, -166933, 692976, -53543, -775993, -813685, 327173, -57048, 557610, -179152, 181395, -434137, 548614, -169645, 426999, -431237, 212921, -94235, 829066, 796244, 699197, -379455, 662815, 368258, -168232, 600444, -554097, -424873};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques884(){
        Integer[] array = {806982, 269269, 810010, -399543, -944298, -942820, -34394, 107973, -536475, -521594, -949159, 326257, 798139, -212086, -39234, 967101, 75537, -827034, 817093, -539156, -254539, -668716, 903662, 702109, 986856, 658388, -2077, -690949, -923074, -221025, -265270, 541513, -861899, -862129, -630228, -43749, 158890, 110003, 973179, 35922, -64559, -570667, 647900, 987900, 589152, 916533, -8205, 820207, 235044, 649450, -340860, 666300, 599210, 168161, -793540, -308250, 757700, -652402, -852243, -43073, -197945, -634238, 907628, -342811, -146483, -750850, -740363, -912980, 816740, -252143, -616946, -304842, 910354, -202523, 753255, -266474, -830988, -62311, -561345, -66201, -592257, -707885, -535465, -763376, -946564, -620398, 26281, 570094, 75015, -186243, -315402, 523919, -852941, -535447, -436987, 980836, 167694, 490305, -805951, -640554};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques885(){
        Integer[] array = {-791661, -264669, -269075, 851298, -645526, 17595, -158573, -986264, 80955, -863052, -336979, 723872, 242151, 383225, -480575, 467213, 691319, -617076, -993079, -134012, -406979, -593582, -348420, -919655, -764187, -660391, -993990, -880609, -990809, 21141, 389593, 325346, 468055, 353999, -646063, 11028, -734339, -778399, -133475, -301780, 478439, 932338, 361640, 46494, 152965, -507150, -994452, -708972, -659144, 10157, -944120, 515715, 918553, -952403, 641309, 838409, 983951, 483216, 951782, -784439, 786548, -332041, -287349, 321437, 419157, 166076, 327158, 448051, 214413, 603896, -863217, 634815, 133159, -97122, 165867, -900396, -671012, -421602, 697933, 109224, -335690, -773612, -154382, -651433, -430511, -654346, 86133, 154984, -479739, -285985, -865701, 214027, 986882, -338845, -260196, -43631, -30411, -298782, 67976, -18100};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques886(){
        Integer[] array = {-722968, 356439, 876130, 882638, -228570, 509805, -490575, 711945, 69069, 443975, -493361, -827304, -397508, -157487, -454495, 758094, -126928, 467090, -729331, 520680, 839297, -347561, -716531, -243622, -449668, 697047, 512472, -587201, -235918, -603393, -295772, 564242, -573957, -869630, -626096, 93455, 896365, -659200, 561889, 546942, 615063, -547483, 120307, 421359, 732230, 742993, 936517, -961674, 80000, -877619, -604107, 943704, -705789, 772876, -418297, -731056, 660370, -127810, -413399, 977185, -485938, -478522, -855135, -364677, -173108, 239629, 183426, 126717, 231025, -764141, -678677, -710272, 525742, -303527, -274519, 54525, -654939, 347753, 862026, -438652, -165464, -22498, -915147, 451083, -828591, 365493, 396609, 117134, 706381, 432551, -686898, -580855, -750532, 821447, -502441, -355930, -415832, -55850, -606882, 20640};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques887(){
        Integer[] array = {-685510, -377382, 279712, 417789, -32704, 577950, -695786, -806281, 451358, -695052, -22982, -28603, -234116, 5715, -202023, -635776, -675725, 679270, 309280, 335701, 918419, -585785, 475151, 489666, 75836, -303807, 375278, -780979, -439505, -618728, -625764, 819018, -404722, -952913, 516250, -422048, -673427, -828889, -550022, 895759, 923263, -299125, 683263, -963968, 65805, 365535, -452208, -723348, 269101, 912362, -340430, -154356, 909252, -525359, 963709, -642182, -929860, -217381, 708568, -903576, -148567, -348409, -465677, 46077, 606571, -710432, -723101, 111028, 254043, 295270, 896704, -659335, 78202, -212961, 628365, 299422, -433762, -634398, 27008, 107685, -93909, -527559, -862196, -472741, -837016, 894904, 4931, -978398, 747040, -813022, 570892, 216605, -183827, 556093, 759420, -434091, -405597, -210309, -666610, 171651};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques888(){
        Integer[] array = {485055, -545391, 101426, -896401, 761672, -231533, -849437, 88284, -30360, -943534, 177039, -870973, 815292, 348514, -660167, -651510, -340568, 54677, -577312, -737979, 476178, -469003, -561592, 566000, -618814, 909906, -992019, -514356, 870038, -129567, -421774, 762011, -705942, -956768, -493914, 959609, -175214, -802047, -505947, 577604, 593643, -535523, -142059, 227594, 895242, -876711, -239246, -404099, -676061, 391616, -887464, -938984, -692564, 603599, 561483, -992707, 873937, 536985, 819613, -351393, 639475, 674480, -4407, 144050, -886245, 675979, -786719, -438091, -804295, -197663, -300105, 486155, -382591, 262853, 40307, 679801, -376453, 409262, -162494, -562264, 278908, 841553, -6389, -919920, 690459, 284367, -477179, -707232, 284620, 398203, 93732, 417096, 967500, 798300, 542560, 649838, -700898, -739801, -433614, -14179};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques889(){
        Integer[] array = {925089, 191220, 890527, -658827, 88735, -944805, 518697, -191840, 830590, -326930, -217818, 122342, -434758, -637001, -966111, 557984, -398087, -284226, 203526, -400066, -339794, 92340, -395549, -803658, 279793, -183222, -928038, -1481, -358328, -809652, 872465, 844324, -249386, -919186, 520916, -55228, -207275, -603896, -741593, -830773, 764436, 627916, -71854, -353024, 659463, -254157, -543595, -407312, 623176, 682363, 223240, -948859, -187108, 334807, 335887, -309532, 242204, 332573, -482408, -918161, 322839, 334234, -775506, 369244, -19749, -199960, -826634, 511949, 900330, 271032, -201775, 385009, 80083, 792150, 616263, -375084, 340527, 573407, 711961, 698354, 428143, -105206, -800686, 689617, 398195, 941723, -497501, -271959, 80865, -653251, 967803, 918077, -748257, 184794, 278431, -449439, -753784, 614074, -681011, 611187};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques890(){
        Integer[] array = {4680, 748870, -552839, -301312, 637503, 197765, 516352, 458739, 930328, 585699, 531839, 936425, -698726, -219023, -493641, -757952, -904134, 31411, 575259, -222023, -922037, -922489, 70495, 649182, -94253, 525394, 277570, 376328, -659827, -326464, -799286, -11490, 746585, -977619, -795113, -927918, -788425, -832708, -42401, -421428, 293757, -735162, -83446, -689071, 789412, 221127, -190246, 695937, -96202, -652474, -336183, 357421, -523667, -204483, -727461, -299137, -198144, 235144, 208411, 887755, 51220, -89982, 273086, 41644, 958854, 30319, -238975, -186351, -146899, 696671, 248775, -300803, -479324, -869873, 571533, 544211, -711983, -47580, 433210, -369908, 410545, 662122, -151582, 787714, 223396, -35872, 191547, 460603, 936853, 64385, 249584, -744123, 956424, 783673, -725874, 190140, -654164, 384042, -182250, 594411};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques891(){
        Integer[] array = {976016, 362848, 208065, -851273, 620335, -514922, -189178, 101105, -785044, -534509, 424860, -343578, -991800, -48656, -409694, 585137, 850526, -532825, -576669, -710156, 446269, -381615, -343519, 75248, 852205, -398286, 431755, -247993, -201508, -623541, 822857, -5066, 499319, 997278, -284608, 596295, -991770, 396053, 405642, 235128, 343212, -768559, -58578, 28658, -542906, 523484, -619113, -482741, 260161, 242561, 931471, -104238, 382500, -361938, 208063, -162345, 517861, -279850, -675302, -519157, 684220, 954531, -563834, 338661, -683209, 870065, -97389, 381122, 491927, 531136, 516233, -724181, 942495, 149730, 620670, -507671, 505784, 418575, 188982, 473606, -315251, 284247, -194700, -641960, -625484, -679419, 940471, -291717, 931633, 524451, -631826, -402418, -834709, 355896, -446919, 741110, -368251, -307020, -105805, 160624};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques892(){
        Integer[] array = {-685884, -604908, -113223, -193421, 50431, -337115, -69516, -92117, -457968, 224951, 987562, -990500, -538620, -385628, 678749, -779940, 868765, -167446, 15483, -700940, 163010, -135671, 777957, 674536, 768322, -956572, 942749, 765968, -512396, -243461, -741364, 162954, 223345, -285038, 592069, 286025, -452769, 287962, 413913, -428865, -335464, 677293, -446024, -943819, -53978, 16792, -115681, -642616, -690444, -933554, -753083, 454520, 940393, -908925, 405150, -128842, -569996, -908738, -615033, 144864, 807057, -717458, 771285, -15200, -540875, 164231, 738219, -988269, -701928, 248798, 581645, -204922, -815829, 624006, 961402, 737151, -944253, 383964, -899395, -281383, -229849, -325900, 457624, 688656, -740366, 942668, 81700, -556720, -873417, 348618, -493889, -639683, 616307, -697589, 526713, -71029, 391342, 241219, -384488, 628562};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques893(){
        Integer[] array = {-417301, 568094, 455414, -371057, -456239, 294249, -379351, -712913, 621937, 319149, -78027, -135996, -184403, 410962, 264210, -887432, -970761, -524430, 551240, -581944, 898879, 568088, 684802, -793128, 95757, 321534, 826848, -243140, 366720, -39430, -513423, -504552, 632229, -93329, 277605, 970358, 501314, 365993, 181306, -864541, -765009, 276097, 279284, 59666, 610787, -555946, -617203, 630743, -391324, 918179, 180890, -603929, -697647, 539149, -334961, -48218, -605770, -606632, -280261, 366203, 202067, 372452, 682158, 373043, 554452, 682497, -424128, 94, 348554, 770670, 133155, -757370, 18764, 406985, 298328, 305246, -323739, -160710, 937543, 299421, 248990, -397249, 963575, 233347, 914183, -597619, 618998, -86083, 906477, 308076, -552236, 575537, 466640, -142601, 596067, -99095, -567350, 848694, 134472, -829879};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques894(){
        Integer[] array = {-700267, 137516, 945387, -18664, 586615, 899543, 676181, 526883, 999376, 536962, -647343, -923608, -123775, 508527, 439318, 203497, -149437, -962274, -236101, -26782, 441553, -603217, 652776, -495363, 437846, 342306, 383227, 301741, -18127, 559915, -931299, -369665, 734513, 506462, 294690, -246176, 242872, -545978, 975731, 52157, 589268, -809157, -349585, -243389, 908168, -159461, 482640, -225756, 341636, -837803, 376534, 329440, 954438, 124745, 48245, 137373, 975637, -921693, -276100, 11197, 705299, 749861, 369499, 304418, 866574, -440674, -618747, -997, 465980, -771549, 187690, -770810, 307800, -371854, -281439, 906386, 484102, 39613, -209136, -974824, 927852, -576950, -714483, 328365, -345644, 161996, 287039, -113915, 717624, 252792, -233037, 859466, 290532, 623615, -576720, -268830, -601936, 916404, -182413, -439183};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques895(){
        Integer[] array = {-181706, -625760, -790147, 370593, -453166, 799255, 46208, -322943, -686787, 612051, -748175, -348364, -835413, 968123, 421446, 749443, 853898, -78587, -627399, -42092, -338685, 436704, 822677, -32929, -143510, 366275, 774662, -174823, -833174, 632653, -707731, -676570, -991680, -433659, 538259, 237412, 709337, 858274, -308281, -105555, -695289, 419602, 509438, -432197, 891656, 390864, -31015, -589690, 616464, 794413, -910763, -906444, 846453, 266509, -918803, 350552, -397920, 693470, -908985, 309, -775246, 640465, 94600, -683227, 8025, -516189, -74215, -510554, 448875, -599052, -44355, 910944, 20814, 11556, 188852, -931809, -540448, -85455, -587051, -231641, 282364, 24688, 372759, -58088, 612329, -112500, -292344, 711829, 826859, -582378, -332977, -100117, -792728, -495176, 117527, -448983, -159173, -97270, 425742, 10895};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques896(){
        Integer[] array = {79325, -876991, 652143, -931421, 32564, -700083, 588701, 649918, 687141, -615867, -314412, 891889, -513447, -247055, -828837, 116125, 980935, 158278, 925830, 532840, 51053, 374351, -312882, -395500, 136309, -21773, -261265, 236669, 909059, 719425, 61405, -268137, 646278, 503430, -790352, -795514, -30794, -321104, 834031, -327024, 576150, 568551, 717349, -958044, 130339, 472681, -930017, -746647, -167647, 191204, -674672, 140112, 118865, -138226, 72220, 515097, 647586, 38014, -726205, 962084, 95541, -251926, -4105, -430510, 728608, 864880, 951274, 822729, -961865, -554278, 278582, 117782, -310716, -517494, 362095, -644120, -740054, 119505, -316063, 185806, 128251, 467353, -367916, -170861, 645055, -942793, -94391, 259475, -146101, -795529, -186817, 20215, 256449, 141193, 375828, 255804, 22666, 323317, 37006, -624957};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques897(){
        Integer[] array = {-770301, 105625, 117578, -927364, -946162, -274457, -260189, -600672, 758351, -739471, 380844, 392635, -718259, -643167, 646160, -499709, 45651, 319370, 600146, -635339, 308428, -962937, 201156, 765140, 461915, 196769, 446530, -980986, -520510, 420711, 757659, -796380, -729060, 775094, -609734, 203551, -946223, 387007, 21345, 755785, -343595, -612951, -83329, 529131, 506379, -109921, -964253, -705617, 756210, 296339, 864022, -670912, 825221, -671593, -665709, 654984, 700489, 260602, 76192, -641781, -849879, -939980, -379277, 534687, -450650, -923231, 963637, -407145, -499143, 720158, 834481, 44482, -388369, 2890, -963196, 38194, -470789, -306757, 157295, 546339, 416162, 738753, -60478, -133304, 297130, 869856, 351799, 513473, -623806, 753926, 441178, -405534, -36974, 387817, -861448, 252469, -377134, 30215, 190341, 853711};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques898(){
        Integer[] array = {-156837, 296272, -443865, 155662, -157111, 203916, 664384, -11026, 801520, -93429, 146510, -926470, 583839, 414728, -672828, -665387, 407493, -694081, 280677, -895092, -193368, 984280, -640183, -362533, -726404, 614932, 695043, 324732, -730382, 166831, -404100, -767715, 32212, -831963, 811313, -926480, 856775, -353429, -655185, 647356, -125559, -621536, -762774, 182598, -630813, -767066, -284298, 563817, -397986, 706492, -178697, 334101, 355829, -54970, 819842, -942602, -20100, -385224, 896782, 182836, -990726, -764946, 263766, 386459, 995532, -568303, 289992, 289997, 96275, 496620, -284901, 522229, -874003, -843084, 425934, -48191, -635839, -406593, 138167, 939136, 50791, -145268, -225461, 649213, 532406, 564369, -220811, -323822, -44445, -830261, -459647, 251363, -206681, -127794, 732957, 669184, 991215, -51285, 722833, -915770};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques899(){
        Integer[] array = {110557, 487310, -676488, -635970, 781569, 498148, 56728, -970286, -715712, -225775, -851963, -414809, 649022, -968952, 352000, -99533, -645269, -215322, -42398, 57863, 949197, -119704, 266263, 588154, -312343, -357620, -240839, 631130, 323008, 265247, 114384, 104847, 283083, 775829, 903389, -233053, 44376, 679447, 991136, 532117, 69970, 792215, -75535, -16143, -383365, -20852, -295544, 51451, 422604, -20334, 27303, -742266, -975782, -326588, 789732, -774955, 994644, 500247, -267377, -84026, 833886, 308402, -898140, 801403, -403515, 299613, -145227, -727273, 494739, -320523, 221143, -896293, 636066, -404957, 961986, -147412, -59758, 989724, 22514, -998537, 867514, -529590, 282706, 30943, 600373, 617903, -698879, -519514, -905212, -824099, -883130, 766040, 26802, 715499, -367766, -387167, 911024, -70166, -13144, -859908};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques900(){
        Integer[] array = {873246, -691595, 521686, -368292, 348389, 339416, -249755, 232125, 904429, -935212, 527850, -835148, 730264, 958540, -966207, 830984, 456127, -459285, 326501, -280174, 88129, -118104, 711481, 439513, 335879, -596227, 39804, 54422, 477511, 139365, 825724, 38151, 113593, -238659, 272055, -804514, 311464, 932954, -968196, -553466, -394392, 655443, 931805, -220775, 449381, 910760, 2809, -767801, -648794, -699665, -505434, -771547, -507033, -404623, 543782, 845506, -954749, 138329, 654894, -781340, 169693, -67238, -770974, 442737, -418938, -30212, 838167, 761386, -954359, -899207, -989065, 37024, 317120, -404503, -152033, -625490, 966428, 70852, 997116, -959111, 373780, -504178, 473775, 431292, 659400, 798660, -932171, 364845, 592329, 306216, 632964, -347299, 875967, 558481, -733699, -462121, 253992, -126695, 302959, 733536};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques901(){
        Integer[] array = {902428, -27730, -762225, -801490, 497954, -25792, -238092, 311378, 5268, 450317, 55027, 350585, 132230, -692751, -785894, -578778, 78847, 170981, -559058, -897455, 183543, -950968, 263486, -464236, -468224, 542816, -364533, 620342, 249351, 3789, 844598, -33254, -737205, -208969, 597104, -443767, 570508, 577324, 339788, -278520, 26419, -245988, -887855, -131271, 502339, -626223, 583867, -296683, -208281, -802191, -440237, 464809, 343155, 520207, 744497, -477514, 213728, -267197, -397193, -800023, -161312, -819704, 377528, -270875, 945184, 627575, 360248, 613714, -730536, 609113, -465577, 217743, -218829, 828149, 911444, 341337, -633510, -540442, 40143, 862514, 843667, 326663, 717991, -354510, 743890, -108929, -385595, -955437, 34828, -199498, -247483, 71389, 605744, 344074, -157691, 952949, -454693, -158376, 430966, 47832};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques902(){
        Integer[] array = {412300, 201866, 422460, 54631, 650921, -8180, -213066, 946045, 181613, -255858, -640429, -668225, 363549, 93588, -637233, 452893, -249151, -605216, 877826, 595682, 310604, -183560, -357826, 60572, -462672, -915457, -599554, -95, 146113, 464285, 331819, -186707, 240991, -344082, 381957, -475218, -154559, -281417, 715149, -465895, -627442, 704785, 762437, -289041, -406235, 112663, 676655, -295006, -675986, 252998, 472046, -532893, -138480, 304274, -279896, 680529, 572946, -311815, 815154, 40983, -379636, 507978, 605244, -645358, 374734, 645658, -446543, 234993, 46945, 52853, -206528, -507989, -493593, 52620, 772099, 298602, 636179, -258524, -801194, -283029, 647544, 206239, 583569, 426830, 692027, 390335, 905139, -217015, -961760, 760457, -717097, 743308, -945857, -683215, -325610, -995168, -1106, -472564, -302540, 458219};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques903(){
        Integer[] array = {-500700, 72485, 978852, 156326, 546225, 915362, -926401, -317386, 344386, -35076, -195053, -305901, -939557, -15605, -495454, 625445, -90847, -832993, 597976, 331496, 311633, -585297, 60170, 670430, -533665, -352555, 772583, -11527, 528860, -139044, 275057, -816829, 447759, -943588, -591388, -463817, -63751, 951931, 561105, -261605, 193399, 293709, -599755, -301539, -84628, 245909, -826563, 154556, -500351, -785325, -164175, -321835, -912946, -454691, -130503, 520913, 995581, -284838, 178623, -321889, -830776, -158118, -679644, -241018, -338948, -548779, 933059, 407867, 526789, 272526, -593800, -853708, -426335, -947520, 502562, 463609, 485834, 247145, -502852, 89477, 281146, -248730, -7683, 920438, 968585, 460992, -751237, -959966, -735134, 773638, -232491, -903428, -584558, 826602, -113803, 747760, 938495, -20367, -205507, 348561};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques904(){
        Integer[] array = {847003, 564643, 428551, 596021, -516913, -338189, -116375, -256057, 571977, -905181, 211725, 97086, 393498, 329268, -655513, -614977, 353989, -780891, -216590, 824001, 731939, 464248, -124524, -799950, 492276, -564314, -839133, -496968, -582546, -470054, -712366, -223395, 984902, 516544, -324457, 234336, -810260, -834128, 704894, 891142, 74048, -250070, -649170, 941253, -828831, -474286, 726488, 253772, 54328, 96355, 680772, -37345, -881233, 199467, -35722, -327358, -583665, -120389, -577787, -839077, -14674, -581005, 518047, 627614, 552851, -668566, -690546, -831863, 555666, 468207, -180226, -354911, -267632, -286283, 997345, -484016, 144850, 36039, -751795, -384890, 197045, -184662, 163738, -577344, 283665, -114244, 801414, -203876, -836679, 385140, -503078, -335033, -213721, -420788, -504104, -916270, -303582, 462034, -358030, 121357};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques905(){
        Integer[] array = {205102, 948332, -763775, -24091, -597438, -96178, 740686, 340075, -361669, -638880, 212209, -472877, -834329, 859187, -633067, 10338, 915958, -723172, 849578, 97777, 112685, 22448, 502886, 724875, -837414, 332094, -975609, 165410, -520133, 342148, -120569, -377677, -633316, 814980, 237971, -118982, -88637, -612245, 67914, -178818, -690346, -971490, -385941, 538827, -138232, 721165, -619616, 401938, -347677, -33235, 863729, -791329, 912521, -821773, 113120, -816740, -931908, -320863, 698014, 883528, 625047, 328152, 33541, -78059, 543837, -605230, -971292, 506571, 762779, -115211, -823071, -26123, -999344, -252420, -10574, -104030, -55188, -472185, 644106, 42088, -515648, -211831, 327367, -150452, -572696, 924559, 672118, 513512, 339410, -784660, 110209, -695640, 46998, 254346, 445271, -183023, 602296, 85416, 62834, 443236};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques906(){
        Integer[] array = {-382672, 900928, 631410, -549924, -27174, 130071, 103008, 710670, 512821, -267584, 573379, -637009, -854621, -762905, 198348, 6463, 766627, -82741, -880426, -887970, 454655, -605039, 597460, -969050, 115526, -629446, 572594, 340838, 998875, 358610, 750126, -139499, 920449, 898208, -263637, -490487, 71189, 152436, 674003, -726536, -706433, -737327, 580175, 658196, 648805, -477849, 259854, 698001, -8092, -553441, 262906, 328974, -669558, -793919, 773087, 731296, 802189, 910244, -285437, -7555, -844743, -144119, -32734, 731885, 997694, -212742, -953, -752339, -99130, -723425, -796519, 722297, -65788, 215289, 264557, -392074, -793780, -989311, 930000, -107440, 252306, 682293, -639539, -923192, 633294, 81413, -570165, -508307, 662573, -332670, -455370, 369164, 481204, -123028, 658551, 319967, 452634, 758024, 473750, 109922};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques907(){
        Integer[] array = {692225, 710333, -403008, 503084, 934301, -993668, 14421, 323345, 943366, -703998, -800398, -625833, 944882, -206469, 347879, 976113, 594145, 275379, 412274, -579829, 418525, -897523, 844307, 957282, 75897, -481850, -596852, -170833, 818459, 236882, -545610, 79013, 218118, -869388, -264391, -687211, 162317, -472524, 122175, -658657, 854006, 173366, -289365, -695463, -190406, -569050, -689847, -61737, -857664, 47876, -893519, -777750, 951467, 344624, 600991, 140826, -944435, 792944, 715361, -906, 141627, 546974, -169844, -26049, -527483, -551754, 936521, 675669, 505639, -617245, 669445, -277773, 665897, -526786, -691967, -957766, 93361, 700518, -152938, 45631, -566828, 435270, -1045, 122328, 819337, 58931, 339885, 484266, -387952, 97112, 571566, -4772, 625143, -68833, -340342, -962545, -881289, 952656, -205392, 976886};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques908(){
        Integer[] array = {708467, -140353, 489491, -527906, 108379, -693785, 170796, -694073, -234777, -339271, 960247, -204515, 990122, -469588, 941281, 853260, 507736, -736493, 967464, 579839, 108157, 982802, -605919, -374786, 224046, -439726, -91402, 231064, 725828, -618684, 971425, 407205, 587486, -566974, -833419, -614060, -751116, 590787, -983986, 238711, -789618, -566808, -135610, 118924, 30227, 11357, 159144, 999036, -716654, 113638, -904232, 947957, 504905, 691011, -524543, 256979, 285715, -19051, -673994, -489433, 391573, -928813, -219110, 522673, 480860, -651381, -305952, -566701, -941866, -382365, -482466, -320109, 926241, 58129, -149354, 276143, 691590, -523893, 590980, 214923, -721771, 542645, 456925, 985464, -273157, 224666, 194569, 348252, -51844, -827561, 85300, 93390, 448317, 532254, -166146, -780370, -185781, 197613, 480477, -926188};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques909(){
        Integer[] array = {764378, 666347, 718075, -129987, 43256, -569326, 109519, -405058, -102673, 100976, 415935, -633, 876204, 795688, 147330, -606473, 397817, -119169, -965377, -295045, -663356, -12722, 360343, 130444, -771656, -868201, 250665, -241048, -663224, 657902, 613380, -160088, 68733, -493806, -768905, -36118, 920421, 94504, 997853, 802730, -763746, -143031, 149776, -386765, 936268, 600535, -817313, 640431, -997120, -418433, -889288, -328555, -426584, 944902, -339101, 300358, 582007, 605245, -282097, 265621, 595659, 262233, -696250, -879272, 350301, -289218, -553782, -606160, -405330, -907076, 469075, -785720, -788922, -584323, -885704, 351103, 838401, -678425, -85809, 163522, -371258, -158728, 924366, 775951, -497102, 766630, -59781, -453822, 66340, 327938, -558604, -667960, 970015, 445470, -73896, -857344, 274513, 247308, -297778, -957261};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques910(){
        Integer[] array = {616539, -788439, 153065, -544286, 899434, -294756, 299022, -611271, -640110, 283327, 821961, 618207, 426488, -290190, 837009, -570624, 753713, -469843, 312532, 704665, 336454, 979574, -143763, 314929, 172319, 236329, 304734, -454136, 252605, 871512, -582355, 938963, 355980, -138228, -257107, -529405, 344534, 137818, 342478, -693513, 68354, 275632, -24812, 286851, -935130, 215610, 558562, -969460, 826013, -758722, -326380, -249632, 379066, -581200, 262027, 11547, 906466, -554536, -931475, -236892, -604951, -990325, -606009, -705583, -952270, -801780, 604616, 829252, 867521, -795176, 834972, 802902, 653451, 969288, 794790, 178419, -660450, 519820, -945726, -823078, 326290, -606934, 661753, 47387, 879379, -310501, -377510, -342645, -488724, -107199, -940942, 580805, -713249, -634641, 28520, 290017, 753721, -819875, -121246, -635858};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques911(){
        Integer[] array = {94035, 178086, -254504, 142326, -341228, 599195, 309709, 232751, 381672, -912601, -191321, -93365, 969675, -362639, 863682, -927459, 289038, 707087, 582120, -88893, -567309, -412620, -937205, -450904, -771290, 407621, 994410, 558983, -395270, -317890, 194508, -174261, -462203, 998140, -315637, -654075, -919595, 42447, 184071, 891049, 698692, 849864, 45662, 687448, 915671, 831589, 769068, 14304, 497988, 351878, -635931, 302126, 573921, 321941, 647069, -274826, -275465, 297724, -67415, 766285, -107159, 304574, 347532, 997638, -268470, 541672, 432880, 614066, 573275, -97858, -940637, 709995, 221484, -68159, -568329, -283743, 632881, 615014, -347805, -669190, -736277, 907805, -514141, 722596, -72444, -324322, 640172, -712422, 15195, 943955, -634117, 336197, 71092, -566893, 931647, -360223, 766915, -159524, 567420, 158010};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques912(){
        Integer[] array = {-498767, -618308, 714970, 531498, 846206, -811741, 919390, -79535, -38626, -563583, -948004, 969151, 480108, 126861, -5366, -472670, 857394, -443711, 993134, -97849, 902246, 336381, 168500, 741301, -912987, -119709, -291066, -789755, 151100, 36549, -109411, -273777, 422129, 633380, -274099, -251722, -446928, 222752, 908816, -644023, 390322, 758729, 643653, -331506, -713115, 57714, -348434, 361981, 404069, -623922, 654456, -686669, -133279, 192875, -311548, -28075, -754126, 937365, -367263, 581574, 984983, 45092, -451017, 825706, -754220, 780831, -48224, 325604, -693901, 375550, 873944, 410877, 331644, -309400, 408249, -260881, -665622, -823628, 775521, 84410, 596602, -168467, -129285, 799739, -753440, 31662, -281484, -754620, 702283, 620251, -887367, 580195, -286353, 85020, 944224, -500876, -852902, -311055, -349290, 388266};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques913(){
        Integer[] array = {360893, 213384, 72337, 906693, -398422, 386978, -860501, 252960, 808976, 563935, -996831, 18250, -451520, 257397, 213251, 374690, 399131, 159787, -468289, -535263, 882768, 165147, -326571, 972430, 27039, -219987, -242351, -265340, -779830, 290374, -39322, 506743, 779495, 231719, 249268, -152212, -613694, 112462, -782672, -623934, -803752, -297415, 112519, -9084, -286515, 396116, -383345, 780925, -499283, 734868, -785102, -987879, 337593, 434662, -662523, -841265, -875025, -644140, -530756, -576924, 69210, -789299, -208935, 502823, -504687, -861645, 258666, 740088, 984929, 344922, -672982, 988499, 733100, 652696, -777652, -95700, -52128, -859170, 796034, -258839, -401274, 978554, 836703, 742971, -925396, -36901, -700190, 104091, -775647, -525396, 194327, -432510, -151126, 212713, -555790, -345052, -898464, 977764, 502369, 932606};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques914(){
        Integer[] array = {-204321, 453834, -805618, 490166, -323305, 60637, -232794, -735675, 565010, -426318, 294754, 438960, -888009, -156539, -477355, 303958, -915269, 4700, -8089, -947427, 938382, 293639, -559238, -814711, -378916, 441320, -694746, 531516, -958912, 232990, 527855, 207878, 642848, -970942, -946206, 452087, -471979, -511985, 954478, 952277, -124844, -794096, -355181, 448861, 752306, -61514, 609029, 769521, 872957, -786646, 853258, -97835, -917412, -723213, 150562, -515950, -646847, 68082, 678061, 335328, 600787, -991476, -125958, 566593, 808495, -72919, 86912, -212591, -857072, 759393, 828839, 171554, -257338, 329857, -718533, -929072, -711962, 298080, -666705, -419016, 908071, -796405, 925693, -792201, -605433, 267930, -30237, -881116, 725488, -997967, -516706, 560306, -287519, 990531, 506593, -672650, 814220, 673510, -91434, 373587};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques915(){
        Integer[] array = {-776557, 944594, -959208, -684925, -23761, 418011, 609758, -106044, 465721, -975733, -518843, -719603, -705230, 157777, -483084, 131725, 550576, 95161, -751686, 147891, -873385, 714439, 558616, -308933, -281560, 955475, 464389, 981133, -548279, -90639, 84284, -246429, 386486, -201641, 927945, 631533, -441690, 913064, -606289, 2505, 474243, -372255, 196176, -717936, -774930, -129605, -643037, 315928, -517768, 322525, -659728, -209502, 149317, -551567, -838182, 515542, 75112, -766953, 361593, -478070, 235296, 554545, 400491, 95335, 761203, 190842, 26749, 461532, -694680, 790373, -742253, -652878, -351166, 492633, -20535, 499624, -617541, 371804, 630045, -438436, -190861, -112083, 695723, -642865, 953898, 434207, -746878, -52514, -289146, 69538, -113024, -696293, -738395, -115671, -952937, 309017, -807716, -931091, 413472, 754163};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques916(){
        Integer[] array = {-500665, -118499, 60469, -551110, -290482, -836431, 520606, -796486, 791913, 708329, -288420, -905244, -987841, 355083, -672113, 698273, 354022, 74171, 552127, -926820, 355807, -687503, -754779, 727159, -745392, -773280, -784630, 904224, 286137, 204262, -371083, -127298, -471608, -763394, -416327, 734385, -588782, -89603, -279121, -164859, -114912, -864211, -674731, 99926, 960906, 960775, 987407, -194439, -921060, 3312, -521244, -146811, 30907, -658583, 496418, -81683, 351528, 545909, 338104, 513667, -387954, 574047, 801762, 893934, -64611, 996592, -455932, -118365, -866479, 354817, 280450, -444857, 747896, 320804, 83996, 629669, 22133, 796468, -3194, -910346, 605778, -611786, -802284, -391463, 122988, 686822, -972053, 241732, -546557, 982162, -343576, -129337, 551825, 364900, -233661, 144636, -277904, 968777, -228596, 419895};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques917(){
        Integer[] array = {523975, -843522, 807454, 25300, -888446, 398851, -955899, 919833, 968973, -592979, 630441, -282814, -882149, -414303, -245770, 805656, -311293, -991308, -419320, -301876, 406380, 289484, 922821, 491116, 582244, -693188, 944835, 907456, -737977, -756845, -656084, -873264, 37071, -773090, -624253, 183500, 187899, 917186, 122770, 306766, -785080, 889782, 986619, -242758, 570906, -682249, -74828, -573788, 969068, -700290, 682513, 894682, -113133, -425029, 900457, -55672, -398491, -200790, 576577, 676985, 383101, 19150, -825001, 800268, -522688, -407919, 435132, 445194, 630371, -941197, -356552, 204605, 59974, 367110, -222897, 866557, -129429, -312049, 602069, -858490, 558483, 932274, 561955, 496818, 407211, -903746, -91170, 413100, -799584, 25110, 316502, 465958, 100269, -239278, -891922, -517099, -650156, -448350, -35261, -501880};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques918(){
        Integer[] array = {459928, -11932, 577312, 469311, 256996, -697682, -713234, 966292, 505514, -695584, -700683, -576354, 482489, -957657, -22115, 471118, 441218, -985436, 191741, 904490, -9913, -659087, -468636, 602356, -461107, 391378, -815033, 447925, -888884, 136695, -663056, -415600, 746398, 262345, -332988, -593428, 199857, -816410, -897811, -61921, -751760, -858092, 106322, 393364, -463613, -151243, -726017, -221524, -735303, 511729, -647319, -301671, 601498, -871862, -519279, -664059, 496315, -471001, -729402, -189460, 214280, -476123, 917891, 236351, 971922, 220571, 725698, 32296, -414142, 802908, -576320, 867027, 673235, -14863, 922073, 538428, -756622, 356390, 54456, -259070, 71319, -86279, -103589, 779570, 617312, -727839, 996774, 316553, -970947, -993963, 924663, -307361, -90172, 247082, -685737, 65599, -367379, -59223, 678330, -812040};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques919(){
        Integer[] array = {992217, 270240, -993377, -422614, 986442, -939344, 818945, -24562, 779425, -294689, -370853, 613386, -423602, -706677, -846276, -9640, -233841, 267097, -252221, 217050, -156573, 881807, -843682, -927080, 410, -233229, -754700, 887747, -178608, 229249, 868892, 531176, 719289, 224664, 518171, 909511, 446984, -623585, -148715, 859724, -794469, -126923, -994277, -456492, -662510, -139562, -900260, 356081, 847013, 814620, -231065, 340624, -200303, 616014, -586549, -17138, -555388, -371699, 535685, -11342, 482902, 68415, 527387, 696007, -425673, -639749, 977305, 344940, -325663, -621990, 7963, -28868, 710411, 905207, 599821, -899796, 492738, -985706, 301404, -829238, 586138, 145714, 493192, -306246, 456945, -1354, 329363, 847420, 896645, 472787, 629286, -185201, -388585, -489214, 316492, -165250, -178388, 161579, -93411, 664468};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques920(){
        Integer[] array = {-974539, 191362, 989276, 283810, 926002, 82759, 989086, 365806, -778643, 318947, -364144, -499560, -13995, -299780, -837527, -352842, -505657, 894588, 925678, 106701, -19943, 366692, -157742, -615798, 186069, 362129, -754684, 563024, 268373, -311661, -13305, 715096, 553999, -707452, -456946, 688206, 89109, 503868, 169771, -750245, -575768, 931550, -85798, -322727, 105302, 472444, 388376, 255613, 531958, 564815, 905770, -173485, -632061, -70547, -9434, 541003, 87379, -463020, -925441, 433502, 830001, -329687, 798044, -44563, 286517, -496129, -591619, 768289, 798727, -824651, -683584, 413122, -362629, 986536, 656829, 814424, 697815, 230502, -968839, 631958, 530090, -915313, -275976, -361321, -160925, 520725, 146276, -417308, 134964, -206133, 675887, 692668, 363809, 37701, 700270, 648049, -777670, 304540, -252139, -229651};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques921(){
        Integer[] array = {778225, 207258, -778514, 202005, -200127, 148159, 606948, -193164, 257014, -161638, 32271, 279962, 124648, -470623, -713241, -907162, -914969, 284376, -697532, 618755, 653947, 364834, -885118, -357405, -905544, -216989, -254016, 762934, -272364, 408735, 591788, -529201, -288770, -110017, 489712, 739274, -80789, 856037, 637393, -620382, 610241, 678246, -446616, 171476, 392413, 787625, 672731, 109207, 135989, -661000, 357111, 8723, 596647, 127742, 478778, -203485, 831916, 391058, 705732, -916435, -67013, 3359, 18929, 416490, -901173, 484920, 667702, -600829, 450809, 535822, 32078, 128131, -670381, -82465, -577773, 475159, 470458, 685827, -416921, -844338, 828176, -962349, 35514, -894373, -782829, -517056, 622938, 416943, -543370, -444487, 122673, 53494, -501596, 725002, 974886, 869602, 575892, 204995, 699218, -316650};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques922(){
        Integer[] array = {-775419, 377873, -953365, -862669, -906076, -61394, -654642, 545406, 290665, 749959, 124434, 551668, -565935, -992264, 394197, -938853, -74658, -620270, -608132, 256288, -969908, -486945, -162420, -618036, 238685, 283662, 211442, 667638, -44459, -860777, 520965, -76963, 978116, 18796, 171279, 761850, 41961, 798046, 329928, 341676, -342871, -508101, 651856, 904611, -349740, 135875, -82133, -968275, -551449, -150979, -173744, 920816, 285337, 923809, 514061, 607089, 734724, 723931, 427383, -113477, -86608, -176278, 67744, -76248, -344451, -826097, -330049, -427223, 911719, -589813, -855174, -768248, 77656, 435252, -934558, 548413, 821136, 249726, 250931, 604342, 250014, -88184, -226660, -193512, -323956, -769373, -430668, -516609, -639265, -17579, -376330, -861963, -431183, 138852, 793957, 58404, 865266, -710178, -881874, -449711};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques923(){
        Integer[] array = {-311708, 446930, -149362, 283099, -452536, -915212, -516551, 743274, -4162, 544956, -874256, 484409, -363912, -401517, 776977, 54232, 479834, 43550, 532469, -567893, -127685, 762562, -814354, 688307, 294785, 902578, 176001, -466746, -250944, -810920, -549545, -879055, -671904, 896105, -677970, 227305, 298431, -392931, -987595, 111141, 795884, 961365, 110381, 29450, 300784, -553049, 624866, -33734, -304526, 614206, 389449, 174666, -412781, -606741, 164650, 331051, -344962, 375520, -750616, -635566, -27714, 63273, -309242, -983636, -205928, -304910, 425632, -449236, -812593, -548794, 395118, -230736, -902065, -211642, -238536, 795139, -253229, -438466, 760181, -823317, 222974, 232893, 158574, 965723, 934162, -721653, 535880, -391905, 859640, 968215, -122853, -565931, 827025, -58007, 798619, 472368, 765893, 270646, -735966, -374710};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques924(){
        Integer[] array = {140175, 63262, 227797, 281885, -503343, 207591, 706828, 672498, -253795, -527785, 724137, 684441, -262822, -363683, -700732, -780977, -829382, 624798, -387507, 47142, 101502, -156020, 14887, 797496, -236469, 642033, -161304, 929702, -794861, 613845, -533689, 406636, 263725, -629986, -186113, 100047, 997287, -716171, 732630, -241651, 566880, 218706, -831775, -122250, -242468, 283865, 399051, -553057, 634106, -565954, -721498, -277766, -330454, -447243, 877030, -148684, -596687, -550438, -457698, -557179, -855169, -628746, -269554, 514241, -363813, 56749, -831868, -933539, 504132, -692096, 456965, 250618, 193801, 899032, -803583, -10241, -586800, 10445, 212004, -164069, 427338, 851832, -521535, 355194, -793107, -925520, 550273, -122317, 447216, -468793, -378611, -851109, 713657, 442388, 390745, 860267, 449447, 165944, 502239, 692533};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques925(){
        Integer[] array = {893393, -51320, -182891, -399025, 970565, -971200, -753327, 23854, -999940, -2266, -978217, 597417, -242426, -175908, -930689, 59159, 122813, -897359, 494438, -410398, 60364, -217343, 201640, 620262, 646034, -151861, 224822, 222150, 363162, -503783, 33068, -830611, 325891, 289468, -180270, -376063, 239106, -420035, -993019, 693218, 724732, -470890, -666072, 824022, 579128, 89347, -689549, 814643, -5722, 261414, -362210, 979841, -112544, 148654, -134228, -388655, 345203, -516703, -498512, 779865, 510776, -791454, -126610, 389133, -591725, -398792, 210469, 423876, 569558, 157440, 238096, -19532, -800851, 877654, -505408, 252344, 706309, 334619, -257989, 636385, -26504, -839960, -492251, 260772, -143504, -91623, -924406, 55942, -282009, 881238, 245604, 573826, -168102, 90128, -696647, -636935, 217593, 784930, -342320, 732105};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques926(){
        Integer[] array = {-426675, 537502, 685791, 712579, -671181, 486286, -257898, -689124, 495836, 932145, -926590, 700476, 678692, -180202, -122587, -669819, -528885, -345788, -371879, -292184, 994815, -339060, -622711, -894595, -811153, 363071, 368057, 949558, 750953, -847113, 308343, 923458, -637986, 617145, -320791, 795960, -858733, 120454, -314030, 336941, -1369, 994899, 558327, 408950, -196920, -361700, -360423, 389335, 790794, -724827, 460599, 810731, 219700, 254588, -519822, 942685, 130875, -428289, -349195, 887090, 783788, -192388, 468428, -552225, -972192, 74331, 980803, 77538, 878071, -357058, -750102, -723743, -577327, -525054, 171103, -119716, 478732, -966548, 520243, 894850, 495941, 328471, -323067, 194463, 699673, -498375, 917017, -532230, -255224, 844230, -322107, 531280, 381167, 426266, -23475, -919203, -459807, -50380, 10062, 773837};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques927(){
        Integer[] array = {835590, -743697, -598770, -812118, 88806, -695006, -420171, -563735, 684755, 364088, -876839, 180820, 566985, 593719, -726010, 290195, -587526, -980472, 256825, 541914, -979433, 988776, 184163, 918873, -758967, 70193, 415226, -651030, 152171, -848133, -715152, 473325, 300464, 865416, 733923, 735653, 205249, 359175, -214741, -166609, -193745, 471281, 775456, 420455, 284653, -151547, 580821, 677659, 422698, -521020, 505205, -401163, -930290, -424875, 532767, -41211, 527377, 284647, 861175, -605424, -791384, 223862, -5975, -499814, 711532, 456104, 540285, 537189, -762918, -842975, 47408, -996768, 94246, 788998, -349099, -587764, 849487, -702821, -364092, -358469, -487438, 844570, -47772, -937367, -217540, -530295, -900259, 742445, -633460, 299186, -110682, 208745, 705430, 200912, -518239, -705106, 397191, -974302, 543119, -45739};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques928(){
        Integer[] array = {-609447, -17140, -423135, 114582, -620147, -72515, -280228, 124524, -858600, -953858, -694239, -703726, -211084, 668570, -998367, 330354, 83408, -273242, 333994, -97481, 586457, 44140, 533580, 901680, 655383, 655690, -235251, 665139, 683715, 767140, 971776, 543645, -638949, -975291, -838894, -76734, 994414, 207211, -106523, -516502, 912727, -376037, 792929, -70239, -505381, -250825, -183572, -774536, 980271, 542816, -243179, 142307, 334616, -812545, 386121, -541474, 732763, -183625, 274502, -408509, -348957, -575145, -999570, -355088, -624520, 196469, 474837, 837182, 568306, -308771, -403537, 37455, -650980, -183236, -151811, -972928, 719701, -433549, 713619, 142883, -608281, -697890, 3927, -418395, 45379, 921395, 161755, -426100, -52423, -55674, 928805, 482078, -791906, -181078, 508679, -288434, -976093, -456368, 331887, 361493};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques929(){
        Integer[] array = {-957561, 679686, -60361, -971022, 457703, 86212, 946862, -95419, 935719, -310092, -684467, 46604, -144075, 193836, 438173, 171979, 545440, 565352, 287177, 62705, -100868, 179791, -4020, -767069, 764858, 277106, -551658, -320769, -348515, 881217, -635065, 939806, 700762, -342570, 872730, -31468, 995261, 870262, 876907, -100505, -296580, 90523, 342219, 431359, -135291, 147079, -341264, -53704, -769214, -607654, 912663, 221054, 419419, 288177, -940287, 874093, 522182, -309689, -413220, -947849, 279931, -959419, 813399, -147518, -280879, -33517, 992526, 642116, -742879, 556919, -457323, 607281, -603390, -80415, 751239, -518196, 626533, -251151, 163210, 188113, 375952, -643007, 62639, -60470, 451684, 663703, 41466, 46864, 975452, -528763, 946399, -812258, -647058, 259554, -450063, 755338, -651454, -637478, -651431, -847593};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques930(){
        Integer[] array = {484265, 807376, 660287, -479909, 976752, -97383, -173337, -203476, 460377, -14286, -336046, 649142, -932300, -737756, -108327, -99326, 190719, 878514, 28075, -14167, 546482, 506787, 884409, 36108, 711863, -181402, -907810, 951447, 98253, 573295, 238516, 243399, 587743, 120537, 151067, 422351, 368783, 394147, 91503, -778031, -217447, -798063, -799819, -849911, -927003, -736295, -789420, -843909, -288768, 429620, 694205, -251045, -902058, -372407, -621860, 718662, 780850, -681757, -731311, 805057, -178490, -429435, 595402, 342149, 77421, -157634, -455535, 692523, 612592, 772510, -892025, 743618, 873496, -858217, 873433, -905532, -398494, 166973, -801045, 149738, 377738, 543238, -260838, 211057, -1382, -847520, -398190, 834688, -102403, -637453, 690298, 919591, -686326, -562621, 162045, 105444, -214832, -87145, -474865, -260790};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques931(){
        Integer[] array = {-709539, 635533, -23923, 874206, 204895, -617687, -134120, -169468, 410216, -357228, -862300, 12828, 510784, -48495, 967434, 116950, -541650, 630921, -729591, -106872, 341487, -813133, -612091, 739718, 709190, 370653, 447681, 622981, 26877, -768539, 239549, 20258, -851093, -114734, -453596, -223197, 888206, 690480, -552739, 799032, -921213, -963275, -483196, -8125, -115054, 761978, 582318, 393517, 219731, 912865, -362070, -84589, -745041, -455615, 969774, 808293, 33274, -375865, -449663, 578301, -30085, -911787, -622627, 628287, -551524, -733968, -283918, 443610, 40504, 904007, 312949, -443741, 681234, 567558, -512810, -427834, 925663, 92365, -320074, -239233, -774445, -395406, -251954, -216510, 39034, 930216, 988488, 196155, -923121, 27927, 361958, -144486, -700083, -901303, -469534, 501537, 464496, -97414, 730339, 758587};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques932(){
        Integer[] array = {428682, -246548, 428006, -702512, 872664, -126118, -260381, 306142, -701517, -274101, -665596, 960366, 160867, 6093, 550995, -297543, -701553, 280774, -987718, 441726, -161822, -320550, -384738, -434627, 386990, 164604, -836080, 160701, -138552, -850329, 23008, -110502, -115386, 435230, -581464, 359605, 848860, -177339, -818871, -23486, -887912, -419908, -700138, -166431, 857619, -318136, -361692, 922687, 477998, 494811, 644810, -794306, -634023, -712383, -710375, 876156, -45839, 35401, 435301, 47951, -247133, 665269, 559495, 680423, -82767, 403388, -451994, -425587, -234633, 97280, -799352, -339755, 817615, 130350, 316809, 433189, -832158, -311458, 161423, -575074, 706666, -866098, -592833, 449553, -447002, -786286, 807165, -930725, 871328, -373823, 144491, -54149, 48173, 721737, 391756, 828459, -640016, 206928, -144886, 886108};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques933(){
        Integer[] array = {636881, 210188, -999236, 135232, 137434, 989040, -654263, -929770, -88327, 848666, -991269, 82256, -194753, -923914, -189213, -275440, -537817, 227070, -114735, 245115, -452176, 676815, -872639, -752734, -806289, 927957, 980656, 155579, 537094, 323271, 236843, 439446, 100026, 625991, 212287, 919341, -691012, 539285, -119994, 940745, 701890, -854174, 436013, 372476, -291275, -865001, -458154, 429644, 576458, 703266, 815086, -791432, -76483, 130696, 149325, -420406, -732312, 753170, -963717, -576258, 771440, -206961, -675919, 272744, 79940, 567159, 460516, 982589, 273838, -261816, 734632, -566910, 840084, -263846, 852205, -527049, -894850, -408842, -125669, -3283, -874243, -666020, -776547, -916191, -785860, -907199, 552114, 644987, -658409, -451854, -560675, -754285, 909347, -7952, 393419, 966164, 844116, -151253, -808904, -878080};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques934(){
        Integer[] array = {225224, -533159, 97759, -57763, -567316, 406697, -718799, 244083, -620155, -517812, -717315, -432130, 329154, -879975, 897298, -220311, 116552, -364387, -935193, 299795, -300989, 828293, 135489, -14598, -954673, 922762, -210929, 167990, -200589, 901233, -44054, -768162, -66455, 372845, 381352, 806919, -594766, -578695, 797143, -755316, 601430, 558262, 244687, -909369, 914520, 856256, -225502, -269704, 391327, 82785, 432431, 304280, -40495, -590582, -966409, 266258, 163203, 17280, 27961, -627719, -553618, -320426, 982445, 557702, 130802, 415371, 186083, -717451, 370712, 501934, -652640, -343925, -898819, 744910, -996651, -783693, -388946, -223826, -395571, -689080, -544671, -98643, 567930, 468680, -36507, -190649, 206631, -915388, -108230, 250790, 31353, 86257, 440566, 540131, 901846, 919593, 531587, 110407, 524774, -592558};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques935(){
        Integer[] array = {454240, 940628, -4956, -434876, 709035, -903981, -53032, 233311, -150520, -217175, -834796, -433302, -957521, 70616, 86414, -45228, -9565, -163702, -70294, 99573, -171562, -210870, 531164, 175492, -496377, -809063, 6613, -871001, 309677, 73855, 845016, 432351, -597639, -147676, 956403, 968718, -713310, -382172, 7986, 329181, -710696, 650500, -589761, 274245, -151103, 519725, -707210, -255184, 29336, -944114, 241220, -92417, -720640, 131165, 702710, -158059, -296658, 920090, -68827, 371776, -412317, 424422, 360947, 924880, 871557, 819363, 739521, -146252, -212507, 254740, 337842, 123572, 797645, -348515, 58706, -616335, 870149, -68164, 18271, -205742, 757326, -649405, 151709, -128744, -208422, 754146, -116464, 9625, -194440, 244235, 629071, -719686, -822697, 980801, 645543, 678749, -277121, 869598, -160542, 104213};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques936(){
        Integer[] array = {13682, 411423, -530716, 18705, -41826, 759047, 415573, 263392, -900521, 179441, 149527, 519822, -992241, 891189, 534662, -685555, -387178, 524475, -801252, -989314, -266391, -532186, -788259, -933911, -34318, -928869, -462491, 384039, -460635, -148093, -148416, -241728, 73101, -906870, -164500, -252397, -113570, -675680, 909736, 971471, -966770, 342706, 786983, 396035, 31907, 558389, 329718, -94789, -447338, 637637, 803423, 639905, -594532, 597516, -955150, -656134, 745138, -601439, 220664, 177475, -699631, 174426, 153370, -161311, 977452, 337485, 288821, 823247, -357841, -911063, -162850, 602094, 800215, -346392, 945546, -890685, -476134, -814281, -673562, 602394, 616288, -833306, -601654, -178195, -21385, -778878, 760206, -595338, 316007, -523121, 731615, 664312, 549410, -3679, -135921, -182295, -506568, 293706, -358257, -345745};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques937(){
        Integer[] array = {-617520, -972496, 525633, 855422, -619994, -721479, 537752, -822979, -307146, -559310, 498812, -934559, -375791, 26456, 549106, -599685, 12251, -678985, 638579, -329075, 567416, -546476, -937422, -203733, 114279, 318752, 352564, 536757, -257563, 582112, 463314, 155812, -598634, -282206, 773321, 534966, 990910, 764776, 315953, 653788, 618830, -325892, 981646, 390259, 574558, 675282, -454495, 169765, 431021, 717449, -679637, 792580, 864403, 324531, 389079, 967239, -968270, 503013, 669345, 970680, 715705, -383396, 618524, 762813, -682893, 221777, -818817, -634565, -224272, 101519, 144583, 344220, -132211, 258394, 857381, -678322, -80383, 647724, 539759, 955609, -181194, 97635, -821810, 428418, -46645, -174669, 714919, 521773, -253453, -92523, 898920, -798849, 898396, -420689, -307893, -506039, 825908, 509779, -654532, 154246};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques938(){
        Integer[] array = {-869900, -958381, 471290, 152942, -433018, 102841, 746326, -836182, 239593, 245768, 763610, -689058, -581021, 682650, 660541, 740985, -369220, 797379, 819975, -922991, -163161, -434002, 808999, 131571, -758615, 464425, -695790, -145967, -278139, -599780, -190452, -602877, -458612, -902212, 334750, 339117, -63688, -694368, 708823, -448422, 473334, 966421, -964808, -900752, 307346, -729360, 345665, -335703, 852930, 842582, -730783, -379524, 760519, 548417, 942781, 752906, 443199, -790492, 47349, -468218, 683286, 57016, -241223, 14017, -409930, -266802, 206440, 789974, -209663, 270070, -934709, 857408, 366366, 37374, -241745, 737686, -355444, -821252, -29839, 996361, -622645, -866478, 973889, 969264, 681728, 655026, 116600, -256843, 637896, -675886, 438182, 39890, 233635, 424058, -757048, -182239, 773881, 639487, 797706, 250369};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques939(){
        Integer[] array = {621276, 143762, -73332, -661356, -348476, 28099, 355266, -967284, -762105, 149514, -111198, 11847, -859434, 207009, -749476, -358561, -183164, 461076, -212696, 347312, 384744, 490742, -940319, -246147, -549679, -487701, -217316, 873698, -366852, -638019, -978699, -618590, -492076, -663758, -312687, 280006, 41868, 542452, 243599, 951373, -625935, 734929, -261656, -113899, -427632, 968719, 694081, 346938, -377043, -321841, -781122, -412477, -60223, -850688, 285719, -326087, 122269, -626031, 97376, -528556, -910327, 122383, -10775, 440208, 669725, 39095, -352302, -425879, 96785, 834614, 921338, 709274, -934919, 681144, -937826, 942458, -158647, 610203, -149142, 180661, 93587, -12188, 710886, -137634, -38273, 832096, -948262, 145886, 619320, 694569, 746491, -731319, -70159, 380054, -310916, -911425, 549896, -750975, -371639, 164630};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques940(){
        Integer[] array = {-610853, 363904, 142625, -900678, 910143, 369381, 505806, 424392, 567639, 650831, 963742, 969039, -560906, 421753, -310870, -1278, -961301, 594004, 707531, 435025, -779051, -421592, 762195, -341394, 532487, -840256, 151700, -655578, 227372, -545119, 538662, -252224, 662539, 596699, -586309, -87098, -780363, 314531, 201934, 117479, 480407, -121034, 801180, -350306, 825128, -393910, -184692, -189837, -376043, -168510, 352554, -272636, 955710, 633839, -165116, 410674, -888678, -521226, 204610, -759434, -951375, -421165, -139506, 708802, -224732, 630658, -418507, 225989, 652275, 858455, -798513, -153804, 55111, -481104, 742377, 592190, -946450, 581208, 19318, 361283, -30361, -64990, 677068, 297014, 258382, -904089, 462764, 548667, 559425, -869910, 560715, -382500, 252402, 54787, -816136, 524952, -164946, -885511, 293433, -95068};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques941(){
        Integer[] array = {-891241, 652700, 485281, 419855, -880577, -356738, -195482, 449449, -985238, 853883, 593292, -658660, 799237, 878436, 461583, 165434, -134118, 909957, -435525, -50584, 470771, 371897, -733767, 389471, -406060, 128353, 370766, 113358, -586061, -46263, 178942, 960572, -91673, -325588, -984386, 998207, -658, -880784, -185894, -553814, 911884, -630703, -973858, 999020, 958618, 351808, 721000, -234576, 13530, 854015, -659616, -972342, -195250, 344985, 834868, -15197, 460055, 852358, -657797, -451025, 910663, -773039, -321833, -991728, 392405, -292547, -366916, -270536, 348186, 573946, 19948, -309049, -591129, -768425, -425689, -988616, -418257, 655633, 249132, -484373, -326148, 531037, -121406, 992690, 861578, 398637, -717061, 654711, -948238, 375292, 445476, -454277, 9436, -289699, -806582, 628244, 259543, 176028, -105387, -639518};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques942(){
        Integer[] array = {-320650, 911338, 570399, 241678, -792922, 331958, 327326, -967287, 289299, -367623, 167694, 295318, -174592, -39976, 995799, -278015, -414332, -586681, -48086, -796255, 816762, -710246, 754132, -929076, 317219, -954427, 742425, -703005, 359859, -282359, -108938, -24427, -934602, 205034, 131613, -307197, -219100, -476563, -443760, 762314, -674274, -591212, -972352, 546852, 579108, 81732, 367971, 997734, 803826, 251927, -823407, -757607, -458721, 144641, -58724, 10457, -680248, -406932, 767287, 433686, 527966, 112997, 316421, -377266, 526953, 782426, -745113, -746824, -521224, -614, 324737, 953582, -316961, -591602, 751181, -193352, 448411, -386354, -757030, 249186, -435095, 20631, 974577, -467358, -712471, 854557, -157653, -281502, -839651, -553937, -470666, -192149, 15267, 113353, -535754, 237691, 465719, -965464, -741839, 826338};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques943(){
        Integer[] array = {403745, -442494, 283900, 367954, 154202, 241531, -41835, 585969, -359969, 816580, 828173, 910965, -681771, 588097, 704210, -569763, -882019, 219710, 292056, -276400, -42157, 849237, 588469, 635958, -229009, -634697, 158069, 56708, 802339, 15388, -795183, -428580, 747574, 781716, 191637, -317289, 755407, 509228, -757711, -262222, 921680, 410719, 969980, 290257, 802201, 503428, -438847, -142999, 60429, -26330, -5253, 100293, -738591, -864092, 108739, 730875, -238522, -523182, -999491, 304693, -922672, 282045, -376257, 830125, -534724, 342391, 668603, -596156, -25096, 281470, -387404, 10589, -769001, 888338, 427933, -7238, 466451, -477687, 254624, -310962, -219601, -418320, -430152, -43124, -271522, -560022, -440601, 83913, 826672, -680406, 974798, -236958, 723935, 744635, -2007, -99179, -955809, 473903, -836619, -591101};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques944(){
        Integer[] array = {-829708, -275694, 467341, -26267, -464111, 190158, 970699, 21322, 145433, 651401, 62384, 390491, -630027, 819683, -840405, 126898, 94068, 176205, 864940, -988811, 304265, -861832, 405243, 389807, 314497, -216345, 227134, 328344, -162904, 362126, 537101, -939669, -263229, 356371, 496390, 256232, -229207, -547405, 425173, -639761, 846639, 738523, -52829, -17068, 968079, -732760, -155397, -543024, -288844, 991583, -723452, 601179, 704039, 306448, 604052, 691479, 134932, 500564, 746929, 360090, -540750, 726690, -989769, -421038, 1805, 411653, 635392, -622418, -82105, -847327, -505724, 814962, 293190, -612438, -904934, -961433, 891173, -69151, 796163, 716799, -919091, -873418, 196917, -487182, 242184, 729299, 475207, -753206, 19950, -366895, -837425, -320813, -898564, 232072, 244218, 425175, -780119, 834844, 482903, 813513};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques945(){
        Integer[] array = {-527404, 276587, -869253, 332672, 599900, -995489, -752167, -66130, -370644, 473954, -402142, 418057, 934864, -590925, 306870, -574124, -143567, 846343, -400476, 173381, 257674, 400528, -592616, 140905, -234185, 516103, 190963, 850800, 116494, -684566, 389049, -943311, 257404, -968128, 50228, 383616, 916276, 960924, -73039, 143494, 497828, 877535, 162656, -441677, 513123, 629639, -455284, -914129, 388430, 782113, -667724, -303993, 232979, -775144, 727178, -912016, 800831, 474197, -218480, 968618, -705246, -95529, 435726, 692522, -10992, -926839, -370414, 378488, -84171, -745897, 353986, -21433, 260198, -52918, -508980, 926672, 436300, -326659, 23160, -234937, -453665, 428309, 519156, 54260, 826729, 371340, 734325, -732987, -510876, -552486, 818442, -389566, -108021, -947725, -533076, -896982, 267979, -671701, -819521, -147225};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques946(){
        Integer[] array = {94944, -262590, -559150, 736684, 471498, 15101, -848269, -57575, 215544, 381658, 731291, -441124, -601618, 820676, -617299, -733508, 636930, 86453, 859939, 510095, 153846, -330450, -712241, -544852, -521142, -691733, 319588, 699268, -271810, -243838, -623967, 984334, 536901, 757606, -97241, -381348, 332158, 19124, 974101, 787420, -175425, -72886, -696666, -233350, 350493, 930366, 720625, -919063, 254106, 578499, -79538, -819138, 698505, 132269, 19475, -64636, 921676, -516921, -235278, 625124, -999400, 806515, 739244, 878004, 272394, 286214, 977833, -792803, 929489, -46726, -174078, -560981, 852138, -537400, 343464, 853179, -403822, 698216, -71090, 637736, -235792, -864471, -527314, -869224, 809755, 158038, 366894, -998323, 339102, 270913, -760639, 42256, 612080, 788696, 627829, -894038, -433619, -278145, 189669, -87898};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques947(){
        Integer[] array = {-949992, 179334, 237118, 501599, -420243, 937048, -661120, 478506, 328077, -835565, 221448, 531685, -521418, -728517, 989070, -815994, -338416, 366485, -546241, 238855, 854038, 467546, -559650, 170291, 484630, 325306, -267353, 457975, -258788, -782166, 477491, -667707, 502159, -207039, 455856, -652198, 360013, -970616, -169504, 137442, 578333, 548063, -221426, 795955, 627981, -967876, -320657, -371085, -508532, -830567, -458620, 293907, -258867, 546442, 316797, -185250, 43303, -817994, -305851, 832104, -734799, -306314, 123563, 150988, 979856, 214614, 833171, -537557, 523287, 842287, 146965, 474647, -648619, -964815, -854196, -76547, -369040, -703929, 9663, -153134, 203694, 771466, -132827, 318819, 274830, 250098, 66493, -80177, -610927, 601012, 436123, 174360, -348838, 568545, -952009, 930238, 624204, 543691, -842440, 352803};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques948(){
        Integer[] array = {-324090, -651127, 259858, -79009, 804007, -109876, -536433, 637989, -174494, -370435, 42815, -652927, 410045, -575823, -241836, -914781, -649373, 804011, 889953, -188237, 214161, 936628, -526428, -424366, 198512, 247232, 487468, 25602, 226888, 720401, 184384, -98869, -286032, -421524, 462607, 722538, 669589, -305070, -231664, 276588, 969659, -702181, -319017, -793584, -175788, 32038, 179251, -949827, 261850, -951217, 301482, 550476, 512146, 288670, 679577, -260397, 509159, -802601, -716656, -803631, 329589, 75866, -24977, -998197, 42894, -115580, -250871, 333843, 641283, -293256, 942038, 124894, 264848, -215859, -150181, -552002, 363103, -144033, -712500, -807994, -276975, -718075, -394619, -218799, -76164, -64157, 791137, -89001, -631503, -235844, -313992, 350043, -160932, 290045, -772890, -852577, 935846, 116663, 547162, 761719};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques949(){
        Integer[] array = {483159, -543362, -732013, -530738, -354567, -852556, 501088, -644723, -135652, 718697, -476987, 892608, -677287, -960320, -58134, 715839, 453543, -958710, 635591, -700067, -293854, -601376, -995307, 380528, -445833, 233727, -712968, 187723, 217405, -248282, -542881, -549085, -396850, -955478, 919357, -980347, -488143, -61468, -588426, 546942, -241311, 515262, -976366, 381811, 32946, 397331, -689312, -227116, -590512, 289620, -850041, -154437, 669034, -942918, 172536, 294768, 914746, -199994, 945422, -701348, 557977, -926305, 484190, -749218, -532591, -43234, -144530, -418574, -233017, -693365, -567981, -480310, 304647, -595364, 100081, -942636, 405402, -990627, -414912, -516234, -272684, -638897, -24769, -374111, 757737, 315473, 439799, 296327, 659046, 696216, -306078, -212651, 580367, 919467, 568448, -966335, 8414, 559482, 223719, 163799};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques950(){
        Integer[] array = {537145, 97588, 379330, 542441, 311103, 987321, -230709, 278422, -580604, 613377, -413041, 471021, -262261, 247829, 155229, -989969, -15349, 429308, 212419, 31868, -249520, 357999, 664922, 235148, -382960, -585941, 55620, 961263, -274824, -510181, 833181, 515028, 409318, 358833, 886164, -593305, -824764, 418300, 899672, -595035, -507262, -913137, -683591, 434365, -677155, -287549, 342200, 624152, -867811, 803046, -850602, 729300, -75422, 537686, 190631, 777801, -80192, -290551, -92113, -275325, 78000, -755240, 793964, -394730, -258764, -212163, -359680, 903827, 879320, 850376, -729867, 612294, 754258, -528435, 380756, -841870, -541687, 32435, 128069, -235348, -6073, -422128, 378881, 181626, 998308, -961456, 909949, -86491, -138931, 119475, -13417, -554099, 96655, 761887, 353749, -677414, -466262, 572409, 466023, 23933};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques951(){
        Integer[] array = {192074, -727633, -670757, -164463, 806527, 245732, -313448, 785338, -755406, -165889, 302055, -387090, 252098, 210711, -164701, -462363, 93298, -601419, -368198, -40890, -708207, -311447, 791776, -326230, -112503, 170514, 384250, -311429, 761154, 228160, 191995, -815793, -254, 582747, -225289, 76928, -74854, -345628, -388290, 624332, 411074, -673223, 292818, 192816, -196508, -142911, 686407, 202224, -697982, -887719, 917214, 323051, -961123, -186334, 598834, -781132, -873377, 24227, 835277, 685857, 13207, 754118, -826532, -818217, 681650, 538787, -741551, -938199, -863822, 272710, -433131, 396670, -200154, -666659, 752888, -449891, -7900, -852324, -452457, -932926, 588638, -782694, -489725, -387655, 657205, 389107, -503290, -938838, 843062, 860801, -125145, 766253, 638450, 678227, 16745, 358379, 684133, -833766, 781833, -910112};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques952(){
        Integer[] array = {246944, 415180, 561893, 817998, -755340, -292540, 893835, -173455, 245062, 901733, -221008, 401046, -593520, -38540, 816577, 740524, 161782, -137311, 743740, -58980, -787448, 345315, 938698, 662822, 690799, -874843, -398962, -898982, 946432, -667981, 240235, -817969, -939420, -938070, 55610, 102248, 559124, 300774, -448746, -200616, 111604, 299322, 281325, -101981, -839558, 308953, -578964, -106436, -275572, 647471, -735704, -74069, -629336, -684126, -62909, -741527, 888577, -141608, 309436, -313501, 189220, -975961, -377912, 545722, -258890, 308529, -217755, 154625, 393496, -873790, -530235, 516548, -801438, 692660, 609963, 848693, -665440, 684169, 326432, 694429, 405696, -799470, -561407, 448381, -529260, -814229, 601085, -799324, 889321, 452523, 959264, 143924, 920028, 265317, -472953, -387717, 202918, -395957, 549957, 995259};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques953(){
        Integer[] array = {-563949, -310066, -161929, 943304, 377453, -209499, -869144, 183005, -617391, -322303, 54175, -258862, -323609, 271819, -106864, 176862, -859459, 104390, -105230, -775086, -293029, -572821, 442860, 89222, -380149, -583497, 749489, -105807, 672223, -622100, 594897, 164415, -152222, 351720, 863131, 498161, -766337, 704449, -483698, 826188, -447703, -846821, 41086, -621458, 69081, 686718, -858469, -596895, 87460, -32926, -233025, -490467, -900401, -727117, 226596, 663654, -645279, 581933, -279064, 330512, 745643, -277614, -545906, 205493, -870334, 95724, -42406, -93588, 252397, -771733, -213691, 16014, 963116, -788816, 846657, 507668, 134033, 15636, 748246, -595067, 250775, -287996, -180207, -167805, -831623, 5472, 658745, 705765, -55492, -791058, 657030, -707688, 92500, 415091, -514939, -935161, 248894, -522339, 410337, 402633};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques954(){
        Integer[] array = {-538065, 6072, -168552, -844780, -471993, 76254, 814173, 198499, 612600, 149462, 113208, -843835, -752400, 507463, 293272, -943208, -124445, 945016, -292234, -896348, 884340, 748243, 775223, 674725, -804962, -626573, 405284, 715963, -843850, 837445, -388330, -171205, -289292, -213098, -351800, 91474, -334705, 951693, -202785, -175626, 766199, -983828, -467376, -480957, -146147, -44568, -620894, 704470, -182204, -906724, 320345, -327707, 891316, -835220, -164774, -880644, -444273, 43960, -936413, -850507, -369683, -416629, -857850, -366133, -760820, -923478, -88124, 570342, -482583, -396593, -944165, 865148, 582457, -186629, 334429, 108746, 850113, 120718, 173650, 523326, -449577, 708678, 886517, -73593, -611780, -266708, 109749, 351526, 527071, -98664, 693832, 698952, -140342, -561932, -406669, -518443, 985243, -23561, -766137, -770724};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques955(){
        Integer[] array = {988032, -355891, -928684, 35520, 602784, -715120, -314478, -219667, 458251, -508571, -691475, 967474, 370591, -159219, 64689, -607261, 131601, 214693, -395178, 159475, 894237, 925854, -416776, -636136, 597004, -345353, 713988, -188293, 331289, -694556, -942465, -145687, -896982, 264927, 656870, -926617, -616623, -763087, -256600, -832417, 119759, 749173, 41384, -546099, -110526, -242751, -125440, -255233, 64062, 373829, -976072, -902033, -904425, 579361, 386872, 138396, 849375, 286528, -21303, -789061, 445488, 86311, 230756, 650069, -32304, -649834, 287090, 891529, -91562, 94988, 915975, -251016, -675469, -833350, 963311, -478084, -602692, -648453, -673125, 734438, -266218, -565074, -600291, 825662, 915084, -984039, -582198, 587412, 154154, -25023, 991467, 965356, 597464, 215495, -747537, 270357, -449571, 32967, 609709, 965617};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques956(){
        Integer[] array = {124746, 353322, -442593, 63983, -246059, 338706, -847165, 322067, 524331, 395269, 907240, -268352, -360517, -791220, 726150, -21599, 21205, 526315, 182644, -601487, -952315, 737482, 823908, -855187, -190274, -919002, 47577, 756623, -52142, -314363, 423963, 773820, 746233, -214217, 811236, -359451, 538560, -72175, 883255, 529307, -537610, -33424, 468107, -906947, -790995, 38441, -497697, 750917, 163175, -9961, 462324, -94644, -888154, -728250, 794348, 833139, 994187, -215459, 127399, -570537, 987892, -646522, 952427, 506273, 912643, -226055, -648965, 462583, 894779, 782988, -453970, 139595, -271347, -141807, -838887, -48929, -694055, 263620, -30002, 159829, 687163, -812554, -912585, 577621, -426384, 730929, -747113, 422020, 543492, 109507, 500212, 386808, -799972, -805322, 251852, -525428, 752110, -286933, -278648, -268840};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques957(){
        Integer[] array = {-111319, 485739, -479545, 967496, -667462, -727953, 618663, 670429, -371044, 341070, -248154, -359829, 506898, -689912, -668124, 775540, -446793, -829613, 308779, -280505, -118723, -5725, -974203, -115450, 214576, -173153, 572025, 121764, 149349, 179026, 142087, -808636, -606142, 135717, 200144, 245113, 896370, -999778, -826655, 332514, -935538, -366168, -114138, -917935, 287464, -22837, -501847, 185262, -929850, 942124, -356252, -692085, 617673, 583753, -188113, -14421, -180123, 327909, -541263, 297506, -668152, -665157, -618067, 452606, -976847, 255581, -990315, -722868, 768929, -190009, -920864, -327919, 297142, -733790, -353844, 923878, -259776, -868212, 978324, -784250, -158548, 954113, -982498, -527578, -778032, -789125, -230177, 310078, 522055, 282045, -476626, 449460, -557353, 439644, 878661, 770806, 23349, -531357, 960524, -795659};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques958(){
        Integer[] array = {-156451, 729633, 459473, 64606, 431352, 285522, -129673, 257340, -377163, -874154, -862091, -980141, 849723, 393186, 50677, -749640, 989282, 238349, -400584, 740354, 252189, 887695, -894472, -106981, 461691, 186895, 977327, 502597, 713120, 824738, -147958, -130125, -549326, 550294, 220175, -402973, 948106, 734887, -506029, -657981, -460176, -862441, 878191, -326968, -494411, -189800, 666460, 371519, -247841, -724036, 189463, 334999, -48199, 405507, -419077, 63479, -276423, -136362, -717027, 810919, -957325, 617023, 439945, -250084, 560178, -977167, -635887, -459070, 971985, 769985, 480737, -90602, -703510, 762323, 688902, -379422, -537415, 543439, 587635, 19245, -397937, -678602, 117233, 983243, 888108, -808476, -121126, -916267, 237881, -502933, -495743, 235284, 463079, 14425, -699351, -96480, 391842, -172970, -427498, 171187};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques959(){
        Integer[] array = {629866, -695784, 785260, -448138, 776507, -298785, -399097, -934658, -837279, 212946, 665835, -963288, 258402, -809492, 728240, -136627, -62613, -102115, -88815, 207733, -364313, -989987, 971002, -510717, 315897, -294419, -274240, -377856, -377073, -597257, 841920, 993431, 737744, 528345, -719097, -553967, 340609, -753228, -104312, -479009, 113225, 265873, -497196, -124866, -578704, 738883, -757593, 855729, 18522, 95260, 843944, -355344, -492251, 596903, 873407, 511872, 983911, -519586, -261075, 736747, 776138, 873721, 737200, 400585, -933142, -448422, 181730, 818668, 501801, 868015, 498077, -186307, 829002, 580938, -432209, -224594, -410116, 129893, -649495, 221392, -11197, -828417, -568582, -629333, -270050, 646788, 596915, 179466, 94105, 331358, -463007, -227955, -984545, -474154, 137500, 817805, 177015, -168190, 709474, -692027};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques960(){
        Integer[] array = {-850992, -39059, -277917, 798989, 214685, 199112, 280213, -128777, 58778, -952866, 874815, 106663, 38025, -625234, 363221, -872941, -834759, -396603, -973928, -80177, -393546, 202945, 331979, -813002, -767244, -191739, -518415, 701394, -715605, -524569, 799185, 578316, -704451, -385029, -447736, -136149, -997907, -442741, -733117, -298849, -840740, -777392, -88030, -874684, -614615, -201354, -541768, 375556, -803050, -428076, 925089, 540112, -548175, -469998, 479758, 500386, -335570, -463033, 950306, 177950, 222494, -648784, -306559, -562381, -46965, 457282, -509778, 785605, 334954, 828995, -651928, 249857, 427550, 862623, 783035, -822392, 291804, -77062, -67148, 777590, -835615, 501355, 266275, -527299, -525750, -777997, -758570, -612021, -377780, 69718, -25480, 24398, 799791, 177701, -750756, -772615, 560854, 20722, -751305, -700963};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques961(){
        Integer[] array = {-894593, 14701, -604310, -37278, -175424, -21433, -244929, -488962, -553897, 369066, -441797, 777848, -106841, 100994, -942422, 167755, -347778, 974871, 388730, 593826, 682656, 151777, 259881, 842362, -243581, 342386, -345823, -341652, -485940, 291710, -886067, -57242, 796223, -411881, -944186, -358259, 675204, -521866, -270879, -394652, 112448, 986240, -732520, 441440, 286610, -567120, 97888, -354059, 635452, 509940, -106912, 588608, -36816, 346317, 221062, 457652, 511182, -563748, 301884, 18827, -364064, -718670, 347108, -682365, 306253, 136690, -21018, 820420, 692524, 96388, -565023, 4376, -127070, 180033, 360874, 896271, -577889, -406158, 765758, -457986, -406049, 569307, 260804, -132583, 709257, -367526, 346730, -780610, 461942, 148958, -491690, -31805, -97121, 242543, 989245, -411936, 210616, 257815, -282267, 98607};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques962(){
        Integer[] array = {-42717, -342819, -983115, -881457, 693944, -310302, 666970, 771311, 632385, 757572, 385937, -907870, -641121, 748978, -250557, -909843, -684218, 443471, 235720, 883810, 411922, 695655, 931151, -59989, 828186, -343799, 593019, -43967, 24568, 79978, -852603, 766880, -358145, 602368, 728208, 680604, 149286, 610788, -739282, -739109, 981959, -640457, 116217, 323932, -129365, 382629, -995599, 862814, -852471, 841871, 826586, 224409, -885126, 953869, -821158, 494139, -881245, 445203, 126635, -521702, -17703, 804992, 949195, -947471, 214854, -163536, 936302, -32028, -446848, 511171, 220711, -78945, 529926, -562830, -173337, 443623, -223214, 29365, 855650, -562101, -888830, -774541, -856051, -617745, 736432, -917577, 879635, -604322, 859228, -549337, -524955, -254665, -418475, 438731, -134406, 290975, -968899, 306588, -359076, -618151};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques963(){
        Integer[] array = {-633999, 183779, 519325, -741003, 227227, -385791, 406780, 84766, 308997, 922770, -712565, -189057, 237586, -495207, 866961, 791013, 49271, 274030, 302280, 693476, 658279, -347777, 511424, 896998, 354104, 441161, -110518, -634237, 360339, -381494, 393188, 183566, 3665, -153447, 798234, 696368, 973127, -771865, -222629, 156391, -486180, -475557, 869506, 719423, -316887, -826472, 880662, -828617, -931045, -3317, -790429, -682459, -704763, 881928, -412945, -346283, -130202, -557775, -42066, 508952, -663106, 416668, 808601, -620719, 639814, 483878, -519923, 487878, 374483, -790748, -816728, -372740, -458293, 378499, 523934, 695692, -660340, -9986, -893775, 703553, -572512, -526229, 98250, 392573, 366731, 903786, 666306, 238630, 680342, -163099, -845906, -740530, -238588, -358095, -713705, -403228, 138274, 753286, -579872, 1095};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques964(){
        Integer[] array = {564818, 148961, 972996, 976521, -256290, -887532, 736463, -391600, 835312, -552376, 428057, 245127, -959465, 228032, -95129, -1036, 779025, 998212, 766008, -438631, 489129, 810400, -8468, 94932, -531214, 401203, -335065, 647873, 963190, -334659, 72757, -634188, 787816, 354129, -390045, 965398, 541837, 969283, -351946, 815320, 147582, 371261, -652453, -687099, 486866, -775350, -21885, -689228, 541235, -295503, 847319, 214358, 224126, -304820, -388831, -823270, 923105, -313113, -575195, 689497, -774835, -220816, -865187, 413216, 951130, 180386, 745624, -847797, -398544, -827557, -625456, -880525, -385816, 67364, 822545, -957231, -173301, -294321, 994416, 366162, 401213, 427100, 170277, 38980, -383335, 578406, -76312, -780844, -364952, 620676, 35682, 218259, 962556, -392991, 40579, 742057, -75653, 564820, 87510, 123916};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques965(){
        Integer[] array = {800136, 573533, 770904, 121692, -859926, 927888, 737410, -525985, -135932, 703661, -880961, 195641, 551387, -173429, -167100, 834316, -844475, 699787, -11644, 689893, 144427, 721980, -104483, -100637, -407636, 177618, -703610, 672578, 248090, 267640, -740499, 171609, -813006, 722925, -704665, -225271, 141836, -611426, -810635, -17080, -753671, 411787, -487347, -311080, -934351, 657954, -301224, 666680, -852843, -40318, 848667, -560180, 258509, 383561, 923955, -211313, 51057, 792621, 96060, -818151, -238418, -996299, -935298, 679521, -641534, 551591, 79416, 730746, 949404, -551205, -96402, -878454, -105672, 653153, 478814, -284787, -757190, 682413, 424981, -600498, 706944, -441207, -280563, -907756, 979256, -749477, 728470, -418261, 828304, 449146, -807926, -555757, -553193, 88712, 230710, -927924, -950006, -227036, -360751, -881733};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques966(){
        Integer[] array = {-756572, -531355, 247881, -723671, 910327, -87319, 939615, 550735, -409156, -447995, 995172, 872466, -422341, -41527, 629817, -339128, 738404, -520438, -410088, -731989, -562572, 140014, 809728, 697161, 241003, 110063, -662324, -504686, 896941, -887926, 842259, -358914, 903109, 703584, 396731, 882163, 581328, -496641, -710216, -941123, -946314, -86707, -44316, 76154, -639639, -445827, -948176, 393143, 355527, -975712, 993375, -998949, -458372, -871758, 119883, 905404, 413784, 786058, 813674, 391073, -461589, 419506, -506052, -454050, 917240, 24989, 361216, -685986, 335813, 795000, 443523, 910256, 301528, 249693, -163503, -779718, 774206, 459042, -473774, 181800, -840397, 126449, 667942, 805635, -269563, -552439, -86691, 38539, 188463, 908066, 129324, 146850, 77985, 435346, 204533, 700078, -605983, -88583, -276538, 116208};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques967(){
        Integer[] array = {602710, -573381, 523593, -445830, -318943, -304770, -624331, 347513, -530004, 400759, -297264, -843865, -745005, 735359, 417341, -258048, 31080, 189735, 651094, 868422, 511214, 124938, 651198, -330080, 265163, 495360, 702560, 900394, 700647, 479030, -227184, 44712, -909821, 758530, -251899, -920494, 288916, -105380, 376188, 867252, -512153, 592348, 229475, -81067, 449171, -408533, 92097, 371116, -425486, -538581, -356298, -97328, -650202, -796867, 942199, 335655, -412830, -504630, 932638, -351975, -759762, 505066, 801416, -781231, 265709, -807544, 631600, -163983, -107194, 191957, -317613, 792755, -853956, -483640, 762128, -468835, 194091, 534372, -787860, 930601, 267809, -299067, -439453, 32143, 590280, -131515, -680226, 128872, -688731, -536926, 36168, 179573, -982972, 33259, -953735, 600188, 864991, -106169, -262049, -616695};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques968(){
        Integer[] array = {125776, 274378, 389912, -53246, 267392, -258672, 645568, -364103, -14052, -369060, -120161, 117338, -832764, -5522, 751818, 651444, -911841, 538057, -248448, -848783, 340099, -913815, 358692, -193714, -238383, 412820, -959555, 47284, -909804, -516016, -312727, 490335, -625035, 13656, 600673, -973790, 382166, -378091, 231857, -649518, -93379, 999720, -961049, 531349, -350863, -714792, -443772, 1180, 832630, 761092, 781966, -343597, -26707, -635367, -216805, 160308, 759892, -884355, 541234, 447908, 706168, 754444, 609010, 725258, 607161, -947267, 975770, 747493, -862942, -350742, -319724, 47172, 541409, -841551, 94386, 54842, -238166, 275966, 386005, -720871, -370197, -715640, -106681, -772342, 650234, 58428, 325496, -216466, 870475, 806599, -804083, -832709, 549225, -155849, -224917, 187871, 60543, -562354, 862090, -221647};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques969(){
        Integer[] array = {-533255, 925964, 627046, -676342, -367328, -294329, 837373, -277901, 590371, -438081, 547788, 564832, 455922, 499016, -395437, -277914, 216401, -19063, 723416, 819501, -214202, 804194, -986497, -63812, 690156, -519416, 174220, -582085, -911024, 158296, -853674, -671019, -664480, 659438, -852994, 462880, 821201, 119685, -404730, -91667, 529560, -977806, 410386, 97924, 71244, -549017, 673866, -569882, -18316, 770313, 864173, -713345, -964624, 205736, 57137, 89961, -247833, -365416, 153516, 241312, 404070, -390047, -132778, -929557, 625219, 868307, 124058, 718564, 421081, 960251, 570685, 897081, 978542, 352532, -637788, -528641, -903511, 385973, -239622, 764635, 939121, -583005, 15273, 317795, 177062, 988632, -975780, 872630, 887871, -120679, 444006, -309703, 798185, 12237, 279503, 961892, 774107, 249931, 20520, 606785};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques970(){
        Integer[] array = {-646017, -56497, -169468, 38112, 836142, 691495, -779957, 695627, -138073, 817926, -377623, -229246, 173069, -602463, 903309, 20160, -841499, -90897, -824669, 274510, 519178, 360679, -637618, -287495, 286778, 826898, 262259, 893944, -156501, -601914, 232168, 829341, 895242, -781764, -739619, -152778, -678669, 769359, -287477, -473110, -396092, -958740, 434445, -886914, 965137, -777674, -206349, 616341, 962891, -530776, 271559, -78375, -460093, -723666, 367848, -858709, -476268, 857971, 919058, -269642, -855748, -404093, -83145, -519270, -584708, 230539, -679732, -240300, 408111, 789374, 357881, 841866, 969359, -598723, 278828, 565315, -281671, -210734, -23738, -324686, 69315, 36894, -6149, 211313, -326720, -761306, -426291, -496828, -210533, 329344, -52157, -681179, 558291, 878971, -384527, -680469, 345786, -646994, 350740, 277047};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques971(){
        Integer[] array = {-256402, -276829, -445170, 182713, -797523, 999064, 648505, -920814, 286185, 73661, 275581, -898900, 643545, 683340, 656594, 843462, -653088, 225784, -996538, 426806, 606654, -179161, -191989, -811050, 386281, 189912, -605540, 948521, 433503, 606970, -201686, 654399, 488421, -344907, 411584, -567714, -551199, 753040, 850023, 717938, -594220, 479439, -820125, -421283, 608907, 113685, 371127, 235665, -220400, 846620, 412129, -300448, -200602, 633124, 73451, 722546, -357740, 803788, 735081, 968326, 912765, 686880, 27213, 885486, -924025, -796158, 521675, 291496, 978655, -392342, -758797, 739324, 361708, -116452, 813207, 615018, -349559, 97274, -101374, 33696, -575733, 343107, 659288, -62350, 663698, 761102, -200983, -259543, 93987, -455842, 462911, 9435, -878492, 375968, -72059, 874289, 853055, 317872, 297583, -685828};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques972(){
        Integer[] array = {712276, 235471, -703174, -691984, 467771, 820372, 317830, 932168, 430807, -38973, -213659, 245248, -914037, -68305, -162194, -233373, -384123, -886489, -548775, -161413, -654645, -208357, -839514, 425078, 999192, 878601, -514345, 197669, -949683, -281119, 12729, -701360, 629704, 161741, 346708, 435779, 564541, 156723, -409554, -27275, 524241, -420009, 13938, 212561, -617183, 869481, 230386, -404465, 213548, 62469, -126513, 119140, -523461, -394146, 681567, 819273, 639425, -225980, -870343, -493973, -120267, -175155, -591109, 703214, 129823, 50168, 368124, -530133, -359808, -253471, -73403, 142247, -255585, 615177, -799546, -577979, 827416, 366200, -408859, 92001, 962240, 99167, -67129, -149938, -812319, -496472, 425440, 89816, 364478, 580077, -179195, -633966, -768745, 74383, 865127, -442643, 942219, -464688, 489896, 438579};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques973(){
        Integer[] array = {449660, -7113, 95824, 738655, -108358, 506729, -100601, 672812, -904798, -77739, 982062, -761689, -299586, -303501, -83478, -127764, 275019, -235501, 598159, -213535, 340094, 441907, 845895, 86150, 208937, -757417, -840372, -413423, -569773, 242488, 566734, 265645, -894841, 364893, -442733, 645629, -370055, -824547, -417264, -238394, 455975, 366878, -672758, -988399, 136211, -19626, 453832, -908884, -718426, -746576, 181793, 6737, -414184, 119538, -211322, -462554, 869647, -834772, 715211, -55524, -979853, 429462, -403868, -711346, -314590, -375608, -71083, 597229, -516429, -605057, -665503, 88649, -437897, -719217, 148266, 529105, 609783, 536668, 93854, 654361, -801002, -647675, -104002, 959276, 888512, 925920, -613005, 877104, -140056, -390101, -306104, 179635, -336313, -988695, 511680, -477403, 666031, -247356, -770245, -775683};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques974(){
        Integer[] array = {581769, -396760, -213079, 482504, -499150, 19328, 981954, 225134, -741940, -94828, -976257, 135399, 60824, 374425, -184247, -449046, -667207, 334929, -660686, -606703, 393961, -144184, 664412, -81930, -204692, -505907, 993463, 781217, -597968, 230479, -632850, 936880, -460322, 608034, 673295, 111421, 34625, -944919, 178977, -652667, 199083, -677206, -951329, -550492, 466356, -159485, 511639, 290064, 729893, -277123, -548307, 732131, 726959, -499163, 651545, 807496, 151599, 79260, 831349, -149185, -698145, 813481, 659087, -693743, 69390, 51955, 138225, 306455, -384879, 434167, 301502, 221556, 483116, 692874, -127535, -756095, -69980, -258250, 506087, 848956, -912547, -833, 926835, 351926, 791973, 700982, -58296, 941037, -345154, 1299, 937460, -321846, -249332, 587953, -993821, 665509, 265937, 211931, -381474, -128053};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques975(){
        Integer[] array = {-884322, -164013, 272203, -159944, -310256, -123200, 316724, 13592, -925494, -20978, -69215, -290652, 947718, 608724, -246730, 239147, 423604, 597365, -865428, -376506, 779588, 320172, -322029, 755601, 279381, -689226, 705432, -449008, 911978, 502453, 150951, 90952, 877151, 39439, -46055, 770939, -723917, 82363, -833650, 151829, 201090, -847121, -697957, 480491, 538309, 590266, -77551, -972833, -711860, -23777, 149369, -293526, -252924, -249933, 139493, -23075, 632032, 730556, -376869, 313009, -214120, 246530, 426591, 899354, -570933, -390521, 772075, 520296, 439553, 944085, -35007, 473403, 242561, 121564, -86298, 574751, -505523, -361632, -906510, 877325, 248371, -148059, 366884, 425163, 73011, -863808, 358155, 673375, -52899, 4821, 651088, -868861, -799031, 1734, -521670, 331293, -829203, 818552, -294727, 431362};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques976(){
        Integer[] array = {-333898, -18118, -358781, 92037, 847758, -603740, 732164, -241190, -631908, 980267, 578778, 258079, 922328, -291942, -922056, -180149, 556022, -314091, -523048, -508847, -835838, 436969, 880720, 454775, -603354, 878972, 225825, 334302, -426395, -368912, 29414, -46969, -987484, -404914, 726586, -124575, -139460, 349560, -27622, -98326, 24673, -603922, 624473, 268924, -367850, -513100, -34666, 404606, -524438, -608489, 823089, 89075, 100597, -855478, 429104, 988589, -437966, 511516, -750608, 5261, -515202, 328825, -509942, 934341, -587327, -952758, 541118, -102979, -887201, -148462, -528799, -81000, 313009, 235468, -391758, 852628, 669160, -174971, 639083, 188879, 779727, -897434, -677907, 634843, -560399, 801371, -699233, -839825, -879602, 263978, 761663, 291682, 203830, -227977, 722443, -149909, -809361, 577446, 975630, 947076};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques977(){
        Integer[] array = {-557126, 829907, 660301, 438583, -571263, -565906, 500440, 128132, -486939, 442521, -50413, -750928, -511016, 227054, 421135, -509776, -334767, -489730, 972227, 444401, 852649, 808131, -238081, 45958, -220351, -79202, -977940, 211442, 450036, 832321, 820693, -483633, -165018, 973857, 450121, 159771, 934637, -614329, -88051, 846625, 952080, -344452, 669847, -407853, -120113, 620178, 688370, -174736, 530968, -253648, 284432, 41267, -552368, -56772, -994666, -814300, -233933, -232582, -466538, -24562, -440593, 12904, -879432, -741145, 495863, -450788, -219494, 25295, 597787, 960991, -105972, 180557, 70109, -321257, -549393, -328922, -518239, 105113, -966052, 88418, 852930, -362994, -787646, -169816, -317458, 780569, 55990, -433303, 352795, 972069, -346793, -302402, 136938, -369357, -119418, 424411, -658201, 955809, 115912, 212069};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques978(){
        Integer[] array = {-588952, -988253, 148306, -666828, 498548, 75366, 714405, 867946, 114616, 360686, -666099, -329389, 943795, -658614, -596323, 436548, 940700, -849492, -155270, 500070, -635455, -822571, 461228, 521857, 200362, 168409, -434097, -295907, 465816, -909987, -647702, -545963, -373948, -192296, -834893, -543398, 367675, 827824, -686295, -441276, 460342, -122952, -190053, -217114, -98120, -555332, -21343, 97800, -921294, 484551, 806999, -770529, 881742, 541845, 170738, -820872, 395780, 949890, -927533, -554797, 484063, 506437, -939637, -395712, 544120, 145299, -222905, -207873, -178483, -440041, -510072, -376701, 821479, -488264, -566752, -170043, -871170, -888321, 214274, -452300, -797834, 225600, -732386, -484589, -572060, -573926, 174571, 367595, 842067, -405925, -925613, 914101, 437854, 369295, 511869, 350736, 693030, -818903, -319285, -286638};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques979(){
        Integer[] array = {311614, 300669, 622598, 735806, 788741, 892008, -645645, 936262, 502595, -364278, -695310, 945, -430131, -826591, -108014, -248248, 431925, 181569, 608000, -725384, 155840, -889043, -343441, -810548, 528101, -196382, -252887, 2303, 461138, 758564, -56479, 503052, 981512, 688735, -952066, 1612, 159253, 132879, -970786, -852217, -219444, -936301, -792880, 975545, -646467, 187440, -46678, 118048, -271448, 207209, 604377, -209603, 817319, 449306, 336283, -642658, -213929, -810222, -18026, -98846, -615667, 667898, -117367, 919088, -614511, -239263, -817194, 614665, -227764, 833485, 396697, -806406, 571505, -73887, 462742, -401019, -530094, -292498, 196134, 581406, 777863, -556445, 353003, 62367, -184692, 11202, 144525, 834617, 982192, -707061, -399397, -580989, 913961, -6705, -20568, -29520, 530603, -986847, 184684, 365368};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques980(){
        Integer[] array = {120921, -395113, 960949, -835467, -740285, -247304, -990601, -975231, -95259, -648592, 11246, -662350, -876297, 917212, 347151, 24421, 364102, -296512, -552409, 396277, -311635, 231172, -369434, 258422, 351888, -236842, -435161, 569002, -619312, -25019, -13080, 92710, -656221, -533718, 633625, 859797, 651710, 206290, 29676, 14277, 554645, 804657, -351020, -491097, -305191, -456747, -469367, -154792, -982736, 10239, -8039, 818285, 682697, -397659, -370656, 742204, -116450, -73860, 60178, -979085, 118149, -95087, -6750, 599793, 390364, -93024, 851635, -685254, 690920, -977587, 226152, -224050, 509082, 797175, -270677, -107791, -388241, 666809, 563403, 757950, 925487, -244410, -285104, -262999, 53672, 699188, 899763, 575018, 837929, 125555, 664370, -727461, 839941, -236583, -645446, 387942, 768395, 528395, 459444, 78157};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques981(){
        Integer[] array = {663047, -960533, 994503, -627761, -578877, 798202, -775134, 978967, -118179, -620659, 610829, -821767, 245353, 380695, 534350, 997252, 295255, 670384, 476749, -263599, -772065, -80936, -771609, 335779, -990011, -272381, -622233, -824706, 175778, 482621, -300729, 440836, -857460, -810616, 121148, 724878, 863044, -314555, 591449, -191854, -508831, -318894, -170110, 705469, 410278, -577412, -507478, -479372, 605910, -3925, -450200, -432215, 287810, 766248, 648280, 139694, -954784, -559673, -650223, 649423, 575354, 671598, -347012, -811888, 73054, 675053, 337501, 440859, 559615, 390886, 472639, -187071, 669139, -430520, 691731, -716931, -328376, -40573, -579488, 419345, 983497, 590481, 749348, 589688, 321013, 49434, -767463, 716386, -541202, -380168, 214909, -509359, -941708, -358684, 935949, -794319, 882915, -641571, 3351, 783629};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques982(){
        Integer[] array = {553006, 658763, 842532, -821697, 423477, -815395, -621962, 955413, -29555, -634744, -246757, 916185, 741474, -328676, -216014, -243718, -228069, 382671, 55494, -315575, 921567, 585189, 605085, 611009, 250785, 141906, 252680, -735693, 49382, 198516, 554769, 298218, 47583, 263427, -539205, -32188, -324211, -508847, 435117, 501720, 267402, 201685, 775960, -540754, 696355, 409082, -344852, -991805, 441979, -576112, 420790, -648411, -628635, 163379, 643105, -894017, 441712, -705654, 61250, -516851, 684941, -631819, -351941, 183740, -231334, 202842, -658802, -336474, -176360, -837009, 787648, 616181, 299555, -38347, 712841, -574314, 748201, 55521, -149818, -235410, -210103, 577338, -843730, 611701, 722732, -870787, 830710, -738658, 686125, -163891, 697328, 42230, 386707, -961086, -651391, 926737, -708134, -555258, -28553, -238319};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques983(){
        Integer[] array = {427867, 221478, -597129, 49463, 441277, -512916, -320389, 981956, 334753, 258963, -315415, 608566, 841513, 571601, 421716, 656402, 809459, 344742, 294275, -668316, -331588, 255542, 357249, -684055, -133925, 692314, -971127, 190137, 842116, -462635, 690691, -183156, 587707, -276327, -607453, -906666, 277246, 213200, 361547, 780643, -446381, 877249, 149150, 87619, 185484, -917688, -262677, 993452, -663172, 481373, 391909, 810231, -631017, 150342, 48454, -153322, -172134, -998498, -948346, 359226, 709997, 672644, 585834, -987322, 657313, 551245, -621862, 91700, -580725, 241138, 860966, -277620, -527981, 977681, 552909, -896831, -748619, 733520, 265804, -731444, -806089, -322355, -52473, 250259, -618896, 282507, -95835, -863704, 892728, 692172, -634260, 953654, -487275, -260100, 999156, 23160, -150094, 310698, 944505, 785782};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques984(){
        Integer[] array = {-510880, -622116, 298180, 532401, -218592, -137727, -245155, -945834, 975700, -818173, 56544, -516354, 217480, 308639, 672470, -967603, -779186, -347582, -163739, 938684, 551174, 825561, 580568, 85956, -934939, -401344, -481113, -170751, 176843, 182447, -445332, 244000, -265026, 885364, -868628, 481339, 599416, -379340, 66439, -160472, 803480, -311374, 82997, 218273, -395063, 545289, 313014, 119927, -762643, -135317, 398819, -311540, 252833, 231461, 374595, 143753, 789529, -861566, -81708, 145960, -236543, 582297, 839568, 982347, -457248, -406332, 677468, 166832, -186071, 597720, -692396, -86404, 826915, 5213, -532232, 183896, -571710, 712919, 259701, 791986, -58041, -917194, -769581, -478690, -300640, 187967, -46409, -171895, -255240, 662155, -243087, -747904, 8554, 107698, -555506, -335908, 80178, 182649, 536142, -244163};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques985(){
        Integer[] array = {-764593, 211399, 944463, -132825, 981665, -343342, -132813, 475646, 614468, 2754, 291281, -241059, -506385, -404950, 429120, -334070, -337145, 904581, -454922, 343017, -2619, 533026, -678520, 617756, -327745, -202732, -741468, 633257, 610754, 488387, 412442, -136154, -712462, -881362, -515133, 248432, -393349, -865304, -492395, 805102, 556405, -743949, -520620, -772329, 134322, -385559, -340335, 530342, 215342, 213901, 298014, 54815, -344523, 721439, -482076, -905657, 566016, 501312, 993482, -204596, -810051, -2341, -427240, 166893, 224457, -641324, 253776, -839367, -450524, 664568, 72737, -204228, -18976, -885326, -972662, 34452, 719159, -256333, 782924, -367299, 832902, 67591, -338769, 721471, -88012, 723365, 989860, -283459, -234259, 245800, 234021, 347303, 759534, -404275, 516310, -595138, 397421, 559586, 821616, -807240};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques986(){
        Integer[] array = {-622843, 981111, 996073, 44787, 266055, -236929, -1596, -898388, -66948, 394351, 110896, 237910, 599906, 358081, -143094, 920413, -456449, 575806, 912444, -423716, -960860, -359086, -91544, 194579, -274300, -733013, -123540, -991624, 247245, 933930, -846676, 541576, -745063, 482308, 194471, 734824, 183354, 116224, 567933, -909497, 905194, -948540, 172257, 807866, -324351, -485981, -108766, 657137, -519261, 249116, 723284, 675863, -349819, -384000, -56528, 237219, 168797, -237591, -991359, 181547, -248799, -700708, -753590, 46763, 492478, -779445, 321207, -381503, 495342, 415914, 706802, -227489, 790384, 586141, -980092, 100806, -746197, 18385, 513639, -129936, -321544, -782998, -985437, 691476, 179941, -300910, -703406, -151859, 411282, 192564, -845023, -293708, -479163, -449946, 348677, -792488, -546039, -108296, -739872, -813801};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques987(){
        Integer[] array = {-611862, -62935, -887435, -963307, -270567, 599818, -960189, 308227, -566753, 247469, 215829, -964451, 57389, 408816, -265099, -390262, 398593, 327635, -832022, 264170, 101559, 547089, -848112, 847451, -88599, 784211, 676445, -621666, 113939, -674633, 560268, 942879, -359196, 983197, -691855, -884655, 998494, -489398, -752712, 884756, -612062, 78349, -198782, -352859, -85553, -853043, -872455, -596666, 428860, 31060, -598182, 827957, 458726, 530306, -233232, 711725, 878669, -695888, 391629, -289470, 570594, 201382, -612874, -551199, 650614, -340075, -936398, 731931, -554232, -200320, -752535, -473052, 866527, 387832, 911406, -33176, -378655, -399383, -849969, -468671, -671621, 672999, 768650, 230194, -411003, 607291, -940944, 935648, 738125, 872731, 240169, 569356, 342807, 587644, -907338, -308334, 358249, -756898, -12830, -278509};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques988(){
        Integer[] array = {850430, 234425, 536038, 41635, 362580, 907276, -990218, -45369, 36338, -596090, 938145, 789558, 863174, 648172, 614011, -386243, -305227, 185918, -902233, 805522, -966717, -733110, 539347, 446601, -627289, 562729, 131857, -933694, -378158, 823123, 215128, 544677, -45811, -598914, -408636, 178711, -320972, 583962, 667186, 539871, -962088, 78557, 177736, 854831, 145493, 521119, -520736, -248500, 481631, -24717, -237707, -225444, 435228, 198642, 968900, 693031, -980367, 970270, 622717, 744168, 690697, 387141, 412442, -511861, 423356, -287030, 663676, 515831, 405724, 432205, 531178, 278827, 633750, 160316, 109936, -301223, 27784, -143520, 851355, 43895, 760368, -874657, 138630, -609369, -811766, -559721, 358053, 528970, -916001, -84944, -824404, -173953, -312415, -400515, -988444, -269429, -50216, -58735, -311227, -2050};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques989(){
        Integer[] array = {964540, 773018, 118938, 446096, -739089, -342265, 313518, -163761, 378357, -20250, 891776, -529790, -767580, -531544, -969440, 17666, -528962, 510685, -449132, 234444, -980381, 174982, 620091, -326453, -705590, 540544, 272651, 272500, 547020, 92572, 892710, 615036, -391906, -273172, -537649, -13960, -479952, -679464, 501521, -957970, -727937, 635671, -960698, -154353, -135419, -1682, 423426, 704559, -368374, -703912, 69098, 648228, 506389, 938164, 824450, 146767, -994780, -538932, 880506, -278892, -150486, -505149, 627023, -803193, -716244, 527165, -466678, 747354, 29237, -975365, 702525, -778916, -349303, -158671, -432790, 683765, 619022, -281826, -734456, 290284, -254525, -866101, 256781, -496321, -221883, 738279, 638514, -961426, -747558, -88787, -196405, 624894, 638804, -559153, 905114, -389371, -629908, -979818, 70990, -6520};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques990(){
        Integer[] array = {-740034, 7440, -615152, 368450, 498670, 773265, -456008, -498712, -547984, 949865, -633076, 759893, -980522, -113001, 147818, -5727, -996632, 137255, 526917, 903157, 774627, -341337, 674153, -843524, -636024, 792147, -871669, 29343, 321495, -670068, -5840, 753704, -36615, 597592, 16783, -701739, 576859, 230967, 714433, -160228, 235201, 441521, -500657, 729480, 660783, 423620, 305804, -587330, 731561, -841418, 920203, 577866, 977039, -555078, -699079, -919808, -375184, 284200, -907056, 974256, -368499, -441945, -983106, 904898, -563776, 186286, 713736, 493004, -614001, 558964, -756036, -344048, -890062, -346614, 1315, 155945, 824856, -946687, -911395, 988286, 626571, -978994, -384212, -243402, 703475, 965282, -254321, 897076, 367738, -520480, -879704, 294244, 88599, -216708, 626159, -632740, -800364, -930690, 485574, -762817};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques991(){
        Integer[] array = {325788, 255015, 605774, 879590, 257133, 531098, 682786, 721425, -314635, 161687, 294451, 59488, 142087, 525078, -743691, -934877, -304208, -441494, 674381, -482238, -976853, -476357, -713884, 692375, 340808, 573450, 930632, -531878, -248561, 484945, -586566, -61534, -116329, 800612, -549670, 605832, 98825, -896436, -85218, -493127, 86504, 538142, -657445, -703497, 924445, -249846, -507035, 493600, 376527, 751090, -940313, 670487, 508982, 815441, -335015, 242408, -500142, 148623, 386300, -499597, -530452, -492620, -443166, 492729, -334072, 507660, 183524, -961507, -164201, 102797, -405323, -171493, 856907, 941535, -449711, 147561, 298302, 827218, 367177, -181183, 63812, 528419, -385262, 320438, -400546, 967263, -647850, 175835, 57125, 552369, -39127, 339941, 171009, 965008, 162158, -88937, 142767, 658778, 693543, -831693};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques992(){
        Integer[] array = {676256, -302202, 824793, -463516, 536783, -206561, -453171, -740156, -91344, -443151, -278566, 691181, -869606, -706958, -432271, -796374, -168671, 689333, 828874, 28835, -218896, -941053, -849185, 935976, -815871, -386464, 462370, 421301, -711954, -556494, 7271, -969982, -418796, 319344, -950552, 281607, 590041, 608538, -163441, -91220, -637287, 95540, 563418, -587186, 332688, 358991, -790624, 371235, -611679, -703677, -270309, 268491, -400564, -266143, 472628, -59308, 820445, 470704, 87124, 150615, -668889, -557597, -223518, -311098, -903759, -645627, 251443, 479549, 259892, -986368, -10455, -264343, -226286, -110444, 592304, -910918, 872049, -944435, -989048, -246036, 710992, -481198, -556343, 342069, -627093, 341723, 439526, 642191, -322334, 146143, 848230, -947434, 400018, 110799, -839891, 938540, 328168, -998486, -315242, -290300};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques993(){
        Integer[] array = {-955750, -667402, -499114, -164734, -988959, 594844, -381214, 468488, -492672, 294552, -406, -789342, -447788, 539010, 539102, -277826, -331735, -650233, -277339, 606395, 296903, -243749, -573065, -828145, 596837, 952252, -236963, 762004, -17941, 171996, -34597, -867999, 138215, 591839, -887986, 991142, 606289, -37597, 336493, -265904, -164460, -338284, -480082, -224590, 894720, -164493, 718936, 426989, 466977, -857409, 627785, -28436, 830429, 946736, 131342, 484553, 585837, 328516, 663223, -463908, -806686, -306668, 685516, 564625, -199156, -110607, -336605, -395270, 997431, -834135, 497918, -362633, -365887, 262573, -604248, -410910, 188788, 125713, 110510, 586249, -378505, -451343, 329441, -206487, 634750, -569013, 911870, -730687, -72068, -907091, 495748, 960193, 13491, 243453, -397932, -187459, 456680, 965816, 126756, 547601};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques994(){
        Integer[] array = {-503736, 611222, 833234, -610563, -486947, -4837, -720023, -298122, 448834, -443429, -202698, 615423, -374841, 485091, -231024, -425568, 821236, 777818, 929730, 895165, 845053, 653737, -274886, 625516, -702532, 741109, -239627, -318402, 31136, -259199, -51632, -841809, 90951, 715653, 689410, -775537, 363422, -22138, -255943, -391768, -183916, -303216, 657853, -405591, -920583, 280963, 790656, -127454, 438144, 136513, 828437, -649445, -710611, 30612, 246898, -478590, -335367, 956606, 280065, 335105, -199884, -517455, 720474, -675951, -512977, 550506, 820803, 194194, 166672, 945810, 779331, -752886, 525235, 852244, 705510, -382194, 882248, -699408, 168376, -237036, 442011, 659015, 414997, -527037, -524131, 715910, -407334, 75709, -762259, -177996, -563802, 971339, -729909, -437673, -800348, 906453, -491813, 620780, 99450, 479687};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques995(){
        Integer[] array = {989042, -97362, 160620, 545366, 204659, -429469, -8175, 813264, 804298, -615574, -570223, -899395, -976484, 446262, -337920, 935575, -791381, 310625, -989642, 566010, -313801, -535581, -479189, -908755, -319416, 830322, -778681, -139490, 179, 724687, -572128, -878653, 464370, 434484, 731126, -909611, -988001, -486310, -415674, -519229, 149714, 242580, 51313, 470524, -274682, 808909, -118317, 419198, -703111, -473694, -315451, -506326, -727507, -54940, -736197, 654672, -804920, 790446, 602844, 38930, 502341, -385385, -744520, 739768, 792622, 252810, -953538, 458450, 35312, -250021, 502052, 428795, -377412, -219482, 306875, 145555, 984768, -349439, 645428, -752435, -200380, 365733, 618349, -983918, -14511, 439700, 215306, 748044, 157409, 518409, 396232, 759903, 975753, 911745, -325399, 54410, 286156, 578543, -265280, 205403};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques996(){
        Integer[] array = {-530170, 206086, 477021, -14491, 596939, -542122, -701709, -609651, 386548, 571504, -62024, -644575, 329610, 696013, 214610, 473691, -19068, -972461, -65829, -572847, -287371, -728808, 261799, -234207, -402356, 140400, 844790, 885237, -744411, 116729, -551234, 142651, -964779, -824641, -693010, 157628, -420877, -603044, -336644, 330902, -913477, -625239, 121597, -298813, 395434, -30383, 561682, 256413, -533221, -212955, -669835, 792899, 476567, 183108, -433959, -370597, -655662, -299706, -594304, 166624, 54532, -200532, -953618, 390041, 313055, -606982, 576452, 280545, -569047, 43840, -251770, -878142, -238716, -673219, -763793, 237158, -731933, 574548, -753050, 562401, 408091, -831477, 5211, -213587, -236604, 752201, 206270, 363822, 115893, 965141, 340583, -563682, -402494, 352590, -782183, -919610, -542987, -654545, 699281, 858524};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques997(){
        Integer[] array = {-998473, 514382, 816039, 961974, -456361, 492869, -3183, -980652, -577856, 875806, 600198, -799286, 74764, 754253, 609318, -383541, 40494, 636048, 494714, -741350, -693714, 662149, 109922, -818797, 516113, -920192, -811062, 769604, -572638, 799781, -916128, -58923, -205299, -475248, 902723, 224618, -952717, 73445, 543743, -542721, -307782, 758347, 758866, -585093, 865811, -973088, -653117, 930525, 106558, 920709, -186710, 830653, -534750, 950296, 486526, 769042, -357487, -874602, -900190, -653387, 543203, 831151, -537398, -929080, -68536, 335615, 608958, 872782, 355493, -361242, 47168, 785629, 497951, -774441, -104049, 491487, -941050, 163248, 218677, 438238, 90399, -539322, 113339, 647903, -244423, 961987, -59646, -245277, 739885, -398973, 763520, 790039, 443486, 88129, -715851, 381485, 879140, 812222, -432320, 173632};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques998(){
        Integer[] array = {718962, 730608, 578620, -749156, 545752, 222955, 956392, -360729, 950655, -189201, -29242, 799198, 722293, -656958, 159087, -91732, 538234, -557532, 100461, 564552, 122579, 218410, -473311, -425187, -522609, -827669, 548700, -648945, -526879, -941506, -821609, -598507, 487928, 494106, -774124, 551834, 650609, 167594, 715155, 305688, -576961, -444518, 332797, 764519, 888581, 925075, -230014, 459331, -332275, 650418, -683684, -410384, -537662, -893029, -332894, 605785, 172701, 187870, -978218, -570403, 685663, -677899, 13651, -188744, 948335, 546410, -325827, -739015, 246112, 728868, 200799, 685779, 667185, 597838, -589093, -251290, -521655, 586329, -869943, -732121, -390225, -360148, -678500, -978585, 600800, 624603, -18354, 676969, 72401, 644752, 369960, -458353, -86342, -103534, -685126, -667356, 398413, -840299, -308480, 428343};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }

    @Test
    public void testSortingTechniques999(){
        Integer[] array = {-1155, -40685, 974670, 630683, -610493, -997868, -28984, -596899, -312067, -146214, -918504, -709086, 991145, -263637, 52594, -381418, -380319, -860372, -578537, 938403, 308822, -428480, -637146, -505999, 148130, 236403, -518153, -978263, 310131, 895678, -360732, 610284, -437861, 141207, 337463, -137990, 525486, -253663, 161421, -118451, -101458, -805109, 956029, 830613, 98855, 212182, -836497, -805508, 808225, -788757, 354855, -945177, 93895, -694439, 265493, 410992, 837328, 356122, 631122, -441464, 151199, -394047, 752653, 953285, 175647, 858063, 884106, 603696, -651464, -278654, 283883, -951356, 489611, 950924, 363159, 102811, 588385, 491292, 666058, -393995, -544657, -842672, 989223, -606663, -27690, -794337, 261199, 106022, -968122, 18217, 247240, 132043, 915647, -562856, -758165, -302739, 747100, -557309, -400707, -125297};
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));
        ArrayList<Integer> output1 = getLastList(simpleSF.getSortingAlgorithm("Insertion Sort").apply(list));
        ArrayList<Integer> output2 = getLastList(efficientSF.getSortingAlgorithm("Merge Sort").apply(list));
        ArrayList<Integer> output3 = getLastList(nonComparisonSF.getSortingAlgorithm("Counting Sort").apply(list));
        ArrayList<Integer> output4 = getLastList(heapSF.getSortingAlgorithm("Heap Sort").apply(list));
        Collections.sort(list);
        for(int i = 0 ; i < list.size() ; i++){
            assertEquals(list.get(i), output1.get(i));
            assertEquals(list.get(i), output2.get(i));
            assertEquals(list.get(i), output3.get(i));
            assertEquals(list.get(i), output4.get(i));
        }
    }
